Ext.data.JsonP['Alloy_Controllers']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Alloy Controllers</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"38929784\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=38929784\"><span>Edit</span></a>\n<h1>Alloy Controllers</h1>\n<p>\n</p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Alloy_Controllers-section-38929784_AlloyControllers-Overview\" Alloy_Controllers.html#38929784_AlloyControllers-Overview=\"Alloy_Controllers.html#38929784_AlloyControllers-Overview\">Overview</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Alloy_Controllers-section-38929784_AlloyControllers-Controllers\" Alloy_Controllers.html#38929784_AlloyControllers-Controllers=\"Alloy_Controllers.html#38929784_AlloyControllers-Controllers\">Controllers</a> </p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Alloy_Controllers-section-38929784_AlloyControllers-Inheritance\" Alloy_Controllers.html#38929784_AlloyControllers-Inheritance=\"Alloy_Controllers.html#38929784_AlloyControllers-Inheritance\">Inheritance</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Alloy_Controllers-section-38929784_AlloyControllers-ConditionalCode\" Alloy_Controllers.html#38929784_AlloyControllers-ConditionalCode=\"Alloy_Controllers.html#38929784_AlloyControllers-ConditionalCode\">Conditional Code</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Alloy_Controllers-section-38929784_AlloyControllers-PassingArguments\" Alloy_Controllers.html#38929784_AlloyControllers-PassingArguments=\"Alloy_Controllers.html#38929784_AlloyControllers-PassingArguments\">Passing Arguments</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Alloy_Controllers-section-38929784_AlloyControllers-GlobalNamespace\" Alloy_Controllers.html#38929784_AlloyControllers-GlobalNamespace=\"Alloy_Controllers.html#38929784_AlloyControllers-GlobalNamespace\">Global Namespace</a> </p>\n</li></ul></li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Alloy_Controllers-section-38929784_AlloyControllers-InitializerFile%28alloy.js%29\" Alloy_Controllers.html#38929784_AlloyControllers-InitializerFile%28alloy.js%29=\"Alloy_Controllers.html#38929784_AlloyControllers-InitializerFile%28alloy.js%29\">Initializer File (alloy.js)</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Alloy_Controllers-section-38929784_AlloyControllers-LibraryCodeandCommonJSModules\" Alloy_Controllers.html#38929784_AlloyControllers-LibraryCodeandCommonJSModules=\"Alloy_Controllers.html#38929784_AlloyControllers-LibraryCodeandCommonJSModules\">Library Code and CommonJS Modules</a> </p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Alloy_Controllers-section-38929784_AlloyControllers-Platform-specificLibraryFolders\" Alloy_Controllers.html#38929784_AlloyControllers-Platform-specificLibraryFolders=\"Alloy_Controllers.html#38929784_AlloyControllers-Platform-specificLibraryFolders\">Platform-specific Library Folders</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Alloy_Controllers-section-38929784_AlloyControllers-ExtendingAlloy%2CUnderscore.jsandBackbone.js\" Alloy_Controllers.html#38929784_AlloyControllers-ExtendingAlloy%2CUnderscore.jsandBackbone.js=\"Alloy_Controllers.html#38929784_AlloyControllers-ExtendingAlloy%2CUnderscore.jsandBackbone.js\">Extending Alloy, Underscore.js and Backbone.js</a> </p>\n</li></ul></li></ul> <div class=\"section section-2 \" id=\"38929784_AlloyControllers-Overview\">\n<h2 class=\"heading \"><span>Overview</span></h2>\n<p>\nThis topic covers how to write controller code as well as other JavaScript files excluding models.  Some traditional Titanium development is required, since Alloy controllers make direct calls to the Titanium SDK API to manipulate UI objects and access non-UI APIs.  Refer to the <a class=\"external-link external-link\" href=\"#!/api\">Titanium API Guides</a> for more information.    </p>\n</div>\n<div class=\"section section-2 \" id=\"38929784_AlloyControllers-Controllers\">\n<h2 class=\"heading \"><span>Controllers</span></h2>\n<p>\nIn Alloy, controllers contain the application logic used to control the UI and communicate with the model. The following code contains the presentation logic (<tt class=\" \">index.js</tt>) associated with the view (<tt class=\" \">index.xml</tt>).    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/controllers/index.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">function doClick(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">    alert($.label.text);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">$.index.open();</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/views/index.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;Alloy&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;Window </code><code class=\"keyword\">class</code><code class=\"plain\">=</code><code class=\"string\">\"container\"</code><code class=\"plain\">&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">        &lt;Label id=</code><code class=\"string\">\"label\"</code><code class=\"plain\"> onClick=</code><code class=\"string\">\"doClick\"</code><code class=\"plain\">&gt;Hello, World&lt;/Label&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;/Window&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/Alloy&gt;</code></div>\n</div>\n</div> <p>\n</p>\n<p>\nAll UI elements which have an <tt class=\" \">id</tt> attribute in a view are automatically defined and available as a property prefixed by the special variable <tt class=\" \">$</tt> in the controller. The <tt class=\" \">$</tt> is a reference to the controller. For example, the <tt class=\" \">$.label</tt> prefix in the controller is used to access the <tt class=\" \">Ti.UI.Label</tt> object instance in the view.  This reference is used to directly access properties or methods of this object.  For example, calling <tt class=\" \">$.label.hide()</tt> hides the label from the view or you can change the label text with <tt class=\" \">$.label.text</tt>.    </p>\n<p>\nTo access external controllers and views, use the <tt class=\" \">Alloy.createController</tt> and <tt class=\" \">Controller.getView</tt> methods, respectively. See the <a class=\"external-link external-link\" href=\"#!/api/Alloy\">Alloy API documentation</a> for more details.    </p>\n<p>\nIf the top-level UI object does not have an ID defined, reference it using the name of the controller prefixed by the <tt class=\" \">$</tt>. Since the Window object in the view does not contain an ID, the controller uses <tt class=\" \">$.index</tt> to grab the top-level UI object from the view. However, if an <tt class=\" \">id</tt> attribute was defined, for example, <tt class=\" \">&lt;Window id='window'&gt;</tt>, the controller needs to use <tt class=\" \">$.window</tt> to gain access to the Window object; <tt class=\" \">$.index</tt> will be undefined and the application will throw an error when calling <tt class=\" \">$.index.open()</tt>.    </p>\n<div class=\"section section-3 \" id=\"38929784_AlloyControllers-Inheritance\">\n<h3 class=\"heading \"><span>Inheritance</span></h3>\n<p>\nControllers can inherit from other controllers by assigning it a base (parent) controller: <tt class=\" \">exports.baseController = 'baseControllerName'</tt>. As in the CommonJS model, the controller inherits any exported functions from the base controller. These functions can also be overwritten.    </p>\n<p>\nFor example, the animal view-controller defines a label object with a speak method:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/controllers/animal.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">exports.speak = function() {</code></div>\n<div class=\"line\"><code class=\"plain\">    alert(</code><code class=\"string\">\"Yelp!\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/views/animal.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;Alloy&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;Label id=</code><code class=\"string\">\"animalLabel\"</code><code class=\"plain\">&gt;Animal&lt;/Label&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/Alloy&gt;</code></div>\n</div>\n</div> <p>\n</p>\n<p>\nThen, the following code inherits from the animal view-controller and override the speak method and label text property to customize it for a dog controller.    </p>\n<p>\n</p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/controllers/dog.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">exports.baseController = </code><code class=\"string\">\"animal\"</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">$.animalLabel.text = </code><code class=\"string\">\"Dog\"</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">exports.speak = function() {</code></div>\n<div class=\"line\"><code class=\"plain\">    alert(</code><code class=\"string\">\"Bark!\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"38929784_AlloyControllers-ConditionalCode\">\n<h3 class=\"heading \"><span>Conditional Code</span></h3>\n<p>\nAlloy introduces a set of special variables that act like compiler directives. Using these compiler constants optimizes the code at generation/compilation and any non-reachable code is removed.    </p>\n<p>\nThe following are the constants defined by Alloy for use in the controller code:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">OS_ANDROID</tt> : true if the current compiler target is Android    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">OS_BLACKBERRY</tt>: true if the current compiler target is BlackBerry    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">OS_IOS</tt> : true if the current compiler target is iOS    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">OS_MOBILEWEB</tt> : true if the current compiler target is Mobile Web    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">OS_TIZEN</tt> : true if the current compiler target is Tizen    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">ENV_DEV</tt> : true if the current compiler target is built for development (running in the simulator or emulator)    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">ENV_TEST</tt> : true if the current compiler target is built for testing on a device    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">ENV_PRODUCTION</tt> : true if the current compiler target is built for production (running after a packaged installation)    </p>\n</li></ul> <p>\nFor example, since iOS devices do not include a back button, the application can conditionally add one to a window controller:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (OS_IOS)</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    var closeButton = Ti.UI.createButton({</code></div>\n<div class=\"line\"><code class=\"plain\">        title: </code><code class=\"string\">'Close'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">        style: Ti.UI.iPhone.SystemButtonStyle.PLAIN</code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">    closeButton.addEventListener(</code><code class=\"string\">'click'</code><code class=\"plain\">, function(){</code></div>\n<div class=\"line\"><code class=\"plain\">        $.window.close();</code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">    $.window.leftNavButton = closeButton;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"38929784_AlloyControllers-PassingArguments\">\n<h3 class=\"heading \"><span>Passing Arguments</span></h3>\n<p>\nWhen initializing an external controller, you can pass arguments to customize it, for instance, <tt class=\" \">var controller = Alloy.createController('controller', {args1: 'foo'})</tt>. In the external controller, the special variable <tt class=\" \">arguments[0]</tt> is used to receive the arguments. For example, suppose you want to add multiple TableViewRow objects to a TableView object.    </p>\n<p>\nFor the TableViewRow object, called 'row', the view contains only the object, and the controller contains only a few lines of code to parse the arguments:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/views/row.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;Alloy&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;TableViewRow id=</code><code class=\"string\">\"rowView\"</code><code class=\"plain\">/&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/Alloy&gt;</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/controllers/row.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var args = arguments[</code><code class=\"value\">0</code><code class=\"plain\">] || {};</code></div>\n<div class=\"line\"><code class=\"plain\">$.rowView.title = args.title || </code><code class=\"string\">''</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">$.rowView.url = args.url || </code><code class=\"string\">''</code><code class=\"plain\">;</code></div>\n</div>\n</div> <p>\nIn a separate controller containing the TableView object, called 'tableView', the code is cycling through an array of data and creating new instances of 'row' to supply it to 'tableView.'    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/controllers/index.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var data[];</code></div>\n<div class=\"line\"><code class=\"keyword\">for</code><code class=\"plain\"> (var i=</code><code class=\"value\">0</code><code class=\"plain\">; i&lt;source.length; i++) {    </code></div>\n<div class=\"line\"><code class=\"plain\">    var arg = {</code></div>\n<div class=\"line\"><code class=\"plain\">        title: source[i].postTitle,</code></div>\n<div class=\"line\"><code class=\"plain\">        url: source[i].postLink</code></div>\n<div class=\"line\"><code class=\"plain\">    };</code></div>\n<div class=\"line\"><code class=\"plain\">    var row = Alloy.createController(</code><code class=\"string\">'row'</code><code class=\"plain\">, arg).getView();</code></div>\n<div class=\"line\"><code class=\"plain\">    data.push(row);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">$.tableView.setData(data);</code></div>\n</div>\n</div> <p>\nAs seen in the example above, the controller is passing different arguments to the 'row' controller, creating unique instances of 'row'.    </p>\n</div>\n<div class=\"section section-3 \" id=\"38929784_AlloyControllers-GlobalNamespace\">\n<h3 class=\"heading \"><span>Global Namespace</span></h3>\n<p>\nControllers can store and access global variables using the <tt class=\" \">Alloy.Globals</tt> namespace. For example, you can store an instance of a parent window in Globals and access it in another window.    </p>\n<p>\nStore the parent window:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">$.index.open();</code></div>\n<div class=\"line\"><code class=\"plain\">Alloy.Globals.parent = $.index;</code></div>\n</div>\n</div> <p>\n</p>\n<p>\nAccess the parent window in another controller:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var parent = Alloy.Globals.parent;</code></div>\n<div class=\"line\"><code class=\"plain\">parent.close();</code></div>\n</div>\n</div> <p>\nOther non-controller JavaScript code can access the globals variable but need to require the Alloy module.  See <a class=\"document-link \" href=\"#!/guide/Alloy_Controllers-section-38929784_AlloyControllers-ExtendingAlloy%2CUnderscore.jsandBackbone.js\" Alloy_Controllers.html#38929784_AlloyControllers-ExtendingAlloy%2CUnderscore.jsandBackbone.js=\"Alloy_Controllers.html#38929784_AlloyControllers-ExtendingAlloy%2CUnderscore.jsandBackbone.js\">Extending Alloy</a> below.    </p>\n</div>\n</div>\n<div class=\"section section-2 \" id=\"38929784_AlloyControllers-InitializerFile(alloy.js)\">\n<h2 class=\"heading \"><span>Initializer File (alloy.js)</span></h2>\n<p>\nThe initializer file <tt class=\" \">app/alloy.js</tt> can be used to execute some code near the beginning of the application's lifecycle. The contents of this file will be executed right before the initial <tt class=\" \">index.js</tt> controller is loaded, allowing you to execute code before any UI components are loaded and to override builtin Alloy functions before they are executed. The code in this file also has access to the <tt class=\" \">Alloy</tt> namespace.    </p>\n<p>\nFor instance, the default <tt class=\" \">isTablet</tt> method returns true if it is identified as an iPad, an Android device in the large or extra large group, or if either dimension exceeds 400 dp for Mobile Web application. To override that behavior, you can add the following code to <tt class=\" \">alloy.js</tt>.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">Alloy.isTablet = function(){</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> !(Math.min(Ti.Platform.displayCaps.platformHeight, Ti.Platform.displayCaps.platformWidth) &lt; </code><code class=\"value\">600</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> </div>\n<div class=\"section section-2 \" id=\"38929784_AlloyControllers-LibraryCodeandCommonJSModules\">\n<h2 class=\"heading \"><span>Library Code and CommonJS Modules</span></h2>\n<p>\nSome JavaScript code might not be suitable as controller code, since it does not have an associated view, or you want to separate it from the MVC framework for easier reusability. Create a folder called <tt class=\" \">lib</tt> in the <tt class=\" \">app</tt> directory of your Alloy project. Add your CommonJS modules or JavaScript code using the CommonJS format into the <tt class=\" \">lib</tt> folder. These files are copied to the <tt class=\" \">Resources</tt> folder, when compiling your Alloy project.    </p>\n<p>\nTo use the library or CommonJS module, require it with the library name or module name without the 'app/lib' path and '.js' extension:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var lib = require(</code><code class=\"string\">'library_name'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">lib.foo();</code></div>\n</div>\n</div> <div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\nTitanium and Alloy do not support the Node.js concept of &quot;folders as modules,&quot; that is, requiring a folder name does not automatically load the index.js or index.json file inside the folder or use the package.json file to locate the main entry point. You need to explicitly require the file that serves as the main entry point to the library.    </p>\n</div>\n<div class=\"section section-3 \" id=\"38929784_AlloyControllers-ExtendingAlloy,Underscore.jsandBackbone.js\">\n<h3 class=\"heading \"><span>Extending Alloy, Underscore.js and Backbone.js</span></h3>\n<p>\nTo access the Alloy API methods, such as <tt class=\" \">createController</tt> and <tt class=\" \">createModel</tt>, as well as Underscore.js and Backbone.js in CommonJS modules and JavaScript files in <tt class=\" \">app/lib</tt>, you need to load those modules in to the library:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var Alloy = require(</code><code class=\"string\">'alloy'</code><code class=\"plain\">), _ = require(</code><code class=\"string\">\"alloy/underscore\"</code><code class=\"plain\">)._, Backbone = require(</code><code class=\"string\">\"alloy/backbone\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"comments\">// Alloy extended</code></div>\n<div class=\"line\"><code class=\"plain\">var foo = Alloy.createController(</code><code class=\"string\">'foo'</code><code class=\"plain\">).getView();</code></div>\n<div class=\"line\"><code class=\"plain\">foo.open();</code></div>\n<div class=\"line\"><code class=\"comments\">// Underscore extended</code></div>\n<div class=\"line\"><code class=\"plain\">var even = _.find([</code><code class=\"value\">1</code><code class=\"plain\">, </code><code class=\"value\">2</code><code class=\"plain\">, </code><code class=\"value\">3</code><code class=\"plain\">, </code><code class=\"value\">4</code><code class=\"plain\">, </code><code class=\"value\">5</code><code class=\"plain\">, </code><code class=\"value\">6</code><code class=\"plain\">], function(num){ </code><code class=\"keyword\">return</code><code class=\"plain\"> num % </code><code class=\"value\">2</code><code class=\"plain\"> == </code><code class=\"value\">0</code><code class=\"plain\">; });</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(even);</code></div>\n<div class=\"line\"><code class=\"comments\">// Backbone extended</code></div>\n<div class=\"line\"><code class=\"plain\">var Book = Backbone.Model.extend();</code></div>\n<div class=\"line\"><code class=\"plain\">var book = </code><code class=\"keyword\">new</code><code class=\"plain\"> Book({title: </code><code class=\"string\">'Ulysses'</code><code class=\"plain\">, author: </code><code class=\"string\">'James Joyce'</code><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(JSON.stringify(book));</code></div>\n</div>\n</div> <p>\nCurrently, these modules are automatically available in the global scope and these APIs can be used without loading the modules.  Referencing these modules without loading them first with the <tt class=\" \">require</tt> method is discouraged and this behavior may be deprecated in the future.  To ensure compatibility with future releases, always use the <tt class=\" \">require</tt> method to load and use these modules.    </p>\n</div>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Alloy Controllers"});