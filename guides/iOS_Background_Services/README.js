Ext.data.JsonP['iOS_Background_Services']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>iOS Background Services</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"37539664\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=37539664\"><span>Edit</span></a>\n<h1>iOS Background Services</h1>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-Introduction\" iOS_Background_Services.html#37539664_iOSBackgroundServices-Introduction=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-Introduction\">Introduction</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-URLSessionModule\" iOS_Background_Services.html#37539664_iOSBackgroundServices-URLSessionModule=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-URLSessionModule\">URL Session Module</a> </p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-CreatingaURLSessionandBackgroundDownloadTask\" iOS_Background_Services.html#37539664_iOSBackgroundServices-CreatingaURLSessionandBackgroundDownloadTask=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-CreatingaURLSessionandBackgroundDownloadTask\">Creating a URL Session and Background Download Task</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-MonitoringtheDownloadTaskandURLSession\" iOS_Background_Services.html#37539664_iOSBackgroundServices-MonitoringtheDownloadTaskandURLSession=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-MonitoringtheDownloadTaskandURLSession\">Monitoring the Download Task and URL Session</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-InvalidatingtheURLSession\" iOS_Background_Services.html#37539664_iOSBackgroundServices-InvalidatingtheURLSession=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-InvalidatingtheURLSession\">Invalidating the URL Session</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-Example\" iOS_Background_Services.html#37539664_iOSBackgroundServices-Example=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-Example\">Example</a> </p>\n</li></ul></li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-BackgroundFetch\" iOS_Background_Services.html#37539664_iOSBackgroundServices-BackgroundFetch=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-BackgroundFetch\">Background Fetch</a> </p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-SettingApplicationPermissions\" iOS_Background_Services.html#37539664_iOSBackgroundServices-SettingApplicationPermissions=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-SettingApplicationPermissions\">Setting Application Permissions</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-MonitoringtheBackgroundFetchNotification\" iOS_Background_Services.html#37539664_iOSBackgroundServices-MonitoringtheBackgroundFetchNotification=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-MonitoringtheBackgroundFetchNotification\">Monitoring the Background Fetch Notification</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-Example.1\" iOS_Background_Services.html#37539664_iOSBackgroundServices-Example.1=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-Example.1\">Example</a> </p>\n</li></ul></li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-SilentPush\" iOS_Background_Services.html#37539664_iOSBackgroundServices-SilentPush=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-SilentPush\">Silent Push</a> </p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-SettingApplicationPermissions.1\" iOS_Background_Services.html#37539664_iOSBackgroundServices-SettingApplicationPermissions.1=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-SettingApplicationPermissions.1\">Setting Application Permissions</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-MonitoringSilentPushNotifications\" iOS_Background_Services.html#37539664_iOSBackgroundServices-MonitoringSilentPushNotifications=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-MonitoringSilentPushNotifications\">Monitoring Silent Push Notifications</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-SubscribingtoPushNotifications\" iOS_Background_Services.html#37539664_iOSBackgroundServices-SubscribingtoPushNotifications=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-SubscribingtoPushNotifications\">Subscribing to Push Notifications</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-SendingaSilentPushNotification\" iOS_Background_Services.html#37539664_iOSBackgroundServices-SendingaSilentPushNotification=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-SendingaSilentPushNotification\">Sending a Silent Push Notification</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/iOS_Background_Services-section-37539664_iOSBackgroundServices-Example.2\" iOS_Background_Services.html#37539664_iOSBackgroundServices-Example.2=\"iOS_Background_Services.html#37539664_iOSBackgroundServices-Example.2\">Example</a> </p>\n</li></ul></li></ul> <div class=\"section section-2 \" id=\"37539664_iOSBackgroundServices-Introduction\">\n<h2 class=\"heading \"><span>Introduction</span></h2>\n<p>\nIn iOS 7, Apple introduced new background execution modes which allow the application to download content in the background.  These background modes are supported in Titanium SDK 3.2.0 and later, which are exposed as the following APIs:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<strong class=\" \">URL session module</strong>: a wrapper for the NSURLSession class that allows the application to download large content in the background.  This module provides the main functionality for the background execution modes, such as creating the background download task and monitoring the download once it starts.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">Background fetch event</strong>: use to monitor signals from iOS to update the application while in the background.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">Silent push event</strong>: use to monitor a push notification to tell the application there is content to download.    </p>\n</li></ul> <p>\nWith the Titanium platform, the background fetch and silent push events <strong class=\" \">cannot</strong> be tested on the iOS simulator.  These events can only be triggered on device.    </p>\n</div>\n<div class=\"section section-2 \" id=\"37539664_iOSBackgroundServices-URLSessionModule\">\n<h2 class=\"heading \"><span>URL Session Module</span></h2>\n<p>\nThe <a class=\"external-link external-link\" href=\"#!/api/Modules.URLSession\">URL session module (<tt class=\" \">com.appcelerator.urlSession</tt>)</a> provides a significant portion of the functionality to support background download tasks.  It allows applications to download content via HTTP.  With this module, you can    </p>\n<ol class=\" \"><li class=\" \"> <p>\nCreate a URL session and a background download task.    </p>\n</li><li class=\" \"> <p>\nMonitor events to check the progress of the download and session.    </p>\n</li><li class=\" \"> <p>\nCancel downloads and invalidate sessions.    </p>\n</li></ol> <p>\nBefore using this module, you need to add it to your project.  This module is part of the Titanium SDK since Release 3.2.0 and does not need to be downloaded to obtain it.  To add this module to your project:    </p>\n<p>\n<strong class=\" \">Using Studio</strong> </p>\n<ol class=\" \"><li class=\" \"> <p>\nDouble-click the <tt class=\" \">tiapp.xml</tt> file to open it in the <strong class=\" \">Overview</strong> tab.    </p>\n</li><li class=\" \"> <p>\nIn the <strong class=\" \">Modules</strong> section, click the <strong class=\" \">Add</strong> button (green plus sign) to open the <strong class=\" \">Mobile Modules</strong> dialog.    </p>\n</li><li class=\" \"> <p>\nLocate and select <strong class=\" \">com.appcelerator.urlSession</strong>.    </p>\n</li><li class=\" \"> <p>\nClick <strong class=\" \">OK</strong>.    </p>\n</li></ol> <p>\n<strong class=\" \">Using a Text Editor</strong> </p>\n<p>\nOpen the <tt class=\" \">tiapp.xml</tt> file and add the following under the <tt class=\" \">modules</tt> element:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">tiapp.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">...</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;modules&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">        &lt;module platform=</code><code class=\"string\">\"iphone\"</code><code class=\"plain\">&gt;com.appcelerator.urlSession&lt;/module&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;/modules&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">...</code></div>\n</div>\n</div> <p>\nInitiate the module with the <tt class=\" \">require(&quot;com.appcelerator.urlSession&quot;)</tt> method and make subsequent API calls with the new object:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// Require in the module</code></div>\n<div class=\"line\"><code class=\"plain\">var urlSession = require(</code><code class=\"string\">\"com.appcelerator.urlSession\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">var sessionConfig = urlSession.createURLSessionBackgroundConfiguration(</code><code class=\"string\">\"com.appcelerator.sessionx\"</code><code class=\"plain\">);</code></div>\n</div>\n</div> <div class=\"section section-3 \" id=\"37539664_iOSBackgroundServices-CreatingaURLSessionandBackgroundDownloadTask\">\n<h3 class=\"heading \"><span>Creating a URL Session and Background Download Task</span></h3>\n<p>\nA URL session object is used to manage your download tasks.    </p>\n<p>\nBefore creating a URL session object, you need to create a session configuration using the <tt class=\" \">createURLSessionBackgroundConfiguration</tt> method.  Pass this method an arbitrary string, which is used to identify the session when monitoring events.    </p>\n<p>\nTo create a URL session object, pass the session configuration object to the <tt class=\" \">createURLSession</tt> method.    </p>\n<p>\nTo create a background download task, pass the session object and the URL to download the asset to the <tt class=\" \">backgroundDownloadTaskWithURL</tt> method.  Once you have created the task, the download starts.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// Require in the module</code></div>\n<div class=\"line\"><code class=\"plain\">var urlSession = require(</code><code class=\"string\">\"com.appcelerator.urlSession\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"comments\">// Create a session configuration</code></div>\n<div class=\"line\"><code class=\"comments\">// The string parameter is an arbitrary string used to identify the session in events</code></div>\n<div class=\"line\"><code class=\"plain\">var sessionConfig = urlSession.createURLSessionBackgroundConfiguration(</code><code class=\"string\">\"com.appcelerator.sessionx\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"comments\">// Create a URL session object based on the </code></div>\n<div class=\"line\"><code class=\"plain\">var session = urlSession.createURLSession(sessionConfig);</code></div>\n<div class=\"line\"><code class=\"plain\">var task = urlSession.backgroundDownloadTaskWithURL(session, </code><code class=\"string\">\"http://download.foo.com/myimage.png\"</code><code class=\"plain\">);</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"37539664_iOSBackgroundServices-MonitoringtheDownloadTaskandURLSession\">\n<h3 class=\"heading \"><span>Monitoring the Download Task and URL Session</span></h3>\n<p>\nOnce your download starts, you can monitor its progress with the following events:    </p>\n<ul class=\" \"><li class=\" \"> <p class=\"diff-line-pre\">\n<tt class=\" \">backgroundtransfer</tt>: fired when URL session events are waiting to be processed.  Use the <tt class=\" \">handlerId</tt> and <tt class=\" \">sessionId</tt> properties to track the task and session that needs to be managed.    </p>\n</li><li class=\" \"> <p class=\"diff-line-pre\">\n<tt class=\" \">downloadprogress</tt>: fired periodically to show the progress of the download.  Use the <tt class=\" \">totalBytesWritten</tt> and <tt class=\" \">totalBytesExpectedToWrite</tt> properties to track its progress.    </p>\n</li><li class=\" \"> <p class=\"diff-line-pre\">\n<tt class=\" \">downloadcompleted</tt>: fired when the download completes.  The save data is stored in the <tt class=\" \">data</tt> property.    </p>\n</li><li class=\" \"> <p class=\"diff-line-pre\">\n<tt class=\" \">sessioncompleted</tt>: fired when the all session tasks complete.    </p>\n</li><li class=\" \"> <p class=\"diff-line-pre\">\n<tt class=\" \">sessioneventscompleted</tt>: fired when all session messages are delivered.    </p>\n</li></ul> <p>\nThese events are monitored as application-level events by using the <tt class=\" \">addEventListener</tt> method with the <tt class=\" \">Titanium.App.iOS</tt> namespace.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// Monitor this event to receive updates on the progress of the download</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">\"downloadprogress\"</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Update the progress indicator</code></div>\n<div class=\"line\"><code class=\"plain\">    progress.value = (e.totalBytesWritten/e.totalBytesExpectedToWrite);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// Monitor this event to know when the download completes</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">\"downloadcompleted\"</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Save downloaded asset</code></div>\n<div class=\"line\"><code class=\"plain\">    var file = Titanium.Filesystem.getFile(</code><code class=\"string\">\"/default.png\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    file.write(e.data);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// Monitor this event to know when all session tasks have completed</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">'sessioncompleted'</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.success) {</code></div>\n<div class=\"line\"><code class=\"plain\">        alert(</code><code class=\"string\">\"Downloads completed successfully.\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"37539664_iOSBackgroundServices-InvalidatingtheURLSession\">\n<h3 class=\"heading \"><span>Invalidating the URL Session</span></h3>\n<p>\nOnce you are done with the URL session or want to abort it, invalidate the session by passing the URL session object to either of the following methods:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">finishTasksAndInvalidate</tt>: invalidates the session but allows the tasks to finish.    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">invalidateAndCancel</tt>: invalidates the session but cancels any running tasks.    </p>\n</li></ul> <p>\nIf you do not invalidate your URL session after it has completed, your application may leak memory.    </p>\n</div>\n<div class=\"section section-3 \" id=\"37539664_iOSBackgroundServices-Example\">\n<h3 class=\"heading \"><span>Example</span></h3>\n<p>\nIn the following example, the user initiates a download by pressing a button.  The user can either wait for the download to finish in the foreground or send the application to the background.  A banner message will alert the user that the download has finished if the application is in the background.  After the download is done, the application displays the downloaded image.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// Require in the urlSession module</code></div>\n<div class=\"line\"><code class=\"plain\">var urlSession = require(</code><code class=\"string\">\"com.appcelerator.urlSession\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">var session;</code></div>\n<div class=\"line\"><code class=\"comments\">// App UI</code></div>\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow({backgroundColor:</code><code class=\"string\">\"white\"</code><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">var progress = Ti.UI.createProgressBar({</code></div>\n<div class=\"line\"><code class=\"plain\">    width: </code><code class=\"value\">200</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    height: </code><code class=\"value\">50</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    min: </code><code class=\"value\">0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    max: </code><code class=\"value\">1</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    value: </code><code class=\"value\">0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    style: Ti.UI.iPhone.ProgressBarStyle.PLAIN,</code></div>\n<div class=\"line\"><code class=\"plain\">    top: </code><code class=\"value\">10</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    message: </code><code class=\"string\">'Downloading image URL'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    font: { fontSize: </code><code class=\"value\">12</code><code class=\"plain\">, fontWeight: </code><code class=\"string\">'bold'</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">    color: </code><code class=\"string\">'#888'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(progress);</code></div>\n<div class=\"line\"><code class=\"plain\">var imageView = Ti.UI.createImageView({</code></div>\n<div class=\"line\"><code class=\"plain\">        top:</code><code class=\"value\">150</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">          height:</code><code class=\"value\">300</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">          width:</code><code class=\"value\">200</code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(imageView);</code></div>\n<div class=\"line\"><code class=\"plain\">var button = Ti.UI.createButton({</code></div>\n<div class=\"line\"><code class=\"plain\">    title:</code><code class=\"string\">'Download Image (url)'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    height:</code><code class=\"value\">40</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    width:</code><code class=\"value\">200</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    top:</code><code class=\"value\">70</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">button.addEventListener(</code><code class=\"string\">'click'</code><code class=\"plain\">, function()</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Create a session configuration</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// The string parameter is an arbitrary string used to identify the session in events</code></div>\n<div class=\"line\"><code class=\"plain\">    var sessionConfig = urlSession.createURLSessionBackgroundConfiguration(</code><code class=\"string\">\"com.appcelerator.test\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Create a session</code></div>\n<div class=\"line\"><code class=\"plain\">    session = urlSession.createURLSession(sessionConfig);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Create a background download task to get the asset with the URL</code></div>\n<div class=\"line\"><code class=\"plain\">    urlSession.backgroundDownloadTaskWithURL(session,</code><code class=\"string\">\"https://raw.github.com/appcelerator-developer-relations/KitchenSink/master/Resources/images/dog@2x~iphone.jpg\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    progress.show();</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(button);</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"comments\">// Monitor this event to receive updates on the progress of the download</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">\"downloadprogress\"</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Update the progress indicator</code></div>\n<div class=\"line\"><code class=\"plain\">    progress.value = (e.totalBytesWritten/e.totalBytesExpectedToWrite);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// Monitor this event to know when the download completes</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">\"downloadcompleted\"</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info(</code><code class=\"string\">\"download completed \"</code><code class=\"plain\"> + JSON.stringify(e));</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Update the image</code></div>\n<div class=\"line\"><code class=\"plain\">    imageView.image = e.data;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Invalidate the session and cancel current session tasks</code></div>\n<div class=\"line\"><code class=\"plain\">    urlSession.invalidateAndCancel(session);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Notify the user the download is complete if the application is in the background</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.App.iOS.scheduleLocalNotification({</code></div>\n<div class=\"line\"><code class=\"plain\">        alertBody:</code><code class=\"string\">\"Download complete!\"</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">        date:</code><code class=\"keyword\">new</code><code class=\"plain\"> Date().getTime() </code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">    progress.hide();</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// Monitor this event to know when all session tasks have completed</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">'sessioncompleted'</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info(</code><code class=\"string\">\"sessioncompleted \"</code><code class=\"plain\"> + JSON.stringify(e));</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.success) {</code></div>\n<div class=\"line\"><code class=\"plain\">        alert(</code><code class=\"string\">\"Downloads completed successfully.\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> </div>\n</div>\n<div class=\"section section-2 \" id=\"37539664_iOSBackgroundServices-BackgroundFetch\">\n<h2 class=\"heading \"><span>Background Fetch</span></h2>\n<p>\nIf the application is in the background and the background fetch permission is enabled, iOS will periodically signal the application when it can download data in the background.  Note that these notifications are at the discretion of iOS.  iOS studies how the user interacts with your application and considers the current state of the device, such as the battery charage, to determine the best time to trigger background updates.    </p>\n<p>\nYou need to modify your application to:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nHave permission to listen for fetch notification in the background    </p>\n</li><li class=\" \"> <p>\nSet the fetch interval and monitor the <tt class=\" \">backgroundfetch</tt> event to initiate the download    </p>\n</li></ol> <div class=\"section section-3 \" id=\"37539664_iOSBackgroundServices-SettingApplicationPermissions\">\n<h3 class=\"heading \"><span>Setting Application Permissions</span></h3>\n<p>\nTo use the background fetch functionality, modify your <tt class=\" \">tiapp.xml</tt> file to add the <tt class=\" \">UIBackgroundMode</tt><tt class=\" \">s</tt> <tt class=\" \">fetch</tt> key in the plist section:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">tiapp.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">...</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;ios&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;plist&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;dict&gt;    </code></div>\n<div class=\"line\"><code class=\"plain\">    ...</code></div>\n<div class=\"line\"><code class=\"plain\">     &lt;key&gt;UIBackgroundModes&lt;/key&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">     &lt;array&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">         &lt;string&gt;fetch&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">     &lt;/array&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/dict&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/plist&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/ios&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">...</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"37539664_iOSBackgroundServices-MonitoringtheBackgroundFetchNotification\">\n<h3 class=\"heading \"><span>Monitoring the Background Fetch Notification</span></h3>\n<p>\nUse the <a class=\"external-link external-link\" href=\"#!/api/Titanium.App.iOS-method-setMinimumBackgroundFetchInterval\">Titanium.App.iOS.setMinimumBackgroundFetchInterval</a> method when the application first starts to set the minimum interval between fetch operations.  This value does not indicate the exact amount of time expected between fetch operations.  iOS determines, based on device's status and how the user interacts with your application, when an appropriate time is to initiate the download.  You can set the value to either:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">Titanium.App.iOS.BACKGROUNDFETCHINTERVAL_MIN</tt>: smallest interval supported by the system.    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">Titanium.App.iOS.BACKGROUNDFETCHINTERVAL_NEVER</tt>: largest interval to prevent fetch operations.    </p>\n</li></ul> <p>\nUse the iOS application-level <tt class=\" \">backgroundfetch</tt> event to monitor when the application receives a notification from iOS that it can initiate a background download.  This notification can be received while the application is in the background.  Once this event is triggered, you can initiate a download, then call the <tt class=\" \">Titanium.App.iOS.endBackgroundHandler</tt> method to put the application back to sleep.  Pass the backgroundfetch event's <tt class=\" \">handlerId</tt> property to the <tt class=\" \">endBackgroundHandler</tt> method.    </p>\n<p>\nIf your application is awake for more than 30 seconds, iOS suspends your application.  If your application breaks this condition often, iOS may mark your application as resource intensive and be given fewer opportunities to download data in the background.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// Monitor this event for a signal from iOS to fetch data</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">'backgroundfetch'</code><code class=\"plain\">, function(e){</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Initiate a download operation</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Put the application back to sleep</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.App.iOS.endBackgroundHandler(e.handlerId);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"37539664_iOSBackgroundServices-Example.1\">\n<h3 class=\"heading \"><span>Example</span></h3>\n<p>\nIn the following example, when the application enters the background and the device is left alone, iOS will eventually signal the application that it is OK to perform a background fetch. This signal is not reliably reproducible and occurs randomly at the discretion of iOS.  Banner messages will be displayed when the download starts and finishes.  When the application is back in the foreground and the download is complete, the image will be replaced with the downloaded image.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// Require in the urlSession module</code></div>\n<div class=\"line\"><code class=\"plain\">var urlSession = require(</code><code class=\"string\">\"com.appcelerator.urlSession\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">var session;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"comments\">// Set the fetch interval level</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.setMinimumBackgroundFetchInterval(Ti.App.iOS.BACKGROUNDFETCHINTERVAL_MIN);</code></div>\n<div class=\"line\"><code class=\"comments\">// App UI</code></div>\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow({backgroundColor:</code><code class=\"string\">\"white\"</code><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">var progress = Titanium.UI.createProgressBar({</code></div>\n<div class=\"line\"><code class=\"plain\">    width: </code><code class=\"value\">200</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    height: </code><code class=\"value\">50</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    min: </code><code class=\"value\">0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    max: </code><code class=\"value\">1</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    value: </code><code class=\"value\">0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    style: Titanium.UI.iPhone.ProgressBarStyle.PLAIN,</code></div>\n<div class=\"line\"><code class=\"plain\">    top: </code><code class=\"value\">10</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    message: </code><code class=\"string\">'Downloading image URL'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    font: { fontSize: </code><code class=\"value\">12</code><code class=\"plain\">, fontWeight: </code><code class=\"string\">'bold'</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">    color: </code><code class=\"string\">'#888'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(progress);</code></div>\n<div class=\"line\"><code class=\"plain\">var imageView = Ti.UI.createImageView({</code></div>\n<div class=\"line\"><code class=\"plain\">    top:</code><code class=\"value\">100</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    height:</code><code class=\"value\">350</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    width:</code><code class=\"value\">250</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    image: </code><code class=\"string\">\"https://raw.github.com/appcelerator-developer-relations/KitchenSink/master/Resources/images/fence@2x.jpg\"</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(imageView);</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n<div class=\"line\"><code class=\"comments\">// Monitor this event for a signal from iOS to fetch data</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">'backgroundfetch'</code><code class=\"plain\">, function(e){</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info(</code><code class=\"string\">\"backgroundfetch \"</code><code class=\"plain\"> + JSON.stringify(e));</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Initiate the download</code></div>\n<div class=\"line\"><code class=\"plain\">    sessionConfig = urlSession.createURLSessionBackgroundConfiguration(</code><code class=\"string\">\"com.appcelerator.backgroundfetch\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    session = urlSession.createURLSession(sessionConfig);</code></div>\n<div class=\"line\"><code class=\"plain\">    urlSession.backgroundDownloadTaskWithURL(session,</code><code class=\"string\">\"https://raw.github.com/appcelerator-developer-relations/KitchenSink/master/Resources/images/dog@2x~iphone.jpg\"</code><code class=\"plain\">);   </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Display a banner message when the download starts</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.App.iOS.scheduleLocalNotification({</code></div>\n<div class=\"line\"><code class=\"plain\">        alertBody:</code><code class=\"string\">\"Background download initiated...\"</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">        date:</code><code class=\"keyword\">new</code><code class=\"plain\"> Date().getTime() </code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">    progress.show(); </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Put the application back to sleep</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.App.iOS.endBackgroundHandler(e.handlerId);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// Monitor this event to receive updates on the progress of the download</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">\"downloadprogress\"</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Update the progress indicator</code></div>\n<div class=\"line\"><code class=\"plain\">    progress.value = (e.totalBytesWritten/e.totalBytesExpectedToWrite);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"comments\">// Monitor this event to know when the download completes</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">\"downloadcompleted\"</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info(</code><code class=\"string\">\"download completed \"</code><code class=\"plain\"> + JSON.stringify(e));</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Update the image</code></div>\n<div class=\"line\"><code class=\"plain\">    imageView.image = e.data;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Invalidates the session and cancel any current session tasks</code></div>\n<div class=\"line\"><code class=\"plain\">    urlSession.invalidateAndCancel(session);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Display a banner message when the download finishes</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.App.iOS.scheduleLocalNotification({</code></div>\n<div class=\"line\"><code class=\"plain\">        alertBody:</code><code class=\"string\">\"Download complete!\"</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">        date:</code><code class=\"keyword\">new</code><code class=\"plain\"> Date().getTime() </code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">    progress.hide();</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// Monitor this event to know when all session tasks have completed</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">'sessioncompleted'</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info(</code><code class=\"string\">\"sessioncompleted \"</code><code class=\"plain\"> + JSON.stringify(e));</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.success) {</code></div>\n<div class=\"line\"><code class=\"plain\">        alert(</code><code class=\"string\">\"Downloads completed succesfully.\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> </div>\n</div>\n<div class=\"section section-2 \" id=\"37539664_iOSBackgroundServices-SilentPush\">\n<h2 class=\"heading \"><span>Silent Push</span></h2>\n<p>\nIn order to use the <tt class=\" \">silentpush</tt> event to monitor silent remote push notifications, you need to setup your project to use push notifications as described in the <a class=\"document-link \" href=\"#!/guide/Push_Notifications\" Push_Notifications.html=\"Push_Notifications.html\">Push Notifications</a> guide.    </p>\n<p>\nAfter you have push notifications setup, you need to modify your application to:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nHave permission to listen for remote notifications in the background    </p>\n</li><li class=\" \"> <p>\nMonitor the <tt class=\" \">silentpush</tt> event to initiate the download    </p>\n</li><li class=\" \"> <p>\nSubscribe the device to push notifications    </p>\n</li></ol> <p>\nOnce your application is prepared, you can test it by sending a push notification to it.    </p>\n<div class=\"section section-3 \" id=\"37539664_iOSBackgroundServices-SettingApplicationPermissions.1\">\n<h3 class=\"heading \"><span>Setting Application Permissions</span></h3>\n<p>\nTo use the silent push functionality, modify your <tt class=\" \">tiapp.xml</tt> file to add the <tt class=\" \">UIBackgroundMode</tt><tt class=\" \">s</tt> <tt class=\" \">remote-notification</tt> key in plist section:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">tiapp.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">...</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;ios&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;plist&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;dict&gt;    </code></div>\n<div class=\"line\"><code class=\"plain\">    ...</code></div>\n<div class=\"line\"><code class=\"plain\">     &lt;key&gt;UIBackgroundModes&lt;/key&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">     &lt;array&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">         &lt;string&gt;remote-notification&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">     &lt;/array&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/dict&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/plist&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/ios&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">...</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"37539664_iOSBackgroundServices-MonitoringSilentPushNotifications\">\n<h3 class=\"heading \"><span>Monitoring Silent Push Notifications</span></h3>\n<p>\nUse the iOS application-level <tt class=\" \">silentpush</tt> event to monitor when the application receives a silent push notification.  This notification can be received while the application is in the background.  Once this event is triggered, you can initiate a download, then call the <tt class=\" \">Titanium.App.iOS.endBackgroundHandler</tt> method to put the application back to sleep.  Pass the <tt class=\" \">silentpush</tt> event's <tt class=\" \">handlerId</tt> property to the <tt class=\" \">endBackgroundHandler</tt> method.    </p>\n<p>\nIf custom fields were sent in the push notification, these fields are available as properties of object passed to the event callback.    </p>\n<p>\nIf your application is awake for more than 30 seconds, iOS suspends your application.  If your application breaks this condition often, iOS may mark your application as resource intensive and be given fewer opportunities to download data in the background.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// Monitor silent push notifications</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">'silentpush'</code><code class=\"plain\">, function(e){</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Initiate a download operation</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Put the application back to sleep</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.App.iOS.endBackgroundHandler(e.handlerId);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"37539664_iOSBackgroundServices-SubscribingtoPushNotifications\">\n<h3 class=\"heading \"><span>Subscribing to Push Notifications</span></h3>\n<p>\nIn order to receive the silent remote notification, the device needs to be subscribed to push notifications.  Use the <a class=\"external-link external-link\" href=\"#!/api/Titanium.Network-method-registerForPushNotifications\">Titanium.Network.registerForPushNotifications method</a> to register for push notifications and setup callbacks when the application first starts, then use either the Cloud module's <tt class=\" \">PushNotifications.subscribeToken</tt> or <tt class=\" \">PushNotifications.subscribe</tt> method to subscribe to a push channel.    </p>\n<p>\nThe <tt class=\" \">subscribe</tt> method requires the user to be logged in to ACS to subscribe and receive push notifications, while <tt class=\" \">subscribeToken</tt> only relies on the device token.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// Require in the Cloud module</code></div>\n<div class=\"line\"><code class=\"plain\">var Cloud = require(</code><code class=\"string\">\"ti.cloud\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"comments\">// Register for push notification</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.Network.registerForPushNotifications({</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Only need to listen to alerts</code></div>\n<div class=\"line\"><code class=\"plain\">    types: [Ti.Network.NOTIFICATION_TYPE_ALERT],</code></div>\n<div class=\"line\"><code class=\"plain\">    success: deviceTokenSuccess,</code></div>\n<div class=\"line\"><code class=\"plain\">    error: deviceTokenError</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Omitting callback to handle received push notifications</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// callback: receivePush</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">function deviceTokenSuccess(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Subscribes the device to the 'silent_push' channel to listen for silent push alerts</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// The channel name is arbitrary and can be anything you wish</code></div>\n<div class=\"line\"><code class=\"plain\">    Cloud.PushNotifications.subscribeToken({</code></div>\n<div class=\"line\"><code class=\"plain\">        device_token: e.deviceToken,</code></div>\n<div class=\"line\"><code class=\"plain\">        channel: </code><code class=\"string\">'silent_push'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">        type: </code><code class=\"string\">'ios'</code></div>\n<div class=\"line\"><code class=\"plain\">    }, function (e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.success) {</code></div>\n<div class=\"line\"><code class=\"plain\">            Ti.API.info(</code><code class=\"string\">'Subscribed'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">        } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">            Ti.API.info(</code><code class=\"string\">'Error:\\n'</code><code class=\"plain\"> + ((e.error &amp;&amp; e.message) || JSON.stringify(e)));</code></div>\n<div class=\"line\"><code class=\"plain\">        }</code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">function deviceTokenError(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info(</code><code class=\"string\">'Failed to register for push notifications: '</code><code class=\"plain\"> + e.error);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"37539664_iOSBackgroundServices-SendingaSilentPushNotification\">\n<h3 class=\"heading \"><span>Sending a Silent Push Notification</span></h3>\n<p>\nTo send a silent push notification to the application to trigger the download, use the ACS web console to send the following payload to the push channel and subscribed devices:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">{</code><code class=\"string\">\"alert\"</code><code class=\"plain\">:</code><code class=\"string\">\"\"</code><code class=\"plain\">,</code><code class=\"string\">\"content-available\"</code><code class=\"plain\">:</code><code class=\"value\">1</code><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nThe payload only requires the following two field but you may use others:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nThe <tt class=\" \">content-available</tt> field indicates that there is new content to download.    </p>\n</li><li class=\" \"> <p>\nThe <tt class=\" \">alert</tt> field still needs to be included but does not require a value.  If this field is left blank as shown, a banner message is not displayed to the user.    </p>\n</li></ul> <p>\nIf the push notification contains custom fields, these are stored as properties to the object passed to the <tt class=\" \">silentpush</tt> callback.    </p>\n</div>\n<div class=\"section section-3 \" id=\"37539664_iOSBackgroundServices-Example.2\">\n<h3 class=\"heading \"><span>Example</span></h3>\n<p>\nIn the following example, the user needs to launch the application at least once, so the application can register for push notifications.  When the application enters the background, you can send a silent push notification to initiate a download, with the content URL as the <tt class=\" \">download_url</tt> field in the push payload.  Banner messages will be displayed when the download starts and finishes.  When the application is back in the foreground and the download is complete, the image will be replaced with the downloaded image.    </p>\n<p>\nThis example requires that push notifications are setup for the project.  For directions, see <a class=\"document-link \" href=\"#!/guide/Push_Notifications\" Push_Notifications.html=\"Push_Notifications.html\">Push Notifications</a>.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// Send the following push notification to this example:</code></div>\n<div class=\"line\"><code class=\"comments\">// {\"alert\":\"\",\"content-available\":1,\"download_url\":\"https://raw.github.com/appcelerator-developer-relations/KitchenSink/master/Resources/images/dog@2x~iphone.jpg\"}</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"comments\">// Require in the urlSession and Cloud modules</code></div>\n<div class=\"line\"><code class=\"plain\">var urlSession = require(</code><code class=\"string\">\"com.appcelerator.urlSession\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">var Cloud = require(</code><code class=\"string\">\"ti.cloud\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">var session;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"comments\">// App UI</code></div>\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow({backgroundColor:</code><code class=\"string\">\"white\"</code><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">var progress = Titanium.UI.createProgressBar({</code></div>\n<div class=\"line\"><code class=\"plain\">    width: </code><code class=\"value\">200</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    height: </code><code class=\"value\">50</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    min: </code><code class=\"value\">0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    max: </code><code class=\"value\">1</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    value: </code><code class=\"value\">0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    style: Titanium.UI.iPhone.ProgressBarStyle.PLAIN,</code></div>\n<div class=\"line\"><code class=\"plain\">    top: </code><code class=\"value\">10</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    message: </code><code class=\"string\">'Downloading image URL'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    font: { fontSize: </code><code class=\"value\">12</code><code class=\"plain\">, fontWeight: </code><code class=\"string\">'bold'</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">    color: </code><code class=\"string\">'#888'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(progress);</code></div>\n<div class=\"line\"><code class=\"plain\">var imageView = Ti.UI.createImageView({</code></div>\n<div class=\"line\"><code class=\"plain\">    top:</code><code class=\"value\">100</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    height:</code><code class=\"value\">350</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    width:</code><code class=\"value\">250</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    image: </code><code class=\"string\">\"https://raw.github.com/appcelerator-developer-relations/KitchenSink/master/Resources/images/fence@2x.jpg\"</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(imageView);</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n<div class=\"line\"><code class=\"comments\">// Monitor silent push notifications</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">'silentpush'</code><code class=\"plain\">, function(e){</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info(</code><code class=\"string\">\"silentpush\"</code><code class=\"plain\"> + JSON.stringify(e));</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Create a session and a background download task</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// The push payload field, download_url, is available to this callback as e.download_url</code></div>\n<div class=\"line\"><code class=\"plain\">    var sessionConfig = urlSession.createURLSessionBackgroundConfiguration(</code><code class=\"string\">\"com.appcelerator.silentpush\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    session = urlSession.createURLSession(sessionConfig);</code></div>\n<div class=\"line\"><code class=\"plain\">    urlSession.backgroundDownloadTaskWithURL(session, e.download_url);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Display a banner message when the download starts</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.App.iOS.scheduleLocalNotification({</code></div>\n<div class=\"line\"><code class=\"plain\">        alertBody:</code><code class=\"string\">\"Background download initiated...\"</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">        date:</code><code class=\"keyword\">new</code><code class=\"plain\"> Date().getTime() </code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">    progress.show();</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Put the application back to sleep</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.App.iOS.endBackgroundHandler(e.handlerId);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// Monitor this event to receive updates on the progress of the download</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">\"downloadprogress\"</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Update the progress indicator</code></div>\n<div class=\"line\"><code class=\"plain\">    progress.value = (e.totalBytesWritten/e.totalBytesExpectedToWrite);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"comments\">// Monitor this event to know when the download completes</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">\"downloadcompleted\"</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info(</code><code class=\"string\">\"download completed \"</code><code class=\"plain\"> + JSON.stringify(e));</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Update the image</code></div>\n<div class=\"line\"><code class=\"plain\">    imageView.image = e.data;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Invalidates the session and cancel any current session tasks</code></div>\n<div class=\"line\"><code class=\"plain\">    urlSession.invalidateAndCancel(session);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Display a banner message when the download finishes</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.App.iOS.scheduleLocalNotification({</code></div>\n<div class=\"line\"><code class=\"plain\">        alertBody:</code><code class=\"string\">\"Download complete!\"</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">        date:</code><code class=\"keyword\">new</code><code class=\"plain\"> Date().getTime() </code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">    progress.hide();</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// Monitor this event to know when all session tasks have completed</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.iOS.addEventListener(</code><code class=\"string\">'sessioncompleted'</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info(</code><code class=\"string\">\"sessioncompleted \"</code><code class=\"plain\"> + JSON.stringify(e));</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.success) {</code></div>\n<div class=\"line\"><code class=\"plain\">        alert(</code><code class=\"string\">\"Downloads completed succesfully.\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// Register for push notification</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.Network.registerForPushNotifications({</code></div>\n<div class=\"line\"><code class=\"plain\">    types: [Ti.Network.NOTIFICATION_TYPE_ALERT],</code></div>\n<div class=\"line\"><code class=\"plain\">    success: deviceTokenSuccess,</code></div>\n<div class=\"line\"><code class=\"plain\">    error: deviceTokenError</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">function deviceTokenSuccess(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Subscribes the device to the 'silent_push' channel to listen for silent push alerts</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// The channel name is arbitrary and can be anything you wish</code></div>\n<div class=\"line\"><code class=\"plain\">    Cloud.PushNotifications.subscribeToken({</code></div>\n<div class=\"line\"><code class=\"plain\">        device_token: e.deviceToken,</code></div>\n<div class=\"line\"><code class=\"plain\">        channel: </code><code class=\"string\">'silent_push'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">        type: </code><code class=\"string\">'ios'</code></div>\n<div class=\"line\"><code class=\"plain\">    }, function (e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.success) {</code></div>\n<div class=\"line\"><code class=\"plain\">            Ti.API.info(</code><code class=\"string\">'Subscribed'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">        } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">            Ti.API.info(</code><code class=\"string\">'Error:\\n'</code><code class=\"plain\"> + ((e.error &amp;&amp; e.message) || JSON.stringify(e)));</code></div>\n<div class=\"line\"><code class=\"plain\">        }</code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">function deviceTokenError(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info(</code><code class=\"string\">'Failed to register for push notifications: '</code><code class=\"plain\"> + e.error);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> </div>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"iOS Background Services"});