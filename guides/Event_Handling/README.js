Ext.data.JsonP['Event_Handling']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Event Handling</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004896\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004896\"><span>Edit</span></a>\n<h1>Event Handling</h1>\n<div class=\"section section-2 \" id=\"29004896_EventHandling-Objective\">\n<h2 class=\"heading \"><span>Objective</span></h2>\n<p>\nIn this chapter, you will learn how to capture and fire events. You'll also learn the difference between component level and app level events.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004896_EventHandling-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<p>\nEvents are actions that can be detected by JavaScript. Such actions might be user-initiated, like taps or swipes, or system-initiated, like when an app is paused. Your app can capture and react to any of these events. You specify which components in your app should &quot;listen&quot; for events with the <tt class=\" \">addEventListener()</tt> function. Assigning an event listener follows this pattern:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">element.addEventListener(</code><code class=\"string\">'event_type'</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// code here is run when the event is fired</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// properties of the event object 'e' describe the event and object that received it</code></div>\n<div class=\"line\"><code class=\"plain\">\tTi.API.info(</code><code class=\"string\">'The '</code><code class=\"plain\">+e.type+</code><code class=\"string\">' event happened'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> <p>\nAs seen above, the first parameter specifies the type of event for which we are listening. In this case, <tt class=\" \">event_type</tt> on the <tt class=\" \">element</tt> component. The second parameter is a callback function that will be executed whenever the event is fired.    </p>\n<p>\nEach Titanium component is capable of listening for a particular subset of event types. As shown in the code sample above, within an event listener's function, an event object, <tt class=\" \">e</tt>, is created. The properties of that object vary by component and event type. These are listed on the API docs page for any given module or component. Some common event types include:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">click</tt> and its synonym <tt class=\" \">tap</tt> </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">swipe</tt> which is a left or right touch and drag the finger action    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">scroll</tt> which is a touch and drag action    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">dblclick</tt> and its synonym <tt class=\" \">doubletap</tt> </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">touchstart</tt>, <tt class=\" \">touchmove</tt>, and <tt class=\" \">touchend</tt> which define the three stages of an action where the user touches the screen, moves his or her finger in an arbitrary direction, then lifts the finger    </p>\n</li></ul> <p>\nIn addition to the common event types, some modules have their own special events. For example, the location services API includes events for <tt class=\" \">heading</tt> and <tt class=\" \">location</tt> changes. The gestures module enables you to listen for the <tt class=\" \">shake</tt> event. See the API docs for more information.    </p>\n<p>\nCommon event object properties include:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">x</tt> and <tt class=\" \">y</tt> which describe the x/y coordinates of the event (such as a tap) in the view's coordinates    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">globalPoint</tt> which is a dictionary with <tt class=\" \">x</tt> and <tt class=\" \">y</tt> properties describing the event's location in screen coordinates    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">type</tt> which is the name of the event type    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">source</tt> which is a reference to the object on which the event was fired    </p>\n</li></ul> <p>\n</p>\n<div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\n<tt class=\" \">globalPoint</tt> is an iOS only event property.    </p>\n</div>\n<p>\nYou can assign more than one event listener to a component. For example, a table could listen for taps, swipes, and scrolls.    </p>\n<p>\nWhile the general form above uses an anonymous (unnamed) function, you can use a named function as well. Typically, you would do so if you wanted to reuse the function in more than one event handler or in response to more than one type of event. Let's say you had two buttons that when clicked would perform identical operations. Rather than writing duplicate anonymous functions for each button, you could create a named function that is called instead.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">function doSomething(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// This function will be called by multiple handlers</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// The event object is accessible within this function</code></div>\n<div class=\"line\"><code class=\"plain\">\tTi.API.info(</code><code class=\"string\">'The '</code><code class=\"plain\">+e.type+</code><code class=\"string\">' event happened'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">button1.addEventListener(</code><code class=\"string\">'click'</code><code class=\"plain\">, doSomething);</code></div>\n<div class=\"line\"><code class=\"plain\">button2.addEventListener(</code><code class=\"string\">'click'</code><code class=\"plain\">, doSomething)</code></div>\n</div>\n</div> <p>\nTip: A UI element must have its <tt class=\" \">touchEnabled</tt> property set to <tt class=\" \">true</tt> for it to react to touch-related events (click, singletap, etc.). In most cases, UI components default to this value being <tt class=\" \">true</tt>. However, if you find an element that won't respond to an event, try setting <tt class=\" \">touchEnabled=true</tt> to see if that helps. If a view has <tt class=\" \">touchEnabled</tt> set to <tt class=\" \">false</tt>, touch events pass to the next view in the stack (for example, an underlying sibling view or parent view).    </p>\n<div class=\"section section-3 \" id=\"29004896_EventHandling-UIEventBubbling\">\n<h3 class=\"heading \"><span>UI Event Bubbling</span></h3>\n<p>\nUI events can bubble up from the view that was actually touched through parent views (objects that inherit from <tt class=\" \">Ti.UI.View</tt>), as well as certain &quot;view-like&quot; objects which act as containers for views.    </p>\n<p>\nFor example, a <tt class=\" \">TableViewSection</tt> object acts as a container for <tt class=\" \">TableViewRow</tt> objects. However, in iOS, the <tt class=\" \">TableViewSection</tt> is not itself a view. Since it serves as a logical container for views, it takes part in the bubbling chain. From the point of view of event bubbling, the section acts as parent to the rows it contains, and the table acts as parent for its rows.    </p>\n<p>\nSome special containers, such as windows, have no parents in the view hierarchy, so event bubbling ends when it reaches a special container. These special containers include:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nNavigationWindow    </p>\n</li><li class=\" \"> <p>\nSplitWindow    </p>\n</li><li class=\" \"> <p>\nTab    </p>\n</li><li class=\" \"> <p>\nTabGroup    </p>\n</li><li class=\" \"> <p>\nWindow    </p>\n</li></ul> <p>\n<span style=\"color: #484848;\">\nEvent bubbling ends when it reaches the special containers.    </span>\n</p>\n<div class=\"section section-4 \" id=\"29004896_EventHandling-BubblingandNon-BubblingEvents\">\n<h4 class=\"heading \"><span>Bubbling and Non-Bubbling Events</span></h4>\n<p>\nEvents that represent user input (click, touchmove, swipe) are bubbling events. Other events, such as focus and scroll, are view-specific. They represent views reacting to user input, and they do not bubble.    </p>\n<p>\nThe following events bubble:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nclick    </p>\n</li><li class=\" \"> <p>\ndblclick    </p>\n</li><li class=\" \"> <p>\ndoubletap    </p>\n</li><li class=\" \"> <p>\nlongclick    </p>\n</li><li class=\" \"> <p>\nlongpress    </p>\n</li><li class=\" \"> <p>\npinch    </p>\n</li><li class=\" \"> <p>\nsingletap    </p>\n</li><li class=\" \"> <p>\nswipe    </p>\n</li><li class=\" \"> <p>\ntouchcancel    </p>\n</li><li class=\" \"> <p>\ntouchend    </p>\n</li><li class=\" \"> <p>\ntouchmove    </p>\n</li><li class=\" \"> <p>\ntouchstart    </p>\n</li><li class=\" \"> <p>\ntwofingertap    </p>\n</li></ul> <p>\nThat is, all of the events defined by <tt class=\" \">Titanium.UI.View</tt> <i class=\" \">except</i> <tt class=\" \">postlayout</tt>.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004896_EventHandling-ManagingEventBubbling\">\n<h4 class=\"heading \"><span>Managing Event Bubbling</span></h4>\n<p>\nRelease 3.0 adds several features to allow more control over event bubbling. The <tt class=\" \">Titanium.Event</tt> object has two new properties:    </p>\n<div class=\"tablewrap\">\n<table class=\"confluenceTable\">\n<thead class=\" \"> <tr>\n<td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n<p>\nAPI    </p>\n</td>\n<td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n<p>\nType    </p>\n</td>\n<td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n<p>\nDescription    </p>\n</td>\n</tr>\n</thead><tfoot class=\" \"></tfoot><tbody class=\" \"> <tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<tt class=\" \">bubbles</tt> </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nboolean    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nIndicates whether the event can bubble. This property is set at creation time and cannot be changed. For events fired by the Titanium SDK, this property is set to ensure that event-bubbling behavior matches the 2.X event bubbling behavior.<br /><br />When firing custom events, <tt class=\" \">bubbles</tt> can be specified as part of the event data to enable or disable bubbling.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<tt class=\" \">cancelBubble</tt> </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nboolean    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nIf <tt class=\" \">true</tt>, stop sthe event from propagating any further. The <tt class=\" \">cancelBubble</tt> property is always <tt class=\" \">false</tt> when an event handler is invoked. While handling the event, the application can set <tt class=\" \">cancelBubble</tt> to true to prevent any further bubbling.    </p>\n</td>\n</tr>\n</tbody> </table>\n</div>\n<p>\nIn addition, all views and view-like objects have a new <tt class=\" \">bubbleParent</tt> property, which determines whether the view bubbles to its parent. This property is read/write. By default, <tt class=\" \">bubbleParent</tt> is set so that event bubbling behavior for a given view matches its Release 2.X event bubbling behavior. This property is defined as a property of <tt class=\" \">Titanium.Proxy</tt>--the parent of all Titanium objects. However, the property is only used on views and view-like objects that act as containers for views.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004896_EventHandling-EventBubblingNotes\">\n<h4 class=\"heading \"><span>Event Bubbling Notes</span></h4>\n<ul class=\" \"><li class=\" \"> <p>\nEvent bubbling happens after native event handling. That is, native event handling (such as highlighting a view) has already happened before any event fires.    </p>\n</li><li class=\" \"> <p>\nMultiple events of different types are treated separately. That is, if the user lifting their finger triggers 'touchup', 'tap', and 'click' events, any actions done on the 'touchup' event (such as setting <tt class=\" \">cancelBubble</tt>) do not affect the bubbling or firing of either 'tap' or 'click' events.    </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-3 \" id=\"29004896_EventHandling-FiringEvents\">\n<h3 class=\"heading \"><span>Firing Events</span></h3>\n<p>\nYou can fire events rather than waiting around for the user or system to initiate them. For example, you could simulate a button press by firing that button's <tt class=\" \">click</tt> event. You'd use code like this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">someButton.fireEvent(</code><code class=\"string\">'click'</code><code class=\"plain\">);</code></div>\n</div>\n</div> <p>\nor if you wanted to pass data along with the event:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">someButton.fireEvent(</code><code class=\"string\">'click'</code><code class=\"plain\">, {kitchen: </code><code class=\"string\">'sink'</code><code class=\"plain\">});</code></div>\n</div>\n</div> <p>\nAs shown, you can also pass JSON-serializable data when firing events. You simply include an object (without methods) as the second parameter of the <tt class=\" \">fireEvent()</tt> function. That parameter is optional and can be omitted. Members of the passed object become available via the event object in the listener. For example, the following code:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">someButton.addEventListener(</code><code class=\"string\">'click'</code><code class=\"plain\">, function(e){</code></div>\n<div class=\"line\"><code class=\"plain\">\tTi.APP.info(</code><code class=\"string\">'The value of kitchen is '</code><code class=\"plain\">+e.kitchen);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> <p>\nwould output this to the Titanium console:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">[INFO] The value of kitchen is sink</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004896_EventHandling-CustomEvents\">\n<h3 class=\"heading \"><span>Custom Events</span></h3>\n<p>\nManually firing a click event demonstrates the flexibility of Titanium's event system, but it's probably not something you'll do that often. You can (and probably will) fire your own custom events frequently. For example, you might fire a custom event when when the database is updated. Any components that depend on the database &ndash; a table, for example &ndash; could listen for that event and update themselves. This promotes loose coupling of our components and makes for more scalable and maintainable Javascript code.    </p>\n<div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\nDo <strong class=\" \">NOT</strong> name your events with spaces, for example, &quot;my event&quot;. This may cause your events to fire multiple times with other JavaScript libraries, such as Backbone.js, which uses spaces to delimit events.    </p>\n</div>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">deleteButton.addEventListener(</code><code class=\"string\">'click'</code><code class=\"plain\">, function(e){</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// when something happens in your app</code></div>\n<div class=\"line\"><code class=\"plain\">\tdatabase.doDelete(e.whichRecord);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// fire an event so components can react</code></div>\n<div class=\"line\"><code class=\"plain\">\ttheTable.fireEvent(</code><code class=\"string\">'db_updated'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// ... elsewhere in your code</code></div>\n<div class=\"line\"><code class=\"plain\">theTable.addEventListener(</code><code class=\"string\">'db_updated'</code><code class=\"plain\">, function(e){</code></div>\n<div class=\"line\"><code class=\"plain\">\ttheTable.setData(database.getCurrentRecords());</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> <p>\nAn event fired and listened for in this manner is associated with one particular component. Sometimes you'll want more than one component to be able to react to custom events. You could fire a whole bunch of component-level events. Or, you can use application-level events.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004896_EventHandling-Application-LevelEvents\">\n<h3 class=\"heading \"><span>Application-Level Events</span></h3>\n<p>\nApp-level events are global to your app. They are accessible in all contexts, functional scopes, CommonJS modules, and so forth. You fire them and listen for them via the <tt class=\" \">Ti.App</tt> module. They're tailor made for sending custom events across contexts. Updating the previous code sample to use app-level events gets us this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">deleteButton.addEventListener(</code><code class=\"string\">'click'</code><code class=\"plain\">, function(e){</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// when something happens in your app</code></div>\n<div class=\"line\"><code class=\"plain\">\tdatabase.doDelete(e.whichRecord);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// fire a global event so components can react</code></div>\n<div class=\"line\"><code class=\"plain\">\tTi.App.fireEvent(</code><code class=\"string\">'db_updated'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// ... elsewhere in your code</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.addEventListener(</code><code class=\"string\">'db_updated'</code><code class=\"plain\">, function(e){</code></div>\n<div class=\"line\"><code class=\"plain\">\ttheTable.setData(database.getCurrentRecords());</code></div>\n<div class=\"line\"><code class=\"plain\">\tsomeOtherComponent.doSomethingElse();</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> <p>\nKeep in mind that app-level events are global, which means they remain in context the entire time your app is running (unless you remove them). This also means that any objects they reference will also remain in scope while your app runs. This could prevent those objects from being garbage collected. See the <a class=\"document-link \" href=\"#!/guide/Managing_Memory_and_Finding_Leaks\" Managing_Memory_and_Finding_Leaks.html=\"Managing_Memory_and_Finding_Leaks.html\">Managing Memory and Finding Leaks</a> chapter for more information.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004896_EventHandling-RemovingEventListeners\">\n<h3 class=\"heading \"><span>Removing Event Listeners</span></h3>\n<p>\nYou can remove an event listener, thereby preventing the associated component from reacting to the event in the future. Let's say you have a delete button that should only be active when one or more items are checked. When the users checks the first item, you could add the click event listener to the delete button. If the user clears the last of the check marks, you'd remove the event listener from the delete button.    </p>\n<p>\nTo remove an event listener, you have to pass a reference to the function that was specified when you added the event listener. In other words, the function signature passed to <tt class=\" \">addEventListener()</tt> and <tt class=\" \">removeEventListener()</tt> must match. The easiest way to do this is to use a named function in the <tt class=\" \">addEventListener()</tt> statement so you can also pass that same function name to remove the listener.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">function doSomething(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// do something</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">deleteButton.addEventListener(</code><code class=\"string\">'click'</code><code class=\"plain\">, doSomething);</code></div>\n<div class=\"line\"><code class=\"comments\">// ... elsewhere in your code ...</code></div>\n<div class=\"line\"><code class=\"plain\">deleteButton.removeEventListener(</code><code class=\"string\">'click'</code><code class=\"plain\">, doSomething);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004896_EventHandling-SpecialEvents\">\n<h3 class=\"heading \"><span>Special Events</span></h3>\n<p>\nAndroid devices feature various &quot;hardware&quot; buttons, like Back, Home, Search, and Menu in addition to the volume up/down rocker and the camera button. With Titanium, you can monitor each of these buttons for presses with event listeners added to a <a class=\"document-link \" href=\"#!/guide/Android_Module_Development_Guide-section-29004945_AndroidModuleDevelopmentGuide-AndroidModuleDevelopmentGuide-HeavyweightandLightweightWindows\" Android_Module_Development_Guide.html#29004945_AndroidModuleDevelopmentGuide-AndroidModuleDevelopmentGuide-HeavyweightandLightweightWindows=\"Android_Module_Development_Guide.html#29004945_AndroidModuleDevelopmentGuide-AndroidModuleDevelopmentGuide-HeavyweightandLightweightWindows\">heavy weight window</a>.    </p>\n<div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\">\n<p>\nPrior to Release 3.0.0, these events were named with a colon right after the android name. For example, <tt class=\" \">androidback</tt> was originally called <tt class=\" \">android:back</tt>.    </p>\n<p>\nSince Release 3.2.0, all windows are heavyweight by default and you cannot control the type of window created.    </p>\n</div>\n<div class=\"tablewrap\">\n<table class=\"confluenceTable\">\n<thead class=\" \"></thead><tfoot class=\" \"></tfoot><tbody class=\" \"> <tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<strong class=\" \">Event</strong> </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<strong class=\" \">Fired when ...</strong> </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<tt class=\" \">androidback</tt> </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nThe back button is released    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<tt class=\" \">androidhome</tt> </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nThe home button is released    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<tt class=\" \">androidsearch</tt> </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nThe search button is released    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<tt class=\" \">androidcamera</tt> </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nThe camera button is released    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<tt class=\" \">androidfocus</tt> </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nFired when the camera button is pressed halfway and then released.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<tt class=\" \">androidvolup</tt> </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nThe volume-up rocker button is released    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<tt class=\" \">androidvoldown</tt> </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nThe volume-down rocker button is released    </p>\n</td>\n</tr>\n</tbody> </table>\n</div>\n<p>\nSee the <a class=\"external-link external-link\" href=\"#!/api/Titanium.UI.Window\">Window</a> reference page for more information on these special events. The Menu button is handled specially as an event fired against the Android activity. See this <a class=\"external-link external-link\" href=\"https://github.com/appcelerator-developer-relations/KitchenSink/blob/master/Resources/ui/handheld/android/baseui/android_menu_1.js\" target=\"_blank\">Kitchen Sink example</a> for sample code for creating and displaying a menu.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004896_EventHandling-ConsiderationsandBestPractices\">\n<h3 class=\"heading \"><span>Considerations and Best Practices</span></h3>\n<p>\nEvent listeners must be defined <i class=\" \">before</i> their respective events are likely to be fired, otherwise they are not guaranteed to be called. For example, a window's <a class=\"external-link external-link\" href=\"#!/Titanium.UI.Window-event-open\">open</a> and <a class=\"external-link external-link\" href=\"#!/Titanium.UI.Window-event-focus\">focus</a> listeners must be defined before the window is opened. Evaluating events as late as possible while bearing the above consideration in mind, however, can significantly improve application responsiveness. For example, an event listener for a click event may be defined after the parent window has been opened.    </p>\n<p>\nGlobal event listeners, such as the Ti.App events described above or the Geolocation or Gesture listeners, remain in scope the entire time your app is running. This means that any local variables you reference within those listeners will remain in scope while your app is running. This can cause memory leaks &ndash; objects you no longer need and think have been destroyed remain in memory. See the <a class=\"document-link \" href=\"#!/guide/Managing_Memory_and_Finding_Leaks\" Managing_Memory_and_Finding_Leaks.html=\"Managing_Memory_and_Finding_Leaks.html\">Managing Memory and Finding Leaks</a> chapter for more information. The gist of it is that you must remove global event listeners when you're done with them. When a window closes, for example, you might no longer need to listen for a certain global event; remove it.    </p>\n</div>\n</div>\n<div class=\"section section-2 \" id=\"29004896_EventHandling-Hands-onPractice\">\n<h2 class=\"heading \"><span>Hands-on Practice</span></h2>\n<div class=\"section section-3 \" id=\"29004896_EventHandling-Goal\">\n<h3 class=\"heading \"><span>Goal</span></h3>\n<p>\nIn this activity, you will fire and listen for events to test how events propagate &ndash; whether they bubble up or trickle down. You will also fire and listen for an app-level event.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004896_EventHandling-Steps\">\n<h3 class=\"heading \"><span>Steps</span></h3>\n<p>\nDetermine if events bubble up or trickle down and do the platforms match...put a button in a view in a window then put a click listener on all of them and see the order in which they're fired. Perhaps also compare the x/y and globalPoint coordinates to see how they differ.    </p>\n<ol class=\" \"><li class=\" \"> <p>\nCreate a new Titanium Mobile project named Events    </p>\n</li><li class=\" \"> <p>\nRemove all of the code from app.js. Write new code to define the following elements:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nA window with a white background color. Add a custom property named <tt class=\" \">whichObj</tt> with the value 'window' to your window object.    </p>\n</li><li class=\" \"> <p>\nA view that fills 80% of the width and height of the window. It should have a yellow background. Add a custom property named <tt class=\" \">whichObj</tt> with the value 'view' to your view object. Make sure to add the view to the window.    </p>\n</li><li class=\" \"> <p>\nA button centered vertically and horizontally within the view. Add a custom property named <tt class=\" \">whichObj</tt> with the value 'button' to your button object. Make sure to add the button to the view.    </p>\n</li></ul></li><li class=\" \"> <p>\nAdd a click event listener on the window object. It should log two messages to the console:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nMessage 1: Simply output the word 'window' to the log so you know the window received the click event    </p>\n</li><li class=\" \"> <p>\nMessage 2: Log the <tt class=\" \">whichObj</tt> property value to the console so you know which object actually received the user's click. Keep in mind the event object properties that you'll need to reference to access this property.    </p>\n</li></ul></li><li class=\" \"> <p>\nAdd a click event listener to the view object. It should log the word 'view' to the console so you know the view received the click event.    </p>\n</li><li class=\" \"> <p>\nAdd a click event listener to the button. It should take two actions:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nIt should print the word 'button' to the log so you know the button received the click event.    </p>\n</li><li class=\" \"> <p>\nIt should fire an app-level event named <tt class=\" \">changeBG</tt> and pass an anonymous object defining a color.    </p>\n</li></ul></li><li class=\" \"> <p>\nAdd an app-level event listener which watches for the <tt class=\" \">changeBG</tt> event. When received, it should update the view's background color with the value passed via the event object.    </p>\n</li><li class=\" \"> <p>\nBuild and test the app by clicking the button. Do events bubble up (button receives the click first, then the view, then the window) or do events trickle down (window, then view, then button)? If you can build for both Android and iOS, compare the output on the two platforms. Do they react the same?    </p>\n</li></ol> </div>\n<div class=\"section section-3 \" id=\"29004896_EventHandling-ReferencesandFurtherReading\">\n<h3 class=\"heading \"><span>References and Further Reading</span></h3>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://assets.appcelerator.com.s3.amazonaws.com/app_u/ebook/3.3_events.zip\" target=\"_blank\">Finished code</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"#!/api/Titanium.UI.Window\">Window module</a> </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"29004896_EventHandling-Summary\">\n<h2 class=\"heading \"><span>Summary</span></h2>\n<p>\nIn this section, you learned how to capture and fire events. You learned the difference between component level and app-level events, as well as how and when to use them. Finally, you tested event propagation to determine that on both platforms, events bubble up though only a single event object is created and passed among the interested event listeners. Next we'll move on to handling one of the most used UI components in today's apps: the TableView.    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Event Handling"});