Ext.data.JsonP['Layouts,_Positioning,_and_the_View_Hierarchy']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Layouts, Positioning, and the View Hierarchy</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004895\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004895\"><span>Edit</span></a>\n<h1>Layouts, Positioning, and the View Hierarchy</h1>\n<div class=\"section section-2 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-Objective\">\n<h2 class=\"heading \"><span>Objective</span></h2>\n<p>\nIn this chapter, you will learn how to lay out your user interface components using Titanium's various positioning properties. You will examine the coordinates system used by Titanium, its view hierarchy, and the layering and positioning rules that it follows when rendering your UI.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<p>\nThe current layout system is product of organic growth and development of our cross-platform layout system. Its specifics and particulars were formalized with the 2.0 SDK release as the &quot;<a class=\"document-link \" href=\"#!/guide/UI_Composite_Layout_Behavior_Spec\" UI_Composite_Layout_Behavior_Spec.html=\"UI_Composite_Layout_Behavior_Spec.html\">Composite UI Layout Specification</a>.&quot; In addition to specifying various behaviors, the spec deprecates some features and sets the stage for the &quot;declarative UI&quot; that is currently being planned for a future release of Titanium. This guide covers the Composite UI spec.    </p>\n<p>\nIn this guide, we're going to explore the following factors that affect how you position elements within your app's UI:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nUnits    </p>\n</li><li class=\" \"> <p>\nThe coordinates grid    </p>\n</li><li class=\" \"> <p>\nPositioning and the view hierarchy    </p>\n</li><li class=\" \"> <p>\nLayout modes    </p>\n</li><li class=\" \"> <p>\nzIndex &amp; default stacking order    </p>\n</li></ul> <div class=\"section section-3 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-Units\">\n<h3 class=\"heading \"><span>Units</span></h3>\n<p>\nPlacement and dimensions of UI elements are specified using a numeric value plus an implicit or explicit unit of measurement. If you don't specify a unit of measurement, the system unit is assumed. You can also set a default unit of measurement to use in your app by setting a tiapp.xml property.    </p>\n<p>\nFirst, a couple of definitions we'll use in the rest of this guide:    </p>\n<ul class=\" \"><li class=\" \"> <p>\ndip : Density-independent pixels. A measurement which is translated natively to a corresponding pixel measure using a scale factor based on a platform-specific &quot;default&quot; density, and the device's physical density.    </p>\n</li><li class=\" \"> <p>\nSystem unit : A platform-dependent unit which is the default for how the system presents its view information to the native layout system. On Android this is pixels; on iOS it is dip.    </p>\n</li></ul> <p>\nSupported units are:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nAbsolute measurements    </p>\n<ul class=\" \"><li class=\" \"> <p>\npx : pixels    </p>\n</li><li class=\" \"> <p>\nmm : millimeters    </p>\n</li><li class=\" \"> <p>\ncm : centimeters    </p>\n</li><li class=\" \"> <p>\nin : inches    </p>\n</li><li class=\" \"> <p>\ndp/dip : Density-independent pixels (we sometimes call these &quot;points&quot;)    </p>\n<ul class=\" \"><li class=\" \"> <p>\nAndroid : actual pixels = dip * (screen density) / 160    </p>\n</li><li class=\" \"> <p>\niOS : actual pixels = dip * (screen density) / 163 (effectively 1dip=1px on standard, 1dip=2px on retina)    </p>\n</li><li class=\" \"> <p>\nMobile Web: actual pixels = dip * (screen density) / 96 (effectively 1dip=1px because most browsers scale pages to 96dpi to make them consistent with desktops).    </p>\n</li></ul></li></ul></li><li class=\" \"> <p>\nRelative measurements    </p>\n<ul class=\" \"><li class=\" \"> <p>\n% : Percentage of the size of the parent.    </p>\n<ul class=\" \"><li class=\" \"> <p>\nFor x-axis values (width, left, right, center.x) this is relative to the parent's width    </p>\n</li><li class=\" \"> <p>\nFor y-axis values (height, top, bottom, center.y) this is relative to the parent's height.    </p>\n</li></ul></li></ul></li></ul> <p>\nYou would use these units of measurement like this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var view = Ti.UI.createView({</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">/* You would not normally mix units like this */</code></div>\n<div class=\"line\"><code class=\"plain\">\ttop: </code><code class=\"string\">'10mm'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tleft: </code><code class=\"string\">'5px'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\twidth: </code><code class=\"string\">'30%'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\theight: </code><code class=\"value\">50</code><code class=\"plain\"> </code><code class=\"comments\">/* default system units are used here */</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> <div class=\"section section-4 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-Settingdefaultunitsintiapp.xml\">\n<h4 class=\"heading \"><span>Setting default units in tiapp.xml</span></h4>\n<p>\nYou can specify the default unit type to use with untyped values. To the tiapp.xml file, you would add    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;property name=</code><code class=\"string\">\"ti.ui.defaultunit\"</code><code class=\"plain\"> type=</code><code class=\"string\">\"string\"</code><code class=\"plain\">&gt;value&lt;/property&gt;</code></div>\n</div>\n</div> <p>\nWhere <tt class=\" \">value</tt> is one of <tt class=\" \">px</tt>, <tt class=\" \">mm</tt>, <tt class=\" \">cm</tt>, <tt class=\" \">in</tt>, <tt class=\" \">dp</tt>, <tt class=\" \">dip</tt>, or <tt class=\" \">system</tt>. The &quot;system&quot; value corresponds to the platform-dependent system unit as described above.    </p>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-Thecoordinatesgrid\">\n<h3 class=\"heading \"><span>The coordinates grid</span></h3>\n<p>\nTitanium uses a grid coordinate system for layout. Grid locations are based on the system unit (platform-dependent unit). This means that by default on iOS, elements are positioned on a density-independent grid and on Android on a density-dependent grid. The net result is that on iOS, elements are positioned in visually the same locations regardless of the actual density of the screen. On Android, elements are positioned at the same absolute pixel locations and might lay out differently depending on the device.    </p>\n<ul class=\" \"><li class=\" \"> <p>\niPhone with either original or retina display is based on a 320 x 480 dip grid.    </p>\n</li><li class=\" \"> <p>\niPad is based on a 1024 x 768 dip grid.    </p>\n</li><li class=\" \"> <p>\nAndroid device screen sizes vary. Considering these emulator examples:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nHVGA emulator is 320 x 480 px    </p>\n</li><li class=\" \"> <p>\nWVGA800 emulator is 480 x 800 px    </p>\n</li><li class=\" \"> <p>\nWVGA854 emulator is 480 x 854 px    </p>\n</li></ul></li></ul> <p>\nRemember that you can specify <tt class=\" \">dp</tt> or <tt class=\" \">dip</tt> units on Android (and even set an app-level default in tiapp.xml) to achieve the same density-independent grid as offered by default on iOS.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-Positioninganddimensionsofelements\">\n<h3 class=\"heading \"><span>Positioning and dimensions of elements</span></h3>\n<p>\nElements in Titanium are positioned relative to their parent container, such as the window or a view. Depending on the positioning properties you use, the reference point will be either the parent's top/left or bottom/right corner. We call this the &quot;view hierarchy.&quot; Options include:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">top</tt> and <tt class=\" \">left</tt> properties, which specify the grid position of the element's top/left corner relative to the parent's top/left corner.    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">bottom</tt> and <tt class=\" \">right</tt> properties, which specify the grid position of the element's bottom/right corner relative to the parent's bottom/right corner.    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">center</tt> property, which species the position of the element's center point relative to the parent's top/left corner.    </p>\n</li></ul> <p>\n(The <tt class=\" \">size</tt> property provides the <i class=\" \">rendered</i> size of the view, and thus is only available once both it and its ancestors have been fully drawn. This means it is also a read-only property; a dictionary with two properties, <tt class=\" \">width</tt> and <tt class=\" \">height</tt>.)    </p>\n<p>\nYou specify element dimensions by setting the <tt class=\" \">width</tt> and <tt class=\" \">height</tt> properties. If you omit those properties, but set <tt class=\" \">top</tt> and <tt class=\" \">bottom</tt> the element's height will be calculated to put its top and bottom edges at those positions relative to the parent. The same is true for <tt class=\" \">left</tt> and <tt class=\" \">right</tt>.    </p>\n<p>\nEach of these attributes accept values with or without units, including percentage-based relative measurements as described above.    </p>\n<p>\nIn the following example, the red view is positioned at the 20,20 point relative to the window's top/left corner. The yellow view's bottom/right corner is 100 points/pixels from the bottom/right corner of the display. The blue view's center is at 160,240 and given its width of 50, this means its top-left corner would be at 110,190. The green view has a sufficiently negative <tt class=\" \">top</tt> value given its width that it is positioned off the top of the screen.    </p>\n<p>\n<img src=\"images/download/attachments/29004895/layout.png\" alt=\"images/download/attachments/29004895/layout.png\" class=\"confluence-embedded-image\" />\n</p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Positioning</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow({</code></div>\n<div class=\"line\"><code class=\"plain\">\tbackgroundColor:</code><code class=\"string\">'#fff'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">var redview = Ti.UI.createView({</code></div>\n<div class=\"line\"><code class=\"plain\">    top:</code><code class=\"value\">20</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tleft:</code><code class=\"value\">20</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    width:</code><code class=\"value\">10</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    height:</code><code class=\"value\">10</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    backgroundColor:</code><code class=\"string\">\"red\"</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(redview);</code></div>\n<div class=\"line\"><code class=\"plain\">var yellowview = Ti.UI.createView({</code></div>\n<div class=\"line\"><code class=\"plain\">    bottom:</code><code class=\"value\">100</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tright:</code><code class=\"value\">100</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    width:</code><code class=\"value\">10</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    height:</code><code class=\"value\">10</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    backgroundColor:</code><code class=\"string\">\"yellow\"</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(yellowview);</code></div>\n<div class=\"line\"><code class=\"plain\">var blueview = Ti.UI.createView({</code></div>\n<div class=\"line\"><code class=\"plain\">\tcenter: {x: </code><code class=\"value\">160</code><code class=\"plain\">, y: </code><code class=\"value\">240</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">\twidth:</code><code class=\"value\">50</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\theight:</code><code class=\"value\">50</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tbackgroundColor:</code><code class=\"string\">\"blue\"</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(blueview);</code></div>\n<div class=\"line\"><code class=\"plain\">var greenview = Ti.UI.createView({</code></div>\n<div class=\"line\"><code class=\"plain\">    top:-</code><code class=\"value\">20</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    width:</code><code class=\"value\">10</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    height:</code><code class=\"value\">10</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    backgroundColor:</code><code class=\"string\">\"green\"</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(greenview);</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-Layoutmodes\">\n<h3 class=\"heading \"><span>Layout modes</span></h3>\n<p>\nTitanium Windows and Views can employ one of three layout modes by setting its <tt class=\" \">layout</tt> property to one of the following values:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">absolute</tt> - This is the default mode that we have discussed to this point. You specify point coordinates on a grid relative to the parent container's top/left or bottom/right corner.    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">vertical</tt> - This layout mode stacks child views vertically. The child's <tt class=\" \">top</tt> property becomes an offset value. It describes the number of units from its previous sibling's bottom edge where the view will be positioned.    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">horizontal</tt> - This layout mode lines up child views horizontally. The child's <tt class=\" \">left</tt> property, similar to <tt class=\" \">vertical</tt>, becomes an offset. This time, it's the position from the previous sibling's right edge.    </p>\n</li></ul> <p>\nHere's an exmaple of these layouts in action:<br /> <img src=\"images/download/attachments/29004895/vert_and_horiz.png\" alt=\"images/download/attachments/29004895/vert_and_horiz.png\" class=\"confluence-embedded-image\" />\n</p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Layout modes</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow({</code></div>\n<div class=\"line\"><code class=\"plain\">\tbackgroundColor:</code><code class=\"string\">'#fff'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// uses grid-drawing module from https://gist.github.com/1187384</code></div>\n<div class=\"line\"><code class=\"comments\">// to draw grid lines every 20 points</code></div>\n<div class=\"line\"><code class=\"plain\">var grid = require(</code><code class=\"string\">'gridlines'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">grid.drawgrid(</code><code class=\"value\">20</code><code class=\"plain\">,win);</code></div>\n<div class=\"line\"><code class=\"comments\">// draw a view that fills the window and set its layout property</code></div>\n<div class=\"line\"><code class=\"plain\">var view = Ti.UI.createView({</code></div>\n<div class=\"line\"><code class=\"plain\">\tbackgroundColor:</code><code class=\"string\">'transparent'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\ttop:</code><code class=\"value\">0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tleft:</code><code class=\"value\">0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\twidth:</code><code class=\"string\">'100%'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\theight:</code><code class=\"string\">'100%'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tlayout:</code><code class=\"string\">'vertical'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// simple function for making colored boxes</code></div>\n<div class=\"line\"><code class=\"plain\">function makeView(color) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> Ti.UI.createView({</code></div>\n<div class=\"line\"><code class=\"plain\">\t    top:</code><code class=\"value\">20</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tleft:</code><code class=\"value\">20</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t    width:</code><code class=\"value\">20</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t    height:</code><code class=\"value\">20</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t    backgroundColor:color</code></div>\n<div class=\"line\"><code class=\"plain\">\t});</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">view.add(makeView(</code><code class=\"string\">'red'</code><code class=\"plain\">));</code></div>\n<div class=\"line\"><code class=\"plain\">view.add(makeView(</code><code class=\"string\">'yellow'</code><code class=\"plain\">));</code></div>\n<div class=\"line\"><code class=\"plain\">view.add(makeView(</code><code class=\"string\">'blue'</code><code class=\"plain\">));</code></div>\n<div class=\"line\"><code class=\"plain\">view.add(makeView(</code><code class=\"string\">'green'</code><code class=\"plain\">));</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(view);</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-AutoSizeBehaviors\">\n<h3 class=\"heading \"><span>Auto Size Behaviors</span></h3>\n<p>\nTitanium has supported &quot;auto&quot; behaviors for element dimensions. But that behavior is deprecated in Titanium 2.0. In the past, the &quot;auto&quot; behavior applied to height and width dimensions and was supposed to &quot;size the view appropriately given the type of view and its contents.&quot; This vague descriptor has led to inconsistent behavior across platforms.    </p>\n<p>\nIt will be replaced by two specified behaviors: SIZE and FILL. You specify these behaviors using the Ti.UI.SIZE and Ti.UI.FILL constants, which represent explicit &quot;automatic&quot; behaviors. The Ti.UI.SIZE behavior represents constraining a view's size to fit its contents. The Ti.UI.FILL behavior represents growing a view to fill its parent's dimensions. Note that the FILL behavior doesn't take into consideration other sibling elements in the parent. If the parent view has two children, one of which with static dimensions and the other set to FILL, the second view will fill its parent possibly hiding the sibling from view (depending on stacking order).    </p>\n<p>\nUI components exhibit default SIZE or FILL behaviors, as listed in this table:    </p>\n<div class=\"tablewrap\">\n<table class=\"confluenceTable\">\n<thead class=\" \"> <tr>\n<td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n<p>\nSIZE views    </p>\n</td>\n<td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n<p>\nFILL views    </p>\n</td>\n<td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n<p>\nMixed behavior    </p>\n</td>\n</tr>\n</thead><tfoot class=\" \"></tfoot><tbody class=\" \"> <tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nButton    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nWindow    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nToolbar: FILL for width, SIZE for height    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nLabel    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nView    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nTableViewRow: FILL for width, SIZE for height    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nImageView    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nTabGroup    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nSlider: FILL for width, SIZE for height    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nProgressBar    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nTableView    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n</p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nSwitch    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nWebView    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n</p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nTextArea    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nScrollView    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n</p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nTextField    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nScrollableView    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n</p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nPicker    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n</p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n</p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nSearchBar    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n</p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n</p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nButtonBar    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n</p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n</p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nTableViewSection    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n</p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n</p>\n</td>\n</tr>\n</tbody> </table>\n</div>\n<div class=\"section section-4 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-ScrollViewContentSizes\">\n<h4 class=\"heading \"><span>ScrollView Content Sizes</span></h4>\n<p>\nIn the case of ScrollView, <tt class=\" \">contentWidth</tt> and <tt class=\" \">contentHeight</tt> may also be set to &quot;auto&quot; or Ti.UI.SIZE, and in those cases, this is the expected behavior:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nWhen all children views have FILL behavior, the content area of the scroll view will be clipped to the physical size of the scroll view    </p>\n</li><li class=\" \"> <p>\nOtherwise, the content area will grow according to the bottom offset of the bottom-most View and the right offset of right-most View. In some cases the bottom-most and right-most View may be the same View.    </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-3 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-zIndex&amp;defaultstacking\">\n<h3 class=\"heading \"><span>zIndex &amp; default stacking</span></h3>\n<p>\nYou can position elements atop one another. By default, as you add views to a parent container, they will overlay any views you previously added (assuming their boundaries overlap). You can control the stacking order by either changing the order you add elements to the container (not always convenient) or by setting the <tt class=\" \">zIndex</tt> property. As with HTML elements, <tt class=\" \">zIndex</tt> accepts an integer value of zero or greater. The higher the <tt class=\" \">zIndex</tt> value, the closer to the top of the stack a view will become.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-Hands-onPractice\">\n<h3 class=\"heading \"><span>Hands-on Practice</span></h3>\n<div class=\"section section-4 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-Goal\">\n<h4 class=\"heading \"><span>Goal</span></h4>\n<p>\nIn this activity, you will test the position behavior of elements by implementing some of the code examples in this chapter.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-Resources\">\n<h4 class=\"heading \"><span>Resources</span></h4>\n<p>\nTo perform the steps in this activity, you will need the gridlines module from <a class=\"external-link external-link\" href=\"https://gist.github.com/1187384\" target=\"_blank\">https://gist.github.com/1187384</a>.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-Steps\">\n<h4 class=\"heading \"><span>Steps</span></h4>\n<ol class=\" \"><li class=\" \"> <p>\nCreate a new Titanium Mobile project.    </p>\n</li><li class=\" \"> <p>\nCreate a gridlines.js file containing the code shown at the Gist linked to above.    </p>\n</li><li class=\" \"> <p>\nIn app.js, remove all of the existing code. Declare a window, require the grid line module, and draw gridlines every 20 points, following the example code as shown in the Gist.    </p>\n</li><li class=\" \"> <p>\nImplement the positioning code shown in the example labeled &quot;Positioning&quot; above. This will draw red, blue, yellow, and green boxes at various positions on the screen.    </p>\n</li><li class=\" \"> <p>\nBuild and run the project. Count the gridlines to confirm that elements were placed as described in this chapter.    </p>\n</li><li class=\" \"> <p>\nAdjust the positioning properties of the various boxes to test positioning rules.    </p>\n</li><li class=\" \"> <p>\nTry setting the window's <tt class=\" \">layout</tt> property to <tt class=\" \">vertical</tt> or <tt class=\" \">horizontal</tt> to see the effect on the lines and boxes. Adjust the code so that the boxes are visible.    </p>\n</li></ol> </div>\n</div>\n<div class=\"section section-3 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-ReferencesandFurtherReading\">\n<h3 class=\"heading \"><span>References and Further Reading</span></h3>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://assets.appcelerator.com.s3.amazonaws.com/app_u/ebook/3.2_positioning.zip\" target=\"_blank\">Finished code</a> </p>\n</li><li class=\" \"> <p>\nTitanium <a class=\"document-link \" href=\"#!/guide/UI_Composite_Layout_Behavior_Spec\" UI_Composite_Layout_Behavior_Spec.html=\"UI_Composite_Layout_Behavior_Spec.html\">UI Composite Layout Behavior Spec</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://blog.krawaller.se/titanium-app-for-explaining-layout-mechanisms\" target=\"_blank\">Titanium app for explaining layout mechanisms</a> </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"29004895_Layouts,Positioning,andtheViewHierarchy-Summary\">\n<h2 class=\"heading \"><span>Summary</span></h2>\n<p>\nIn this section, you learned how to lay out your user interface components using the various positioning properties. You examined the coordinates system used by Titanium, the view hierarchy, and the layering and positioning rules that Titanium follows when rendering your UI. Next we'll discuss how you can handle user interaction via events.    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Layouts, Positioning, and the View Hierarchy"});