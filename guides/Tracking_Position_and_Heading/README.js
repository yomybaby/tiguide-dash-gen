Ext.data.JsonP['Tracking_Position_and_Heading']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Tracking Position and Heading</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004915\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004915\"><span>Edit</span></a>\n<h1>Tracking Position and Heading</h1>\n<div class=\"section section-2 \" id=\"29004915_TrackingPositionandHeading-Objective\">\n<h2 class=\"heading \"><span>Objective</span></h2>\n<p>\nIn this chapter, you'll learn how to use Titanium's Geolocation API to retrieve GPS positioning and heading information from mobile devices. You'll learn iOS, Android, and Mobile Web specifics that will help you best balance accuracy with battery consumption. And you'll learn how to manage Geolocation listeners with respect to your application's lifecycle.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004915_TrackingPositionandHeading-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<p>\nThe position and heading APIs are part of the <tt class=\" \">Ti.Geolocation</tt> module, which contains all the functions, properties, and events necessary to handle location information. That namespace is further divided into the <tt class=\" \">Ti.Geolocation.Android</tt> and <tt class=\" \">Ti.Geolocation.MobileWeb</tt> namespaces, which provide platform-specific features. In the following sections, you'll learn how to use this API to perform the following activities:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nDetect if location services are available    </p>\n</li><li class=\" \"> <p>\nObtain the current GPS position    </p>\n</li><li class=\" \"> <p>\nContinually monitor the GPS position    </p>\n</li><li class=\" \"> <p>\nUse the device's compass    </p>\n</li><li class=\" \"> <p>\nConfigure location service properties    </p>\n</li><li class=\" \"> <p>\nForward and reverse geocoding    </p>\n</li></ul> <p>\nYou'll also learn best practices and caveats to consider when using location services in your apps. But first, let's dive into some platform specific considerations when using these services.    </p>\n<div class=\"section section-3 \" id=\"29004915_TrackingPositionandHeading-Developmentconsiderations\">\n<h3 class=\"heading \"><span>Development considerations</span></h3>\n<div class=\"section section-4 \" id=\"29004915_TrackingPositionandHeading-iOSDevelopmentConsiderations\">\n<h4 class=\"heading \"><span>iOS Development Considerations</span></h4>\n<p>\niOS users are prompted to grant or deny permission when your application attempts to use geolocation information. The system provides a generic prompt for that request. However, according to Apple's guidelines, you should provide a customized message to more clearly tell users why you're requesting their location. You should set the <tt class=\" \">Ti.Geolocation.purpose</tt> property equal to the string that will be shown to users.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// set to a message meaningful to your users</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.Geolocation.purpose = </code><code class=\"string\">'Determine Current Location'</code><code class=\"plain\">;</code></div>\n</div>\n</div> <p>\nStarting with iOS 8, to use location services, add either the <tt class=\" \">NSLocationWhenInUseUsageDescription</tt> or <tt class=\" \">NSLocationAlwaysUsageDescription</tt> key to the iOS plist section of the project's <tt class=\" \">tiapp.xml</tt> file.  To localize the message, see <a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-LocalizePropertyListKeys\" Internationalization.html#29004892_Internationalization-LocalizePropertyListKeys=\"Internationalization.html#29004892_Internationalization-LocalizePropertyListKeys\">Internationalization: Localize Property List Keys</a>.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;ti:app&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;ios&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">        &lt;plist&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">            &lt;dict&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">                &lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">                &lt;string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">                    Specify the reason </code><code class=\"keyword\">for</code><code class=\"plain\"> accessing the user's location information.</code></div>\n<div class=\"line\"><code class=\"plain\">                    This appears in the alert dialog when asking the user </code><code class=\"keyword\">for</code><code class=\"plain\"> permission to</code></div>\n<div class=\"line\"><code class=\"plain\">                    access their location.</code></div>\n<div class=\"line\"><code class=\"plain\">                &lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">            &lt;/dict&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">        &lt;/plist&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;/ios&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/ti:app&gt;</code></div>\n</div>\n</div> <p>\n</p>\n</div>\n<div class=\"section section-4 \" id=\"29004915_TrackingPositionandHeading-AndroidDevelopmentConsiderations\">\n<h4 class=\"heading \"><span>Android Development Considerations</span></h4>\n<p>\nIn general, testing geolocation code should be done on a device so that you accurately and realistically test your app in an environment close to a real-world usage scenario. If you plan to test your code in the emulator, you must ensure that the AVD includes GPS emulation, and you'll need to send simulated location coordinates to that AVD.    </p>\n<div class=\"section section-5 \" id=\"29004915_TrackingPositionandHeading-AddingGPSSupporttoanAVD\">\n<h5 class=\"heading \"><span>Adding GPS Support to an AVD</span></h5>\n<p>\nThe Android emulated virtual devices (AVDs) created by Studio include geolocation hardware emulation. However, if you're using an AVD you defined yourself, such hardware emulation might not be provided. You can enable GPS emulation within the AVD by following these steps:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nOpen the Android SDK and AVD Manager (found at <tt class=\" \">ANDROID_SDK/tools/android</tt>)    </p>\n</li><li class=\" \"> <p>\nSelect your Titanium Android emulator and click the &quot;Edit..&quot; button    </p>\n<img src=\"images/download/attachments/29004915/avd_edit.png\" alt=\"images/download/attachments/29004915/avd_edit.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</li><li class=\" \"> <p>\nIn the &quot;Hardware&quot; section, see if &quot;GPS support&quot; is listed<br /> <img src=\"images/download/attachments/29004915/hardware.png\" alt=\"images/download/attachments/29004915/hardware.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n    ** If it is, make sure the &quot;Value&quot; field it set to &quot;yes&quot;    </p>\n<ul class=\" \"><li class=\" \"> <p>\nIf not, click the &quot;New...&quot; button    </p>\n<ul class=\" \"><li class=\" \"> <p>\nFrom the &quot;property&quot; list, select &quot;GPS support&quot;    </p>\n<img src=\"images/download/attachments/29004915/gps.jpg\" alt=\"images/download/attachments/29004915/gps.jpg\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</li><li class=\" \"> <p>\nClick &quot;OK&quot;    </p>\n</li><li class=\" \"> <p>\nMake sure the &quot;Value&quot; field for &quot;GPS support&quot; it set to &quot;yes&quot;    </p>\n<img src=\"images/download/attachments/29004915/gps_yes.png\" alt=\"images/download/attachments/29004915/gps_yes.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</li></ul></li></ul></li><li class=\" \"> <p>\nClick &quot;Edit AVD&quot; then click &quot;OK&quot; in the resulting dialog    </p>\n</li><li class=\" \"> <p>\nRestart your Android emulator, if necessary    </p>\n</li></ul> </div>\n<div class=\"section section-5 \" id=\"29004915_TrackingPositionandHeading-SettingaSimulatedLocationwithDDMS\">\n<h5 class=\"heading \"><span>Setting a Simulated Location with DDMS</span></h5>\n<p>\nBy default, the AVDs (emulators) do not have a default mock location. You must specify a location to use during testing. This also technically a requirement on a device, however the likelihood is very high that you have used some app that has set a location already.    </p>\n<p>\nYou use DDMS (the Dalvik Debug Manager) to send mock locations to the Android emulator. To do so, follow these steps:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nOpen DDMS (found at <tt class=\" \">ANDROID_SDK/tools/ddms</tt>)    </p>\n</li><li class=\" \"> <p>\nSelect your emulator from the list of devices in the left pane and click the &quot;Emulator Control&quot; tab in the right pane    </p>\n<img src=\"images/download/attachments/29004915/ec.png\" alt=\"images/download/attachments/29004915/ec.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</li><li class=\" \"> <p>\nIn the right pane, scroll down to the &quot;Location Controls&quot; section    </p>\n<img src=\"images/download/attachments/29004915/manual.png\" alt=\"images/download/attachments/29004915/manual.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</li><li class=\" \"> <p>\nClick the &quot;Manual&quot; tab if it is not already selected    </p>\n</li><li class=\" \"> <p>\nWhile your location based app is running in the emulator, enter values for latitude and longitude and click &quot;Send&quot;    </p>\n</li></ul> <p>\nTo get more information about providing mock locations to your Android emulator, be sure to check out the <a class=\"external-link external-link\" href=\"http://developer.android.com/guide/topics/location/obtaining-user-location.html#MockData\" target=\"_blank\">official Android documentation</a> on the subject. It gives you details not only on manual mock locations, but also using the GPX and KML formats.    </p>\n<p>\nOnce you've set the mock location, you must grant your app permissions to read that mock location data. You do this by adding an entry to the <tt class=\" \">AndroidManifest.xml</tt> file. Fortunately, Titanium will take care of this automatically for you. You can confirm that these permissions are present by going into your project's <tt class=\" \">build/android</tt> directory and checking the <tt class=\" \">AndroidManifest.xml</tt> file. Within the &lt;manifest&gt; section, you should see a line that looks like this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;uses-permission android:name=</code><code class=\"string\">\"android.permission.ACCESS_MOCK_LOCATION\"</code><code class=\"plain\">/&gt;</code></div>\n</div>\n</div> </div>\n</div>\n<div class=\"section section-4 \" id=\"29004915_TrackingPositionandHeading-MobileWebconsiderations\">\n<h4 class=\"heading \"><span>Mobile Web considerations</span></h4>\n<p>\nFor geolocation to work with Mobile Web, the user must be running a browser that supports the W3C's <a class=\"external-link external-link\" href=\"http://www.w3.org/TR/geolocation-API/\" target=\"_blank\">Geolocation API</a>. The actual implementation of geolocation, and accuracy provided, is also a function of the user's browser as well as the device on which they're running that browser. As with iOS, Mobile Web apps will prompt users to grant permission to access your location. However, you cannot change the message displayed to users. That message is dependent on the browser he or she uses, but typically follows the form &quot;www.example.com Would like to use your current location.&quot;    </p>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"29004915_TrackingPositionandHeading-UsingLocationServicesinyourApp\">\n<h3 class=\"heading \"><span>Using Location Services in your App</span></h3>\n<p>\nUsing location services generally follows these three stages:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nDetermine if location services are enabled and available.    </p>\n</li><li class=\" \"> <p>\nConfigure the accuracy and listener mechanisms to use.    </p>\n</li><li class=\" \"> <p>\nGrab a one-time location or enable a location-listener to continually monitor a user's location.    </p>\n</li><li class=\" \"> <p>\nWith a location-listener, actively manage the listener in coordination with the app's lifecycle.    </p>\n</li></ol> <p>\nUsing location services can have a significant impact on a device's battery life, so it's important to use them in the most efficient manner possible. Power consumption is strongly influenced by the accuracy and frequency of location updates required by your application. The higher the accuracy you request, and the more frequently you request location updates, the more battery power that will be consumed.    </p>\n<div class=\"section section-4 \" id=\"29004915_TrackingPositionandHeading-DetectifLocationServicesareAvailable\">\n<h4 class=\"heading \"><span>Detect if Location Services are Available</span></h4>\n<p>\nTo determine whether or not location services will be available to you on the current mobile device, you simply need to check the boolean property <tt class=\" \">Ti.Geolocation.locationServicesEnabled</tt>. Keep in mind, though, that on Android 2.2 and above, a low-precision &quot;passive&quot; location provider is enabled at all times, even when the user disables both the GPS and Network location providers. Therefore, this method always returns <tt class=\" \">true</tt> on such devices. With this in mind, the base skeleton of a locations based app might look something like this.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Ti.Geolocation.locationServicesEnabled) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// perform other operations with Ti.Geolocation</code></div>\n<div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">    alert(</code><code class=\"string\">'Please enable location services'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> </div>\n<div class=\"section section-4 \" id=\"29004915_TrackingPositionandHeading-ConfiguretheAccuracyandFrequency\">\n<h4 class=\"heading \"><span>Configure the Accuracy and Frequency</span></h4>\n<p>\nThe location services systems of the underlying platforms are very different, so there are significant implementation differences between the platforms. The basic methods of requesting location information and receiving location updates are essentially the same on all platforms. However, the method of configuring the accuracy and frequency of location updates is different for each platform.    </p>\n<div class=\"section section-5 \" id=\"29004915_TrackingPositionandHeading-iOSGeoConfiguration\">\n<h5 class=\"heading \"><span>iOS Geo Configuration</span></h5>\n<p>\nIn iOS, the accuracy (and power consumption) of location services is primarily determined by the <tt class=\" \">Ti.Geolocation.accuracy</tt> property setting. You can set this property to one of the following values:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nACCURACY_BEST (highest accuracy and power consumption)    </p>\n</li><li class=\" \"> <p>\nACCURACY_NEAREST_TEN_METERS    </p>\n</li><li class=\" \"> <p>\nACCURACY_HUNDRED_METERS    </p>\n</li><li class=\" \"> <p>\nACCURACY_KILOMETER    </p>\n</li><li class=\" \"> <p>\nACCURACY_THREE_KILOMETERS (lowest accuracy and power consumption).    </p>\n</li></ul> <p>\n(Note that the constants ACCURACY_HIGH and ACCURACY_LOW are Android-specific and may not be used with iOS.)    </p>\n<p>\nBased on the accuracy you choose, iOS uses its own logic to select location providers and filter location updates to provide location updates that meet your accuracy requirements. You can further limit power consumption on iOS by setting the <tt class=\" \">Ti.Geolocation.distanceFilter</tt> property to eliminate position updates when the user is not moving. That property accepts a distance in meters; when the user has moved approximately that distance, your app will receive location update events.    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<strong class=\" \">accuracy</strong> - The target accuracy of all location data received. The following <tt class=\" \">Ti.Geolocation</tt>constants represent the valid values for this property:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">ACCURACY_BEST</tt> - Location data will be of the highest possible accuracy of which the device is capable    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">ACCURACY_HUNDRED_METERS</tt> - Location data will be accurate within 100 meters    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">ACCURACY_KILOMETER</tt> - Location data will be accurate within 1 kilometer    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">ACCURACY_NEAREST_TEN_METERS</tt> - Location data will be accurate within 10 meters    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">ACCURACY_THREE_KILOMETERS_</tt> - Location data will be accurate within 3 kilometers    </p>\n</li></ul></li><li class=\" \"> <p>\n<strong class=\" \">distanceFilter</strong> - The minimum change of position (in meters) before a <tt class=\" \">location</tt> event is fired. The default is 0, meaning that location events are continuously generated.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">headingFilter</strong> - The minium change of heading (in degrees) before a <tt class=\" \">heading</tt> event is fired. The default is 0, meaning that heading events are continuously generated.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">preferredProvider</strong> - Allows you to specify the preferred method for receiving a location. The following <tt class=\" \">Ti.Geolocation</tt>constants represent your possible choices:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">PROVIDER_NETWORK</tt> - Give the network based location provider preference    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">PROVIDER_GPS</tt> - Give the GPS location preference    </p>\n</li></ul></li></ul> <p>\nUsing the event-driven location example at the beginning of this chapter, let's modify it to use some of the above properties.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Geolocation configuration on iOS</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Ti.Geolocation.locationServicesEnabled) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.Geolocation.purpose = </code><code class=\"string\">'Get Current Location'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.Geolocation.accuracy = Ti.Geolocation.ACCURACY_BEST;</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.Geolocation.distanceFilter = </code><code class=\"value\">10</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.Geolocation.preferredProvider = Ti.Geolocation.PROVIDER_GPS;</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.Geolocation.addEventListener(</code><code class=\"string\">'location'</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.error) {</code></div>\n<div class=\"line\"><code class=\"plain\">            alert(</code><code class=\"string\">'Error: '</code><code class=\"plain\"> + e.error);</code></div>\n<div class=\"line\"><code class=\"plain\">        } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">            Ti.API.info(e.coords);</code></div>\n<div class=\"line\"><code class=\"plain\">        }</code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">    alert(</code><code class=\"string\">'Please enable location services'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> </div>\n<div class=\"section section-5 \" id=\"29004915_TrackingPositionandHeading-AndroidGeoConfiguration\">\n<h5 class=\"heading \"><span>Android Geo Configuration</span></h5>\n<p>\nPrior to Titanium Mobile 2.0, Titanium attempted to follow the iOS model on Android, but this didn't fit the native Android model well. Android offers a much richer geolocation model, with multiple location providers, distance filters, update frequencies, and so forth. In Release 2.0, three different location service mode are supported on Android: legacy, manual, and simple.    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<strong class=\" \">Legacy mode</strong> is the mode that existed prior to 2.0. Legacy mode is used when you set the accuracy property to one of the iOS ACCURACY constants (see above).<br />This mode is deprecated on Android and should not be used for new development. In legacy mode, the specified accuracy value determines the minimum distance between location updates. If accuracy is set to ACCURACY_BEST, no distance filter is used on updates. In legacy mode, only a single location provider (GPS, network, or passive) is enabled at a time. You can specify a the location provider using the <tt class=\" \">Ti.Geolocation.preferredProvider</tt> property. You can also specifying a desired update frequency using the frequency property. The <tt class=\" \">preferredProvider</tt> and <tt class=\" \">frequency</tt> properties are not used in any other mode.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">Manual mode</strong> gives developers low-level control of location updates, including enabling individual location providers and filtering updates, for the best combination of accuracy and battery life. Manual mode is used when the <tt class=\" \">Titanium.Geolocation.Android.manualMode</tt> flag is set to <tt class=\" \">true</tt>. In manual mode, the accuracy property is not used, and all configuration is done through the <tt class=\" \">Titanium.Geolocation.Android</tt> module.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">Simple mode</strong> provides a compromise mode that provides adequate support for undemanding location applications without requiring developers to write a lot of Android-specific code. Setting <tt class=\" \">Ti.Geolocation.accuracy</tt> to either ACCURACY_HIGH or ACCURACY_LOW enables simple mode. In this mode the platform handles enabling and disabling location providers and filtering location updates.    </p>\n</li></ul><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// demonstrates manual mode:</code></div>\n<div class=\"line\"><code class=\"plain\">var providerGps = Ti.Geolocation.Android.createLocationProvider({</code></div>\n<div class=\"line\"><code class=\"plain\">    name: Ti.Geolocation.PROVIDER_GPS,</code></div>\n<div class=\"line\"><code class=\"plain\">    minUpdateDistance: </code><code class=\"value\">0.0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    minUpdateTime: </code><code class=\"value\">0</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.Geolocation.Android.addLocationProvider(providerGps);</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.Geolocation.Android.manualMode = </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">var locationCallback = function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (!e.success || e.error) {</code></div>\n<div class=\"line\"><code class=\"plain\">        Ti.API.info(</code><code class=\"string\">'error:'</code><code class=\"plain\"> + JSON.stringify(e.error));</code></div>\n<div class=\"line\"><code class=\"plain\">    } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tTi.API.info(</code><code class=\"string\">'coords: '</code><code class=\"plain\"> + JSON.stringify(e.coords));</code></div>\n<div class=\"line\"><code class=\"plain\">\t}</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n<div class=\"line\"><code class=\"plain\">Titanium.Geolocation.addEventListener(</code><code class=\"string\">'location'</code><code class=\"plain\">, locationCallback);</code></div>\n</div>\n</div> <p>\nSee the <a class=\"external-link external-link\" href=\"#!/api/Titanium.Geolocation.Android\">http://developer.appcelerator.com/apidoc/mobile/latest/Titanium.Geolocation.Android-module.html</a> for further Android-specific information.    </p>\n</div>\n<div class=\"section section-5 \" id=\"29004915_TrackingPositionandHeading-MobileWebGeoConfiguration\">\n<h5 class=\"heading \"><span>Mobile Web Geo Configuration</span></h5>\n<p>\nLocation services on Mobile Web operate similarly to the simple mode operations on Android. Setting accuracy property to ACCURACY_HIGH yields the best available location updates, with the highest power consumption. Using ACCURACY_LOW provides lower-quality location updates with lower power consumption. In addition to the accuracy setting, there are several Mobile Web-specific settings.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Geolocation configuration on Mobile Web</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Ti.Geolocation.locationServicesEnabled) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.Geolocation.accuracy = Ti.Geolocation.ACCURACY_HIGH;</code></div>\n<div class=\"line\"><code class=\"plain\">\tTi.Geolocation.MobileWeb.maximumLocationAge = </code><code class=\"value\">15000</code><code class=\"plain\">; </code><code class=\"comments\">// in milliseconds</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.Geolocation.addEventListener(</code><code class=\"string\">'location'</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.error) {</code></div>\n<div class=\"line\"><code class=\"plain\">            alert(</code><code class=\"string\">'Error: '</code><code class=\"plain\"> + e.error);</code></div>\n<div class=\"line\"><code class=\"plain\">        } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">            Ti.API.info(e.coords);</code></div>\n<div class=\"line\"><code class=\"plain\">        }</code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">    alert(</code><code class=\"string\">'Please enable location services'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nSee the <a class=\"external-link external-link\" href=\"#!/api/Titanium.Geolocation.MobileWeb\">http://developer.appcelerator.com/apidoc/mobile/latest/Titanium.Geolocation.MobileWeb-module.html</a> for further Mobile Web-specific information.    </p>\n</div>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"29004915_TrackingPositionandHeading-ObtaintheCurrentGPSPosition\">\n<h3 class=\"heading \"><span>Obtain the Current GPS Position</span></h3>\n<p>\nWith your app configured to use the appropriate level of platform-specific geolocation configuration, you're ready to work with location data. Many apps only infrequently need to use location services. Whether it's at app startup, on a button click, or at a timed interval, developers have a multitude of opportunities to actively query for location information.    </p>\n<p>\nLet's take a look at a very basic example. After asserting that location services are enabled, the <tt class=\" \">Ti.Geolocation.getCurrentPosition()</tt> function is used to query for location information. This function takes a single parameter; a callback function whose event object contains the requested location in its <tt class=\" \">coords</tt> property. This is an asynchronous call as the GPS functionality may take a moment to work, especially if this is the first time your app is accessing location. Also worth noting is that the location services might return a cached location (depending on the platform and the configuration choices you have made).    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Ti.Geolocation.locationServicesEnabled) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Titanium.Geolocation.purpose = </code><code class=\"string\">'Get Current Location'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">    Titanium.Geolocation.getCurrentPosition(function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.error) {</code></div>\n<div class=\"line\"><code class=\"plain\">            Ti.API.error(</code><code class=\"string\">'Error: '</code><code class=\"plain\"> + e.error);</code></div>\n<div class=\"line\"><code class=\"plain\">        } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">            Ti.API.info(e.coords);</code></div>\n<div class=\"line\"><code class=\"plain\">        }</code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">    alert(</code><code class=\"string\">'Please enable location services'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nThe output for a successful execution of the above app would look something like this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"accuracy\"</code><code class=\"plain\">: </code><code class=\"value\">100</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"altitude\"</code><code class=\"plain\">: </code><code class=\"value\">0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"altitudeAccuracy\"</code><code class=\"plain\">: </code><code class=\"keyword\">null</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"heading\"</code><code class=\"plain\">: </code><code class=\"value\">0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"latitude\"</code><code class=\"plain\">: </code><code class=\"value\">40.493781233333333</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"longitude\"</code><code class=\"plain\">: -</code><code class=\"value\">80.056671</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"speed\"</code><code class=\"plain\">: </code><code class=\"value\">0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"timestamp\"</code><code class=\"plain\">: </code><code class=\"value\">1318426498331</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004915_TrackingPositionandHeading-ContinuallymonitortheGPSposition\">\n<h3 class=\"heading \"><span>Continually monitor the GPS position</span></h3>\n<p>\nOften you will want to know where a mobile device is at all times. The most common example of this is navigation for driving directions. To have the same constant awareness of a device's position in Titanium, you simply need to register the <tt class=\" \">location</tt> event with the <tt class=\" \">Ti.Geolocation</tt> module.    </p>\n<p>\nHere's a simple case showing how location data can be handled via event listener. You'll notice that the data is handled in a nearly identical manner to the <tt class=\" \">Ti.Geolocation.getCurrentPosition()</tt> example.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Ti.Geolocation.locationServicesEnabled) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Titanium.Geolocation.purpose = </code><code class=\"string\">'Get Current Location'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">    Titanium.Geolocation.addEventListener(</code><code class=\"string\">'location'</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.error) {</code></div>\n<div class=\"line\"><code class=\"plain\">            alert(</code><code class=\"string\">'Error: '</code><code class=\"plain\"> + e.error);</code></div>\n<div class=\"line\"><code class=\"plain\">        } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">            Ti.API.info(e.coords);</code></div>\n<div class=\"line\"><code class=\"plain\">        }</code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">    alert(</code><code class=\"string\">'Please enable location services'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nAs with the <tt class=\" \">Ti.Geolocation.getCurrentPosition()</tt> example, the location data is returned in the event object's <tt class=\" \">coords</tt> property. The listener callback will be executed every time your device detects a new location.    </p>\n<div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\nContinually monitoring the GPS for location will consume a mobile device's battery much faster than usual. Be sure that you actually need to be constantly handling the device's location before using this method. If you do, be sure to remove the <tt class=\" \">location</tt> event listener via <tt class=\" \">Ti.Geolocation.removeEventListener()</tt> when you are not actively using the location information.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004915_TrackingPositionandHeading-AndroidLifecycleEvents\">\n<h4 class=\"heading \"><span>Android Lifecycle Events</span></h4>\n<p>\nWhen monitoring location events continually in Android, apps will continue to receive events even when in the background. As mentioned above, this can be a major drain on the battery life of a mobile device. While this is sometimes the desired behavior, most apps only need location data while active.    </p>\n<p>\nIn order to manage our location events such that we only receive them while our app is active, we need to take advantage of Titanium's access to the Android lifecycle events. There are three events of significance, each of which can be handled via <tt class=\" \">addEventListener()</tt> on the <tt class=\" \">Ti.Android.currentActivity</tt> object:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">destroy</tt> - This event is fired when your activity is destroyed. Location events should <i class=\" \">always</i> be removed in this event.    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">pause</tt> - This event is fired when an activity moves to the background. If you intend to suspend your location data handling when your app is in the background, you need to remove location event listeners in this event.    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">resume</tt> - This event is fired when an activity comes to the foreground. If you previously removed location events in a <tt class=\" \">pause</tt> event, this is where you would add them again to reenable them.    </p>\n</li></ul> <p>\nBelow is a demonstration of how you would handle these events in order to only manage <tt class=\" \">location</tt> events when your app is active. The key part to note is that pausing and resuming your <tt class=\" \">location</tt> event handling is the responsibility of the Android Activity object accessible through the Titanium API as <tt class=\" \">Ti.Android.currentActivity</tt>.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var locationAdded = </code><code class=\"keyword\">false</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">var handleLocation = function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (!e.error) {</code></div>\n<div class=\"line\"><code class=\"plain\">        Ti.API.info(e.coords);</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n<div class=\"line\"><code class=\"plain\">var addHandler = function() {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (!locationAdded) {</code></div>\n<div class=\"line\"><code class=\"plain\">        Ti.Geolocation.addEventListener(</code><code class=\"string\">'location'</code><code class=\"plain\">, handleLocation);</code></div>\n<div class=\"line\"><code class=\"plain\">        locationAdded = </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n<div class=\"line\"><code class=\"plain\">var removeHandler = function() {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (locationAdded) {</code></div>\n<div class=\"line\"><code class=\"plain\">        Ti.Geolocation.removeEventListener(</code><code class=\"string\">'location'</code><code class=\"plain\">, handleLocation);</code></div>\n<div class=\"line\"><code class=\"plain\">        locationAdded = </code><code class=\"keyword\">false</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.Geolocation.accuracy = Ti.Geolocation.ACCURACY_BEST;</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.Geolocation.preferredProvider = Ti.Geolocation.PROVIDER_GPS;</code></div>\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Ti.Geolocation.locationServicesEnabled) {</code></div>\n<div class=\"line\"><code class=\"plain\">    addHandler();</code></div>\n<div class=\"line\"><code class=\"plain\">    var activity = Ti.Android.currentActivity;</code></div>\n<div class=\"line\"><code class=\"plain\">    activity.addEventListener(</code><code class=\"string\">'destroy'</code><code class=\"plain\">, removeHandler);</code></div>\n<div class=\"line\"><code class=\"plain\">    activity.addEventListener(</code><code class=\"string\">'pause'</code><code class=\"plain\">, removeHandler);</code></div>\n<div class=\"line\"><code class=\"plain\">    activity.addEventListener(</code><code class=\"string\">'resume'</code><code class=\"plain\">, addHandler);</code></div>\n<div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">    alert(</code><code class=\"string\">'Please enable location services'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> </div>\n</div>\n<div class=\"section section-3 \" id=\"29004915_TrackingPositionandHeading-UsetheDevice'sCompass\">\n<h3 class=\"heading \"><span>Use the Device's Compass</span></h3>\n<p>\nA mobile device's compass can be used to determine its heading. By using heading, the added dimension of direction can be added to a location based mobile app. With this addition, developers can add features like more robust navigation or even augmented reality.    </p>\n<p>\nJust as with location, Titanium has events and functions for both continual and one-time monitoring of heading. Also, check the API docs for platform-specific configuration information of heading options. For continual monitoring, the <tt class=\" \">heading</tt> event needs to be registered with the <tt class=\" \">Ti.Geolocation</tt> module. In the case of needing only the current heading, a simple call to the <tt class=\" \">Ti.Geolocation.getCurrentHeading()</tt> function is necessary. As you may have noticed, this is very similar to how location is handled.    </p>\n<p>\nThe below includes both of the methods for determining heading mentioned above.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (Ti.Geolocation.locationServicesEnabled) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.Geolocation.purpose = </code><code class=\"string\">'Get Current Heading'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// make a single request for the current heading</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.Geolocation.getCurrentHeading(function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">        Ti.API.info(e.heading);</code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Set 'heading' event for continual monitoring</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.Geolocation.addEventListener(</code><code class=\"string\">'heading'</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.error) {</code></div>\n<div class=\"line\"><code class=\"plain\">            alert(</code><code class=\"string\">'Error: '</code><code class=\"plain\"> + e.error);</code></div>\n<div class=\"line\"><code class=\"plain\">        } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">            Ti.API.info(e.heading);</code></div>\n<div class=\"line\"><code class=\"plain\">        }</code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">    alert(</code><code class=\"string\">'Please enable location services'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nThe console output of your program will contain the heading information, which will be sent continuously from the <tt class=\" \">heading</tt> event. The data for each heading entry will be structured in the following manner.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"accuracy\"</code><code class=\"plain\">: </code><code class=\"value\">3</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"magneticHeading\"</code><code class=\"plain\">: </code><code class=\"value\">34.421875</code><code class=\"plain\">,      </code><code class=\"comments\">// degrees east of magnetic north</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"timestamp\"</code><code class=\"plain\">: </code><code class=\"value\">1318447443692</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"trueHeading\"</code><code class=\"plain\">: </code><code class=\"value\">43.595027923583984</code><code class=\"plain\">, </code><code class=\"comments\">// degrees east of true north</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"type\"</code><code class=\"plain\">: </code><code class=\"string\">\"heading\"</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"x\"</code><code class=\"plain\">: </code><code class=\"value\">34.421875</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"y\"</code><code class=\"plain\">: -</code><code class=\"value\">69.296875</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"z\"</code><code class=\"plain\">: -</code><code class=\"value\">1.140625</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004915_TrackingPositionandHeading-ForwardandReverseGeocoding\">\n<h3 class=\"heading \"><span>Forward and Reverse Geocoding</span></h3>\n<p>\nAnother feature of location services that is built into the Titanium API is geocoding. This is the process of converting an address into a geographic location (forward geocoding), or vice versa (reverse geocoding). For example, let's say we wanted to know the latitude and longitude of the Appcelerator headquarters in Mountain View, California. All we need to do is use the <tt class=\" \">Ti.Geolocation.forwardGeocoder()</tt> function, giving it the address and a callback as parameters. Here's the code:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">Ti.Geolocation.forwardGeocoder(</code><code class=\"string\">'440 Bernardo Ave Mountain View CA'</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info(e);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> <p>\nAnd here is the output of a forward geocoding of Appcelerator HQ. As you can see, it delivers the geographic location of the given address in latitude and longitude.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"accuracy\"</code><code class=\"plain\">: </code><code class=\"value\">1</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"latitude\"</code><code class=\"plain\">: </code><code class=\"value\">37.389071</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"longitude\"</code><code class=\"plain\">: -</code><code class=\"value\">122.050156</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"success\"</code><code class=\"plain\">: </code><code class=\"value\">1</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nNow let's say we just have latitude and longitude and we want to figure out what places of interest are in the area. This case can occur if you accept these coordinates from user input, or if you want to get further information in your <tt class=\" \">location</tt> events. To do so, we use the <tt class=\" \">Ti.Geolocation.reverseGeocoder()</tt> function. To this function we pass a latitude, longitude, and callback function. Let's see what we get when we use the random coordinates (50,50), as in the below sample.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">Ti.Geolocation.reverseGeocoder(</code><code class=\"value\">50</code><code class=\"plain\">, </code><code class=\"value\">50</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info(e);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> <p>\nHere's the output:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"places\"</code><code class=\"plain\">: [</code></div>\n<div class=\"line\"><code class=\"plain\">        {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"address\"</code><code class=\"plain\">: </code><code class=\"string\">\", 418020 Dzhany-Kuduk, , Kazakhstan\"</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"city\"</code><code class=\"plain\">: </code><code class=\"string\">\"Oral\"</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"country\"</code><code class=\"plain\">: </code><code class=\"string\">\"Kazakhstan\"</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"country_code\"</code><code class=\"plain\">: </code><code class=\"string\">\"KZ\"</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"latitude\"</code><code class=\"plain\">: </code><code class=\"value\">50.0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"longitude\"</code><code class=\"plain\">: </code><code class=\"value\">50.0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"street\"</code><code class=\"plain\">: </code><code class=\"string\">\"\"</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"zipcode\"</code><code class=\"plain\">: </code><code class=\"value\">418020</code></div>\n<div class=\"line\"><code class=\"plain\">        }</code></div>\n<div class=\"line\"><code class=\"plain\">    ],</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"string\">\"success\"</code><code class=\"plain\">: </code><code class=\"value\">1</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nWhile the above output shows only one place, you'll notice that the <tt class=\" \">places</tt> property is an array. This means that on any given call to <tt class=\" \">Ti.Gelocation.reverseGeocoder()</tt> you may receive a number of entries in the <tt class=\" \">places</tt> property, if multiple places are found in the area of your query.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004915_TrackingPositionandHeading-References\">\n<h3 class=\"heading \"><span>References</span></h3>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://www.w3.org/TR/geolocation-API/\" target=\"_blank\">W3C Geolocation API specification</a> </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"29004915_TrackingPositionandHeading-Summary\">\n<h2 class=\"heading \"><span>Summary</span></h2>\n<p>\nIn this chapter we learned how we can leverage a mobile device's native location services to add the context of a physical location to our apps. Using Titanium's APIs we are able to proactively query or passively listen for a device's current GPS position and heading. By using the configuration properties found in the <tt class=\" \">Ti.Geolocation</tt> module like <tt class=\" \">accuracy</tt> and <tt class=\" \">distanceFilter</tt> we can further refine a location based experience.    </p>\n<p>\nFinally, we learned how to use additional location based features like forward and reverse geocoding to get even more location details. In the next chapter, we'll learn how we can use the native mapping functionality of mobile devices via the <tt class=\" \">Titanium.Maps</tt> module. We'll be able to take the techniques learned in this chapter and apply them to the next in order to create a visual representation of our location data.    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Tracking Position and Heading"});