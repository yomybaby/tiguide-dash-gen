Ext.data.JsonP['Buffer_Spec']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Buffer Spec</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004749\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004749\"><span>Edit</span></a>\n<h1>Buffer Spec</h1>\n<div class=\"section section-2 \" id=\"29004749_BufferSpec-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Buffer_Spec-section-29004749_BufferSpec-Overview\" Buffer_Spec.html#29004749_BufferSpec-Overview=\"Buffer_Spec.html#29004749_BufferSpec-Overview\">Overview</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Buffer_Spec-section-29004749_BufferSpec-Definitions\" Buffer_Spec.html#29004749_BufferSpec-Definitions=\"Buffer_Spec.html#29004749_BufferSpec-Definitions\">Definitions</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Buffer_Spec-section-29004749_BufferSpec-ProposedTasks\" Buffer_Spec.html#29004749_BufferSpec-ProposedTasks=\"Buffer_Spec.html#29004749_BufferSpec-ProposedTasks\">Proposed Tasks</a> </p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Buffer_Spec-section-29004749_BufferSpec-Ti.Buffer\" Buffer_Spec.html#29004749_BufferSpec-Ti.Buffer=\"Buffer_Spec.html#29004749_BufferSpec-Ti.Buffer\">Ti.Buffer</a> </p>\n</li></ul></li></ul> </div>\n<div class=\"section section-2 \" id=\"29004749_BufferSpec-Overview\">\n<h2 class=\"heading \"><span>Overview</span></h2>\n<p>\nTitanium mobile needs support for binary data operations. A new buffer type needs to be created that will be used for read / write operations on streams.    </p>\n<div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\">\n<p>\n</p>\n<p>\nA separate spec exists that outlines encoding support for  numeric and string values.  The <a class=\"document-link \" href=\"#!/guide/Encoding_Spec\" Encoding_Spec.html=\"Encoding_Spec.html\">Encoding Spec</a> enables the addition of reading and writing of numeric and string values along with support for specific encoding.    </p>\n</div>\n</div>\n<div class=\"section section-2 \" id=\"29004749_BufferSpec-Definitions\">\n<h2 class=\"heading \"><span>Definitions</span></h2>\n<ul class=\" \"><li class=\" \"> <p>\nBuffer - Generally represents temporary storage for data when moving from one location to another (such as reading data off a socket and then writing to a file).  In our case, the buffer will be a container for binary data rather than being limited to only string data.    </p>\n</li></ul> </div>\n<div class=\"section section-2 \" id=\"29004749_BufferSpec-ProposedTasks\">\n<h2 class=\"heading \"><span>Proposed Tasks</span></h2>\n<ul class=\" \"><li class=\" \"> <p>\nCreate Buffer data type for use with Stream IO    </p>\n</li></ul> <div class=\"section section-3 \" id=\"29004749_BufferSpec-Ti.Buffer\">\n<h3 class=\"heading \"><span>Ti.Buffer</span></h3>\n<p>\nIn order to support generic handling of Stream operations, all read / write operations will utilize the new buffer type.  Buffer type will allow for array style access for individual bytes (IE:  myarray[spe:3] = 1)    </p>\n<p>\nCreating buffer object:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// the only creation argument supported is size</code></div>\n<div class=\"line\"><code class=\"plain\">Buffer Ti.createBuffer() </code><code class=\"comments\">// buffer is empty with size 0 if no size is specified</code></div>\n<div class=\"line\"><code class=\"plain\">Buffer Ti.createBuffer({length: x})</code></div>\n</div>\n</div> <p>\nMembers:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">/*</code></div>\n<div class=\"line\"><code class=\"comments\">length is accessed via standard get / set methods.  When length is modified, </code></div>\n<div class=\"line\"><code class=\"comments\">the buffer will be re-sized while preserving existing where possible.  If the new buffer size</code></div>\n<div class=\"line\"><code class=\"comments\">is smaller than the size of the existing data then the existing data will be truncated down to </code></div>\n<div class=\"line\"><code class=\"comments\">the size of the new buffer.</code></div>\n<div class=\"line\"><code class=\"comments\">*/</code></div>\n<div class=\"line\"><code class=\"keyword\">int</code><code class=\"plain\"> length;</code></div>\n</div>\n</div> <p>\nMethods:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// appends specified buffer to the current buffer.  Buffer is grown dynamically to accommodate the </code></div>\n<div class=\"line\"><code class=\"comments\">// additional data if need be.  returns the number of bytes appended</code></div>\n<div class=\"line\"><code class=\"keyword\">int</code><code class=\"plain\"> append(Buffer sourceBuffer)</code></div>\n<div class=\"line\"><code class=\"comments\">// same as normal append except this allows appending only &lt;sourceLength&gt; bytes from the </code></div>\n<div class=\"line\"><code class=\"comments\">// &lt;sourceBuffer&gt; starting at &lt;sourceOffset&gt;. returns the number of bytes appended</code></div>\n<div class=\"line\"><code class=\"keyword\">int</code><code class=\"plain\"> append(Buffer sourceBuffer, </code><code class=\"keyword\">int</code><code class=\"plain\"> sourceOffset, </code><code class=\"keyword\">int</code><code class=\"plain\"> sourceLength)</code></div>\n<div class=\"line\"><code class=\"comments\">// inserts &lt;sourceBuffer&gt; into the current buffer at &lt;offset&gt;.  Buffer is grown to accommodate </code></div>\n<div class=\"line\"><code class=\"comments\">// the new data.  returns the number of bytes inserted</code></div>\n<div class=\"line\"><code class=\"keyword\">int</code><code class=\"plain\"> insert(Buffer sourceBuffer, </code><code class=\"keyword\">int</code><code class=\"plain\"> offset)</code></div>\n<div class=\"line\"><code class=\"comments\">// inserts &lt;sourceLength&gt; amount of data starting at &lt;sourceOffset&gt; from &lt;sourceBuffer&gt; into </code></div>\n<div class=\"line\"><code class=\"comments\">// current buffer at &lt;offset&gt;.  Buffer is grown to accommodate the new data.  returns</code></div>\n<div class=\"line\"><code class=\"comments\">// the number of bytes inserted</code></div>\n<div class=\"line\"><code class=\"keyword\">int</code><code class=\"plain\"> insert(Buffer sourceBuffer, </code><code class=\"keyword\">int</code><code class=\"plain\"> offset, </code><code class=\"keyword\">int</code><code class=\"plain\"> sourceOffset, </code><code class=\"keyword\">int</code><code class=\"plain\"> sourceLength)</code></div>\n<div class=\"line\"><code class=\"comments\">// copies the contents of &lt;sourceBuffer&gt; into the current buffer at &lt;offset&gt;.  will not </code></div>\n<div class=\"line\"><code class=\"comments\">// expand buffer if there is not enough room in the current buffer to accomodate all</code></div>\n<div class=\"line\"><code class=\"comments\">// the requested data from &lt;sourceBuffer&gt;.  returns the number of bytes copied</code></div>\n<div class=\"line\"><code class=\"keyword\">int</code><code class=\"plain\"> copy(Buffer sourceBuffer, </code><code class=\"keyword\">int</code><code class=\"plain\"> offset)</code></div>\n<div class=\"line\"><code class=\"comments\">// copies &lt;sourceLength&gt; contents from &lt;sourceBuffer&gt; starting at &lt;sourceOffset&gt; into the </code></div>\n<div class=\"line\"><code class=\"comments\">// current buffer at &lt;offset&gt;.  will not expand buffer if there is not enough room</code></div>\n<div class=\"line\"><code class=\"comments\">// in the current buffer to accomodate all the request data from &lt;sourceBuffer&gt;.  returns </code></div>\n<div class=\"line\"><code class=\"comments\">// the number of bytes copied</code></div>\n<div class=\"line\"><code class=\"keyword\">int</code><code class=\"plain\"> copy(Buffer sourceBuffer, </code><code class=\"keyword\">int</code><code class=\"plain\"> offset, </code><code class=\"keyword\">int</code><code class=\"plain\"> sourceOffset, </code><code class=\"keyword\">int</code><code class=\"plain\"> sourceLength)</code></div>\n<div class=\"line\"><code class=\"plain\">Buffer clone() </code><code class=\"comments\">// create new copy of the current buffer</code></div>\n<div class=\"line\"><code class=\"comments\">// creates a new buffer from the original buffer contents starting at &lt;offset&gt; </code></div>\n<div class=\"line\"><code class=\"comments\">// and ending at &lt;offset&gt; + &lt;length&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">Buffer clone(</code><code class=\"keyword\">int</code><code class=\"plain\"> offset, </code><code class=\"keyword\">int</code><code class=\"plain\"> length)</code></div>\n<div class=\"line\"><code class=\"keyword\">void</code><code class=\"plain\"> fill(</code><code class=\"keyword\">int</code><code class=\"plain\"> fillByte) </code><code class=\"comments\">// fills buffer with &lt;fillByte&gt;</code></div>\n<div class=\"line\"><code class=\"comments\">// fills buffer starting from &lt;offset&gt; until &lt;length&gt; number of &lt;fillByte&gt; has </code></div>\n<div class=\"line\"><code class=\"comments\">// been written or the end of the buffer is reached</code></div>\n<div class=\"line\"><code class=\"keyword\">void</code><code class=\"plain\"> fill(</code><code class=\"keyword\">int</code><code class=\"plain\"> fillByte, </code><code class=\"keyword\">int</code><code class=\"plain\"> offset, </code><code class=\"keyword\">int</code><code class=\"plain\"> length)</code></div>\n<div class=\"line\"><code class=\"keyword\">void</code><code class=\"plain\"> clear() </code><code class=\"comments\">// clears buffer contents but does not change the size of the buffer</code></div>\n<div class=\"line\"><code class=\"comments\">// releases the space allocated to the buffer, sets length to 0.  This is effectively </code></div>\n<div class=\"line\"><code class=\"comments\">// nothing more than an alias for buffer.length = 0</code></div>\n<div class=\"line\"><code class=\"keyword\">void</code><code class=\"plain\"> release()</code></div>\n<div class=\"line\"><code class=\"plain\">String toString() </code><code class=\"comments\">// converts buffer to string</code></div>\n<div class=\"line\"><code class=\"plain\">Blob toBlob() </code><code class=\"comments\">// converts buffer to TiBlob</code></div>\n</div>\n</div> </div>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Buffer Spec"});