Ext.data.JsonP['Android_Module_Development_Guide']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Android Module Development Guide</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004945\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004945\"><span>Edit</span></a>\n<h1>Android Module Development Guide</h1>\n<p>\n</p>\n<div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\nTarget Audience: To build Modules for Android, you must have knowledge of the Android SDK. This guide assumes you have a good understanding of building applications using the native Android SDK.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004945_AndroidModuleDevelopmentGuide-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n</div>\n<div class=\"section section-2 \" id=\"29004945_AndroidModuleDevelopmentGuide-Overview\">\n<h2 class=\"heading \"><span>Overview</span></h2>\n<p>\nTitanium provides the ability to extend the built-in functionality of the Titanium Mobile SDK through a series of optional extensions, called &quot;modules&quot;. Modules let you write code in a platform's native language (on Android, Java). Through a series of classes and attributes, we can expose new functionality to JavaScript running in the Titanium SDK. (That's a mouthful! From now on, we'll just say &quot;JavaScript&quot;.)    </p>\n<p>\nThis guide will help you create modules for Android. We also have an <a class=\"document-link \" href=\"#!/guide/iOS_Module_Development_Guide\" iOS_Module_Development_Guide.html=\"iOS_Module_Development_Guide.html\">iOS Module Development Guide</a>.    </p>\n<p>\nWe will accomplish the following by the time you finish reading the guide:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nInstalling the necessary components.    </p>\n</li><li class=\" \"> <p>\nCreating an Android module.    </p>\n</li><li class=\" \"> <p>\nUnderstanding the different parts of a module.    </p>\n</li><li class=\" \"> <p>\nImporting a module into Eclipse.    </p>\n</li><li class=\" \"> <p>\nTitanium APIs for module development.    </p>\n</li><li class=\" \"> <p>\nBuilding.    </p>\n</li><li class=\" \"> <p>\nTesting.    </p>\n</li><li class=\" \"> <p>\nDistribution and installation.    </p>\n</li></ul> <p>\n</p>\n<div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\">\n<div class=\"title\">Sample Code</div>\n<p>\nThere are a number of open-source modules available in the Appcelerator <tt class=\" \">titanium_modules</tt> repo:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_modules\" target=\"_blank\">https://github.com/appcelerator/titanium_modules</a> </p>\n</li></ul> <p>\nIn particular, the ModDevGuide module is provided as a complement to this guide.    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_modules/tree/master/moddevguide\" target=\"_blank\">https://github.com/appcelerator/titanium_modules/tree/master/moddevguide</a> </p>\n</li></ul> <p>\nThe modules in the <tt class=\" \">titanium_modules</tt> repo repository can be used for reference, or as starting points for your custom modules.    </p>\n</div>\n<p>\n</p>\n</div>\n<div class=\"section section-2 \" id=\"29004945_AndroidModuleDevelopmentGuide-InstallingtheNecessaryComponents\">\n<h2 class=\"heading \"><span>Installing the Necessary Components</span></h2>\n<p>\nTo develop an Android-based module, you will need all of the following installed on your machine:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nTitanium CLI to create module projects (since Release 3.3.0).    </p>\n</li><li class=\" \"> <p>\nTitanium SDK.    </p>\n</li><li class=\" \"> <p>\nAll of the prerequisites for developing Android applications.    </p>\n</li><li class=\" \"> <p>\nAndroid SDK 2.3.x (API Level 10).  This version must be installed to build an Android module.    </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Installing_the_Android_NDK\" Installing_the_Android_NDK.html=\"Installing_the_Android_NDK.html\">Android NDK</a>. Add an ANDROID_NDK environment variable pointing to the NDK folder.    </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://ant.apache.org/bindownload.cgi\" target=\"_blank\">Ant</a> 1.7.1 or above must be installed and in your system PATH to build from the command line.    </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://www.eclipse.org/downloads\" target=\"_blank\">Eclipse</a> and ADT can be used instead of or in addition to Ant.    </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Installing_gperf\" Installing_gperf.html=\"Installing_gperf.html\">gperf</a> must be installed and in your system PATH.    </p>\n</li></ul> <p>\nSee <a class=\"document-link \" href=\"#!/guide/Installing_Titanium_Advanced_Tools\" Installing_Titanium_Advanced_Tools.html=\"Installing_Titanium_Advanced_Tools.html\">Installing Titanium Advanced Tools</a> for more detailed instructions for installing each of these components.    </p>\n<p>\nYou can use Studio, Ant, or Eclipse to build Android modules. See the <a class=\"document-link \" href=\"#!/guide/Android_Module_Development_Guide-section-29004945_AndroidModuleDevelopmentGuide-BuildingfromStudio\" Android_Module_Development_Guide.html#29004945_AndroidModuleDevelopmentGuide-BuildingfromStudio=\"Android_Module_Development_Guide.html#29004945_AndroidModuleDevelopmentGuide-BuildingfromStudio\">Building from Studio</a>,  <a class=\"document-link \" href=\"#!/guide/Android_Module_Development_Guide-section-29004945_AndroidModuleDevelopmentGuide-BuildingfromtheCommandLinewithAnt\" Android_Module_Development_Guide.html#29004945_AndroidModuleDevelopmentGuide-BuildingfromtheCommandLinewithAnt=\"Android_Module_Development_Guide.html#29004945_AndroidModuleDevelopmentGuide-BuildingfromtheCommandLinewithAnt\">Building with Ant</a> and <a class=\"document-link \" href=\"#!/guide/Building_the_Titanium_SDK_From_Source\" Building_the_Titanium_SDK_From_Source.html=\"Building_the_Titanium_SDK_From_Source.html\">Building from Eclipse</a> sections for more information.    </p>\n<p>\nTo use the legacy command-line interface to create and build modules, you may want to add an alias to <tt class=\" \">titanium.py</tt>. Follow the instructions in the <a class=\"document-link \" href=\"#!/guide/Legacy_Command-Line_Interface\" Legacy_Command-Line_Interface.html=\"Legacy_Command-Line_Interface.html\">Legacy Command-Line Interface</a> Environment Setup section.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004945_AndroidModuleDevelopmentGuide-CreatinganAndroidModule\">\n<h2 class=\"heading \"><span>Creating an Android Module</span></h2>\n<div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-CreatingfromStudio\">\n<h3 class=\"heading \"><span>Creating from Studio</span></h3>\n<p>\nRead the <a class=\"document-link \" href=\"#!/guide/Creating_a_New_Titanium_Module\" Creating_a_New_Titanium_Module.html=\"Creating_a_New_Titanium_Module.html\">Creating a New Titanium Module</a> guide to find out more about creating and building modules with Studio.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-CreatingfromtheTerminal\">\n<h3 class=\"heading \"><span>Creating from the Terminal</span></h3>\n<p>\nStarting with Release 3.3.0, the Titanium CLI can create modules.  Run the <tt class=\" \">titanium create</tt> command without any options.  You will be prompted to enter the required information.  You can also run the <tt class=\" \">titanium create</tt> command with the following options:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">ti create -p android -t module -d &lt;WORKSPACE_DIR&gt; -n &lt;MODULE_NAME&gt; -u &lt;MODULE_URL&gt; --id &lt;MODULE_ID&gt; </code></div>\n<div class=\"line\"><code class=\"plain\">## Sample Command</code></div>\n<div class=\"line\"><code class=\"plain\">ti create -p android -t module -d ~/Documents/Sample_Workspace/ -n calc -u http:</code><code class=\"comments\">// --id org.appcelerator.calc </code></div>\n</div>\n</div> <p>\n<strong class=\" \">Prior to Release 3.3.0:</strong> </p>\n<p>\nTo create a module, use the <tt class=\" \">titanium.py</tt> script and pass some arguments to the <tt class=\" \">titanium create</tt> command, namely:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nThe module's name (<tt class=\" \">$MODULE_NAME</tt>), which most be all lowercase and ID (<tt class=\" \">$MODULE_ID</tt>).    </p>\n</li><li class=\" \"> <p>\nThe platform we're creating a module for (android).    </p>\n</li><li class=\" \"> <p>\nThe top-level path to your installation of the Android SDK ($ANDROID_SDK) (e.g. /opt/android-sdk).    </p>\n</li></ul> <p>\n<tt class=\" \">titanium create</tt> works in your terminal's current directory. Go to the directory you want to create your module in, then customize the following command for the module you want to create. As an example, we will create a module that performs simple addition and subtraction, calling it the &quot;calc&quot; module with an ID of &quot;org.appcelerator.calc&quot;. Here we use <tt class=\" \">/path/to/android-sdk</tt> to point to the place where we extracted the Android SDK.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&gt; titanium.py create --platform=android --type=module --name=calc --id=org.appcelerator.calc --android=/path/to/android-sdk</code></div>\n</div>\n</div> <p>\nIf this was successful, there should be a <tt class=\" \">calc</tt> folder under the current directory. In the next section, we will take a closer look at the files and folders that were created.    </p>\n</div>\n</div>\n<div class=\"section section-2 \" id=\"29004945_AndroidModuleDevelopmentGuide-UnderstandingtheDifferentPartsofaModule\">\n<h2 class=\"heading \"><span>Understanding the Different Parts of a Module</span></h2>\n<p>\nA number of files and directories work together to define our module and what it does. Let's take a quick look at each of them:    </p>\n<div class=\"tablewrap\">\n<table class=\"confluenceTable\">\n<thead class=\" \"></thead><tfoot class=\" \"></tfoot><tbody class=\" \"> <tr>\n<td class=\"highlight confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nFile/Directory    </p>\n</td>\n<td class=\"highlight confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nDescription    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nLICENSE    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nThe module's full license text; this will be distributed with the module to let other developers know how they can use and redistribute it.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nassets/    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nModule specific assets such as images. For more information, open up the README file located in this directory.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\ndocumentation/    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nDocumentation in Markdown format that is shipped with your module after being compiled to HTML.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nexample/    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nThe module example project that will be: 1) used to test the module, and 2) bundled with the module for other developers to reference.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nandroid/build.properties    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nAn Ant properties file that contains paths to the Titanium SDK, Google API add-ons, Android NDK and Android SDK on your computer.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nandroid/build.xml    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nThe main Ant build script used to build, test, and finally distribute the module.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nandroid/lib/    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nPlace any third party JAR dependencies here and they will be bundled up as a part of your module automatically.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nandroid/manifest    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nContains the version, author, license, copyright, name, id, GUID, and platform information for the module.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nandroid/platform/    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nThis optional folder can include an &quot;android&quot; subdirectory, and then any of the resource directories defined in Android's <a class=\"external-link external-link\" href=\"http://developer.android.com/guide/topics/resources/providing-resources.html\" target=\"_blank\">Defining Resources</a> guide (such as &quot;res&quot;).    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nandroid/src/    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nThe source code for the module.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nandroid/timodule.xml    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nA place to put custom activities, and general XML that will end up in the AndroidManifest.xml of apps. Read more about this file in the <a class=\"document-link \" href=\"#!/guide/tiapp.xml_and_timodule.xml_Reference\" tiapp.xml_and_timodule.xml_Reference.html=\"tiapp.xml_and_timodule.xml_Reference.html\">tiapp.xml and timodule.xml reference</a>.    </p>\n</td>\n</tr>\n</tbody> </table>\n</div>\n<p>\nYou can also include an optional <tt class=\" \">jni</tt> folder.  This optional folder (as of Titanium SDK 2.1.0) can include C or C++ code to compile shared libraries. You are required to have an <tt class=\" \">Application.mk</tt> file in this directory if it is present. Modules using JNI or NDK support via shared libraries will work with both the V8 and Rhino runtimes.    </p>\n<div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\nSince Release 3.3.0, the CLI creates a module project that contains multiple platforms. Each platform contains its own folder with platform-specific resources and common folders for <tt class=\" \">assets</tt>, <tt class=\" \">documentation</tt> and <tt class=\" \">example</tt>.    </p>\n<p>\nPrior to Release 3.3.0, none of the previous listed folder are contained in an <tt class=\" \">android</tt> folder.    </p>\n</div>\n<p>\n</p>\n</div>\n<div class=\"section section-2 \" id=\"29004945_AndroidModuleDevelopmentGuide-ImportingaModuleintoEclipse\">\n<h2 class=\"heading \"><span>Importing a Module into Eclipse</span></h2>\n<p>\nWhen we ran titanium create, project settings for Eclipse were created as well. That means we can import the project very easily. In Eclipse, simply follow these steps:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nIn the top level menu, click on <strong class=\" \">File</strong> &gt; <strong class=\" \">Import...</strong> </p>\n</li><li class=\" \"> <p>\nExpand the <strong class=\" \">General</strong> folder, and double click on <strong class=\" \">Existing Project into Workspace.</strong> </p>\n</li><li class=\" \"> <p>\nClick on <strong class=\" \">Browse...</strong> next to the <strong class=\" \">Select root directory</strong> text field.    </p>\n</li><li class=\" \"> <p>\nChoose your module project's folder.  You should see your module project under the <strong class=\" \">Projects</strong> list.    </p>\n<img src=\"images/download/attachments/29004945/eclipse_project_import.jpg\" alt=\"images/download/attachments/29004945/eclipse_project_import.jpg\" class=\"confluence-embedded-image\" />\n</li><li class=\" \"> <p>\nPress <strong class=\" \">Finish</strong> and your module project should now be visible from the <strong class=\" \">Package Explorer</strong> view in Eclipse.    </p>\n</li></ol> </div>\n<div class=\"section section-2 \" id=\"29004945_AndroidModuleDevelopmentGuide-TitaniumAPIsforModuleDevelopment\">\n<h2 class=\"heading \"><span>Titanium APIs for Module Development</span></h2>\n<p>\nThe following sections describe the Titanium APIs available for Android module development, and how to expose an API to JavaScript.    </p>\n<p>\nFor a complete list of the APIs that can be used from an Android module, see the <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/index.html\" target=\"_blank\">Android Module API JavaDoc</a>.For conceptual background on modules, proxies and module development, see <a class=\"document-link \" href=\"#!/guide/Titanium_Module_Concepts\" Titanium_Module_Concepts.html=\"Titanium_Module_Concepts.html\">Titanium Module Concepts</a>.    </p>\n<div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-Modules\">\n<h3 class=\"heading \"><span>Modules</span></h3>\n<p>\nA module is a class that provides an API point with a particular ID. That ID can then be used to <tt class=\" \">require</tt> the module from JavaScript.    </p>\n<p>\nAll modules must extend <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/KrollModule.html\" target=\"_blank\">KrollModule</a> and have the <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/annotations/Kroll.module.html\" target=\"_blank\">@Kroll.module</a> annotation.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">package</code><code class=\"plain\"> com.example.actionbarsearch;</code></div>\n<div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.KrollModule;</code></div>\n<div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.annotations.Kroll;</code></div>\n<div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.titanium.TiApplication;</code></div>\n<div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.common.Log;</code></div>\n<div class=\"line\"><code class=\"keyword\">import</code><code class=\"plain\"> org.appcelerator.kroll.common.TiConfig;</code></div>\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.module(name=</code><code class=\"string\">\"Actionbarsearch\"</code><code class=\"plain\">, id=</code><code class=\"string\">\"com.example.actionbarsearch\"</code><code class=\"plain\">)</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> ActionbarsearchModule </code><code class=\"keyword\">extends</code><code class=\"plain\"> KrollModule</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n</div>\n</div> <p>\nThe <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/annotations/Kroll.module.html#id%28%29\" target=\"_blank\">id</a> annotation element specifies the identifier used with <tt class=\" \">require</tt> to import the module. In this case, the JavaScript to require the module would look like this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var actionBarSearch = require(</code><code class=\"string\">\"com.example.actionbarsearch\"</code><code class=\"plain\">);</code></div>\n</div>\n</div> <p>\nThe module must have a default constructor (that is, one that takes no arguments).    </p>\n<p>\nA module can also have a parent module: <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/ui/src/java/ti/modules/titanium/ui/UIModule.java\" target=\"_blank\">Titanium.UI</a> and <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/app/src/java/ti/modules/titanium/app/AppModule.java\" target=\"_blank\">Titanium.App</a> are children of the <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile/blob/master/android/titanium/src/java/ti/modules/titanium/TitaniumModule.java\" target=\"_blank\">Titanium</a> module.    </p>\n<p>\nThe @Kroll.module annotation can also contain a <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/annotations/Kroll.module.html#propertyAccessors%28%29\" target=\"_blank\">propertyAccessors</a> element, which defines a set of properties exposed by the module. See <a class=\"document-link \" href=\"#!/guide/Android_Module_Development_Guide-section-29004945_AndroidModuleDevelopmentGuide-Properties\" Android_Module_Development_Guide.html#29004945_AndroidModuleDevelopmentGuide-Properties=\"Android_Module_Development_Guide.html#29004945_AndroidModuleDevelopmentGuide-Properties\">Properties</a> for more information.    </p>\n<div class=\"section section-4 \" id=\"29004945_AndroidModuleDevelopmentGuide-ModuleLifecycleEvents\">\n<h4 class=\"heading \"><span>Module Lifecycle Events</span></h4>\n<p>\nThe module provides several places for you to hook into the application's lifecycle.    </p>\n<p class=\"line\">\nUse the @Kroll.onAppCreate annotation to declare a method to be called when the application object is created. This is optional and is only required if you have any application specific initialization, such as starting up a service that is required by the module.    </p>\n<p class=\"line\">\nThe app create method is called during application startup. It is only called once, before your module is actually loaded.    </p>\n<p>\n</p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.onAppCreate</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> onAppCreate(TiApplication app)</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">\tLog.d(LCAT, </code><code class=\"string\">\"[MODULE LIFECYCLE EVENT] onAppCreate notification\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nThe module also provides callbacks that are invoked when the application's root activity is started, stopped, paused, or resumed. For sample usage of these callbacks, see the <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_modules/blob/master/moddevguide/mobile/android/src/ti/moddevguide/ModdevguideModule.java#L72\" target=\"_blank\">lifecycle notices in the sample module</a>.    </p>\n<p>\n</p>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-Proxies\">\n<h3 class=\"heading \"><span>Proxies</span></h3>\n<ul class=\" \"><li class=\" \"> <p>\nProxies can expose methods, properties, and constants to JavaScript. Each of these can be a primitive type, or a proxy.    </p>\n</li></ul><ul class=\" \"><li class=\" \"> <p>\nMust extend  <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/KrollProxy.html\" target=\"_blank\">KrollProxy</a> and have the <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/annotations/Kroll.proxy.html\" target=\"_blank\">@Kroll.proxy</a> annotation.    </p>\n</li><li class=\" \"> <p>\nCan automatically generate a &quot;create&quot; method on a parent module by using the <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/annotations/Kroll.proxy.html#creatableInModule%28%29\" target=\"_blank\">@Kroll.proxy#creatableInModule</a> annotation element. For example, <a class=\"external-link external-link\" href=\"#!/api/Titanium.UI-method-createView\">Titanium.UI.createView()</a> is the result of <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/ui/src/java/ti/modules/titanium/ui/ViewProxy.java#L17\" target=\"_blank\">this annotation on ViewProxy</a>. <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/ui/src/java/ti/modules/titanium/ui/UIModule.java\" target=\"_blank\">UIModule</a> does not define a createView method.    </p>\n</li><li class=\" \"> <p>\nHave built-in event management primarily through <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/KrollProxy.html#fireEvent%28java.lang.String%2C+java.lang.Object%29\" target=\"_blank\">KrollProxy#fireEvent</a> and <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/KrollProxy.html#hasListeners%28java.lang.String%29\" target=\"_blank\">KrollProxy#hasListeners</a>.    </p>\n</li><li class=\" \"> <p>\nWrap native views so JavaScript can interact with them. For example, when you create a native view by calling <a class=\"external-link external-link\" href=\"#!/api/Titanium.UI-method-createView\">Titanium.UI.createView()</a> in JavaScript, the returned object is actually <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/ui/src/java/ti/modules/titanium/ui/ViewProxy.java\" target=\"_blank\">a ViewProxy</a> that connects JavaScript to <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/ui/src/java/ti/modules/titanium/ui/widget/TiView.java\" target=\"_blank\">the TiView</a>.    </p>\n</li></ul> </div>\n<div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-Methods\">\n<h3 class=\"heading \"><span>Methods</span></h3>\n<p>\nMethods of a proxy or module are exposed with the <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/annotations/Kroll.method.html\" target=\"_blank\">@Kroll.method</a> annotation. A simple example:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> String getMessage() {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"string\">\"Hello World\"</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nYou can specify the method parameters in one of two ways:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nSpecify parameters explicitly. In this case, the Kroll layer attempts to validate and convert types before calling the method.    </p>\n</li><li class=\" \"> <p>\nSpecify a single <tt class=\" \">Object[]</tt> argument. Your method must validate parameters and convert types manually at runtime.    </p>\n</li></ul> <p>\nIf you specify parameters explicitly <i class=\" \">and</i> one or more parameters are optional, they must be identified using the @Kroll.argument annotation:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> switchView(</code><code class=\"color1\">@Kroll</code><code class=\"plain\">.argument(optional=</code><code class=\"keyword\">true</code><code class=\"plain\">) </code><code class=\"keyword\">boolean</code><code class=\"plain\"> animate) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// do something.</code></div>\n<div class=\"line\"><code class=\"plain\"> }</code></div>\n</div>\n</div> <p>\nIf one argument is optional, all subsequent arguments must be marked as optional as well.    </p>\n<p>\nSee the <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/annotations/Kroll.method.html\" target=\"_blank\">@Kroll.method</a> JavaDoc for more information.    </p>\n<p>\nFor methods with a variable number of arguments, specify the signature as taking a single array argument, and check the number and type of the arguments at runtime.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> HashMap doSomething(Object[] args) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// check and convert arguments</code></div>\n<div class=\"line\"><code class=\"plain\"> }</code></div>\n</div>\n</div> <p>\nFor information on runtime type checking and type conversions, see <a class=\"document-link \" href=\"#!/guide/Android_Module_Development_Guide-section-29004945_AndroidModuleDevelopmentGuide-TypeConversions\" Android_Module_Development_Guide.html#29004945_AndroidModuleDevelopmentGuide-TypeConversions=\"Android_Module_Development_Guide.html#29004945_AndroidModuleDevelopmentGuide-TypeConversions\">Type Conversions</a>.    </p>\n<p>\nIf you want to the method name exposed to JavaScript to differ from method name in Java, use the optional <tt class=\" \">name</tt> element in the @Kroll.method annotation to specify the JavaScript method name:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method(name=</code><code class=\"string\">\"setTab\"</code><code class=\"plain\">)</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> setTabProxy(TiViewProxy tabProxy)</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\">    setParent(tabProxy);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.tab = tabProxy;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-Properties\">\n<h3 class=\"heading \"><span>Properties</span></h3>\n<p>\nEach proxy object maintains an internal dictionary of properties. Properties can be exposed to JavaScript in one of two ways:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nCreating custom getter and setter methods. When you create a custom getter and setter methods, you can perform data validation, and take actions when the properties are set.    </p>\n</li><li class=\" \"> <p>\nSpecifying a list of properties in the @Kroll.proxy (or  @Kroll.module) annotation. This automatically generates getter and setter methods for each of the named properties.    </p>\n</li></ul> <p>\nWhen you use custom getter and setter methods, you're responsible for storing property values in whatever way you want.    </p>\n<p>\nAuto-generated property accessors store property values in the internal dictionary. The proxy class provides a set of methods for accessing the proxy's property dictionary from Java:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nRetrieve the value of a single property using <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/KrollProxy.html#getProperty%28java.lang.String%29\" target=\"_blank\">getProperty</a>.    </p>\n</li><li class=\" \"> <p>\nSet an individual property using <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/KrollProxy.html#setProperty%28java.lang.String%2C+java.lang.Object%29\" target=\"_blank\">setProperty</a>.    </p>\n</li><li class=\" \"> <p>\nRetrieve the entire dictionary using <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/KrollProxy.html#getProperties%28%29\" target=\"_blank\">getProperties</a>.    </p>\n</li></ul> <p>\nIn addition, you can register a <i class=\" \">model listener</i> &ndash; another Java object that<i class=\" \"> </i>receives updates whenever a value is set in the property dictionary. This pattern is commonly used for views and view proxies.    </p>\n<p>\nUsing custom getter and setter methods is somewhat simpler, and is described first. Subsequent sections describe exposing properties using <tt class=\" \">propertyAccessors</tt>, and responding to property changes using a model listener.    </p>\n<div class=\"section section-4 \" id=\"29004945_AndroidModuleDevelopmentGuide-ExposingPropertiesUsingCustomAccessorMethods\">\n<h4 class=\"heading \"><span>Exposing Properties Using Custom Accessor Methods</span></h4>\n<p>\nProperties are exposed as a pair of getter and setter methods with the <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/annotations/Kroll.getProperty.html\" target=\"_blank\">@Kroll.getProperty</a> and <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/annotations/Kroll.setProperty.html\" target=\"_blank\">@Kroll.setProperty</a> annotations. This method is very straightforward, but involves writing boilerplate code for each property.    </p>\n<p>\nThe following example exposes a writable <tt class=\" \">message</tt> property to JavaScript.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">private</code><code class=\"plain\"> String myMessage;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.getProperty </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> String getMessage() {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> myMessage;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.setProperty </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> setMessage(String message) {</code></div>\n<div class=\"line\"><code class=\"plain\">    Log.d(TAG, </code><code class=\"string\">\"Tried setting message to: \"</code><code class=\"plain\"> + message);</code></div>\n<div class=\"line\"><code class=\"plain\">\tmyMessage = message;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nNote the following two points:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nIf there were no paired @Kroll.setProperty method, the <tt class=\" \">message</tt> property would be read-only.    </p>\n</li><li class=\" \"> <p>\nThe getter and setter methods also have the <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/annotations/Kroll.method.html\" target=\"_blank\">@Kroll.method</a> annotation, which exposes the <tt class=\" \">getMessage</tt> and <tt class=\" \">setMessage</tt> methods to JavaScript.    </p>\n</li><li class=\" \"> <p>\nYou are responsible for storing and retrieving the value. It can be stored in  in an instance variable (as in the example) or in the internal property dictionary.    </p>\n</li></ul> <p>\nIn JavaScript, we can now access <tt class=\" \">message</tt> as a property, <i class=\" \">or</i> by calling <tt class=\" \">setMessage</tt> and <tt class=\" \">getMessage</tt>:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var calc = require(</code><code class=\"string\">\"module.id\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">calc.message = </code><code class=\"string\">\"hi\"</code><code class=\"plain\">; </code><code class=\"comments\">// or</code></div>\n<div class=\"line\"><code class=\"plain\">calc.setMessage(</code><code class=\"string\">\"hi\"</code><code class=\"plain\">);</code></div>\n</div>\n</div> <p>\nThe @Kroll.getProperty and @Kroll.setProperty annotations support an optional <tt class=\" \">name</tt> element, which specifies the name of the property. If name is not set, the name of the property is constr    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004945_AndroidModuleDevelopmentGuide-ExposingPropertiesusingthepropertyAccessorsAnnotationElement\">\n<h4 class=\"heading \"><span>Exposing Properties using the propertyAccessors Annotation Element</span></h4>\n<p>\nYou can also define a a set of properties in your @Kroll.proxy or @Kroll.method annotation using the <tt class=\" \">propertyAccessors</tt> element, and the accessors will be automatically generated for you:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.proxy(creatableInModule = ActionbarsearchModule.</code><code class=\"keyword\">class</code><code class=\"plain\">, </code></div>\n<div class=\"line\"><code class=\"plain\">             propertyAccessors = { </code><code class=\"string\">\"hintText\"</code><code class=\"plain\">, </code><code class=\"string\">\"value\"</code><code class=\"plain\"> })</code></div>\n</div>\n</div> <p>\nIn this case, the proxy has two properties, <tt class=\" \">hintText</tt> and <tt class=\" \">value</tt>, each with corresponding setter and getter methods, such as <tt class=\" \">setHintText</tt> and <tt class=\" \">getValue</tt>. These properties are stored in an internal dictionary. You can query properties using <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/KrollProxy.html#getProperty%28java.lang.String%29\" target=\"_blank\">getProperty</a> or retrieve the entire dictionary using <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/KrollProxy.html#getProperties%28%29\" target=\"_blank\">getProperties</a>.    </p>\n<p>\nWhen you define properties this way, you'll usually want to add a model listener to respond to property changes. When you set a property using the generated getter and setter methods, the model listener is automatically notified.    </p>\n<div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\nIf you define properties using the <tt class=\" \">propertyAccessors</tt> element, you can <strong class=\" \">not</strong> override the accessors by defining custom accessor methods. Doing so causes module packaging to fail with a cryptic error. For each property, you must use <i class=\" \">either</i> <tt class=\" \">propertyAccessors</tt> or custom accessors, but not both.    </p>\n</div>\n</div>\n<div class=\"section section-4 \" id=\"29004945_AndroidModuleDevelopmentGuide-HandlingPropertyChangesusingtheModelListener\">\n<h4 class=\"heading \"><span>Handling Property Changes using the Model Listener</span></h4>\n<p>\nIn most cases, you'll want to <i class=\" \">do something</i> when the property is set. For this reason, you can use a <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/KrollProxyListener.html\" target=\"_blank\">KrollProxyListener</a>, which receives events when the proxy's properties change.    </p>\n<p>\nThe model listener pattern is typically used for views, so that property changes can be delegated from the view proxy to the view object.    </p>\n<p>\nTo add a listener, call the proxy's <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/KrollProxy.html#setModelListener%28org.appcelerator.kroll.KrollProxyListener%29\" target=\"_blank\">setModelListener</a> method:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">setModelListener(delegate);</code></div>\n</div>\n</div> <p>\nIn the case of view proxies, the view object is automatically added as a model listener. An instance of the <tt class=\" \">KrollModule</tt> class acts as its own model listener, providing a convenient mechanism for handling property changes inside a module.    </p>\n<p>\nThe <tt class=\" \">KrollProxyListener</tt> interface defines four methods that you need to implement:    </p>\n<div class=\"tablewrap\">\n<table class=\"confluenceTable\">\n<thead class=\" \"> <tr>\n<td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n<p>\nMethod    </p>\n</td>\n<td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n<p>\nDescription    </p>\n</td>\n</tr>\n</thead><tfoot class=\" \"></tfoot><tbody class=\" \"> <tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nlistenerAdded    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nCalled when an event listener is added to the proxy.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nlistenerRemoved    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nCalled when an event listener is removed from the proxy.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nprocessProperties    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nCalled when the model listener is added, with a complete set of the proxy's properties.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\npropertyChanged    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nCalled when one of the proxy's properties changes.    </p>\n</td>\n</tr>\n</tbody> </table>\n</div>\n<p>\nTo handle properties, you must add logic to <tt class=\" \">processProperties</tt> and <tt class=\" \">propertyChanged</tt> for each property you support. The <tt class=\" \">processProperties</tt> method receives a dictionary of properties:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color1\">@Override</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> processProperties(KrollDict props) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">super</code><code class=\"plain\">.processProperties(props);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (props.containsKey(</code><code class=\"string\">\"hintText\"</code><code class=\"plain\">)) {</code></div>\n<div class=\"line\"><code class=\"plain\">\t    searchView.setQueryHint(props.getString(</code><code class=\"string\">\"hintText\"</code><code class=\"plain\">));\t\t\t</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (props.containsKey(</code><code class=\"string\">\"value\"</code><code class=\"plain\">)) {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tsearchView.setQuery(props.getString(</code><code class=\"string\">\"value\"</code><code class=\"plain\">), </code><code class=\"keyword\">false</code><code class=\"plain\">);\t\t\t</code></div>\n<div class=\"line\"><code class=\"plain\">\t}</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nThe <tt class=\" \">propertyChanged</tt> method is fired whenever a property is invoked <i class=\" \">after</i> the initial call to <tt class=\" \">processProperties</tt>.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color1\">@Override</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> propertyChanged(String key, Object oldValue, Object newValue, KrollProxy proxy) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (key.equals(</code><code class=\"string\">\"hintText\"</code><code class=\"plain\">)) {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tsearchView.setQueryHint((String) newValue);</code></div>\n<div class=\"line\"><code class=\"plain\">\t} </code><code class=\"keyword\">else</code><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (key.equals(</code><code class=\"string\">\"value\"</code><code class=\"plain\">)) {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tsearchView.setQuery((String) newValue, </code><code class=\"keyword\">false</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">\t}</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nYou can set properties programmatically on the proxy using either <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/KrollProxy.html#setProperty%28java.lang.String%2C+java.lang.Object%29\" target=\"_blank\">setProperty</a> or <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/KrollProxy.html#setPropertyAndFire%28java.lang.String%2C+java.lang.Object%29\" target=\"_blank\">setPropertyAndFire</a>. Both methods update the property dictionary and make the new property value visible to JavaScript. The <tt class=\" \">setPropertyAndFire</tt> method also invokes the <tt class=\" \">propertyChanged</tt> callback on the model listener. In the case of a view proxy, you would typically call <tt class=\" \">setProperty</tt> to make a value from the native view object visible to the JavaScript layer: for example, when the user sets the text value in a text field, you want to make the value available to JavaScript<i class=\" \">. </i>There is no need to fire the <tt class=\" \">propertyChanged</tt> callback, since the model listener itself (the view object) is generating the change.    </p>\n<p>\nYou can also use custom accessor methods when using the model listener. In this case, you'd define the property getter and setter methods using the @Kroll.setProperty and @Kroll.getProperty annotations instead of listing the property in the <tt class=\" \">propertyAccessors</tt> element. You can do this if you want to validate or transform the value, or if you want to provide optional arguments in the setter. In the setter, you can then call <tt class=\" \">setPropertyAndFire</tt> to store the value and notify the model listener.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.getProperty </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> String getMessage() {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> getProperty(</code><code class=\"string\">\"message\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.setProperty </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> setMessage(String message) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// validate or transform the value</code></div>\n<div class=\"line\"><code class=\"plain\">    ...</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// store the value and fire the callback</code></div>\n<div class=\"line\"><code class=\"plain\">    setPropertyAndFire(</code><code class=\"string\">\"message\"</code><code class=\"plain\">, message);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nConstants    </p>\n<p>\nA constant is simply a static property on a <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/annotations/Kroll.module.html\" target=\"_blank\">@Kroll.module</a>. Annotate the property with <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/annotations/Kroll.constant.html\" target=\"_blank\">@Kroll.constant</a> and declare it as both <tt class=\" \">static</tt> and <tt class=\" \">final</tt>. Here's an example:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.module</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">class</code><code class=\"plain\"> CalcModule </code><code class=\"keyword\">extends</code><code class=\"plain\"> KrollModule {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"color1\">@Kroll</code><code class=\"plain\">.constant</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">static</code><code class=\"plain\"> </code><code class=\"keyword\">final</code><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> ONE_HUNDRED = </code><code class=\"value\">100</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nThe constant can now be referred to directly from JavaScript:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">calc.ONE_HUNDRED == </code><code class=\"value\">100</code><code class=\"plain\">.</code></div>\n</div>\n</div> </div>\n</div>\n<div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-TypeConversions\">\n<h3 class=\"heading \"><span>Type Conversions</span></h3>\n<p>\nType conversions can be handled implicitly (through a method signature) or you can explicitly cast Objects to the correct types.    </p>\n<p>\nThe <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/titanium/util/TiConvert.html\" target=\"_blank\">TiConvert</a> class provides a set of helper methods for casting Objects to specific types.    </p>\n<p>\nThe JavaScript, Number, String, Array, Date can be converted into the corresponding Java types, either implicitly or explicitly, as shown in the following table:    </p>\n<div class=\"tablewrap\">\n<table class=\"confluenceTable\">\n<thead class=\" \"> <tr>\n<td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n<p>\nJavaScript Type    </p>\n</td>\n<td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n<p>\nJava Type    </p>\n</td>\n<td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n<p>\nExplicit Conversion    </p>\n</td>\n</tr>\n</thead><tfoot class=\" \"></tfoot><tbody class=\" \"> <tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nNumber    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nint    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/titanium/util/TiConvert.html#toInt%28java.lang.Object%29\" target=\"_blank\">TiConvert.toInt</a> </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nNumber    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nfloat    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/titanium/util/TiConvert.html#toFloat%28java.lang.Object%29\" target=\"_blank\">TiConvert.toFloat</a> </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nNumber    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\ndouble    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/titanium/util/TiConvert.html#toDouble%28java.lang.Object%29\" target=\"_blank\">TiConvert.toDouble</a> </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nboolean    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nboolean    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/titanium/util/TiConvert.html#toBoolean%28java.lang.Object%29\" target=\"_blank\">TiConvert.toBoolean</a> </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nString    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nString    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/titanium/util/TiConvert.html#toString%28java.lang.Object%29\" target=\"_blank\">TiConvert.toString</a> or Cast    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nObject    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nHashMap&lt;String, Object&gt;    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nCast    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nArray    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nObject[]    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nCast    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nDate    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nDate    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/titanium/util/TiConvert.html#toDate%28java.lang.Object%29\" target=\"_blank\">TiConvert.toDate</a> or Cast    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nTi.Blob    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nTiBlob    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/titanium/util/TiConvert.html#toBlob%28java.lang.Object%29\" target=\"_blank\">TiConvert.toBlob</a> or Cast    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nTi.Filesystem.File    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nFileProxy    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nCast    </p>\n</td>\n</tr>\n</tbody> </table>\n</div>\n<p>\nFor example, if you declare a method with int values in the signature, the JavaScript Number values passed in will be converted to Java integers implicitly:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> multiply(</code><code class=\"keyword\">int</code><code class=\"plain\"> a, </code><code class=\"keyword\">int</code><code class=\"plain\"> b)</code></div>\n<div class=\"line\"><code class=\"plain\">{ </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> a * b;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nThe same method with explicit type conversion would look like this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> multiply(Object a, Object b)</code></div>\n<div class=\"line\"><code class=\"plain\">{ </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> aval = TiConvert.toInt(a);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">int</code><code class=\"plain\"> bval = TiConvert.toInt(b);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> aval * bval;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <div class=\"section section-4 \" id=\"29004945_AndroidModuleDevelopmentGuide-FilesandBlobs\">\n<h4 class=\"heading \"><span>Files and Blobs</span></h4>\n<p>\nWhen a JavaScript Titanium object is passed to Java, the Java method receives a reference to the associated proxy object. Among the most common of these proxy objects are the File and Blob objects.    </p>\n<p>\nThe Titanium.Blob JavaScript object is represented by an instance of the  <tt class=\" \">TiBlob</tt> class. Use <tt class=\" \">TiBlob</tt> in method signatures where you want to accept or return a Blob.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">void</code><code class=\"plain\"> addBlob(TiBlob blob)\t</code></div>\n</div>\n</div> <p>\nTo return a Blob from Java, create and return an instance of <tt class=\" \">TiBlob</tt>. The <tt class=\" \">TiBlob</tt> class provides factory methods to create a <tt class=\" \">Blob</tt> from a byte array, File, String, or an Android Bitmap. For example, the following excerpt returns a blob representing a bitmap:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"color1\">@Kroll</code><code class=\"plain\">.method</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> TiBlob loadImage()</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> TiBlob.blobFromImage(myBitmap);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nThe ModDevGuide project includes sample code for retrieving a bitmap from resources. See <a class=\"external-link external-link\" href=\"https://github.com/arthurevans/titanium_modules/blob/master/moddevguide/mobile/android/src/ti/moddevguide/ModdevguideModule.java#L165\" target=\"_blank\">ModdevguideModule.java</a>.    </p>\n<p>\nA Titanium File object is passed into Java as a <tt class=\" \">FileProxy</tt>. The <tt class=\" \">ti.modules.titanium.filesystem.FileProxy</tt> class is missing from the 2.0 Module API Reference. However, the <tt class=\" \">TiBaseFile</tt> object is documented and you can easily get an instance of FileProxy given a <tt class=\" \">TiBaseFile</tt>, and vice versa. Many APIs use the <tt class=\" \">TiBaseFile</tt> object internally to manipulate files, and you can easily construct a FileProxy from a TiBaseFile    </p>\n<p>\nThe following example shows one way to create a <tt class=\" \">TiBaseFile</tt> using <tt class=\" \">TiFileFactory</tt>, and use the new instance to construct a <tt class=\" \">FileProxy</tt>:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">TiBaseFile file = TiFileFactory.createTitaniumFile(</code><code class=\"keyword\">new</code><code class=\"plain\"> String[] { url }, </code><code class=\"keyword\">false</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">FileProxy fileProxy = </code><code class=\"keyword\">new</code><code class=\"plain\"> FileProxy(file);</code></div>\n</div>\n</div> <p>\nYou can retrieve the associated <tt class=\" \">TiBaseFile</tt> from a <tt class=\" \">FileProxy</tt> using <tt class=\" \">getBaseFile</tt>:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">TiBaseFile file = fileProxy.getBaseFile();</code></div>\n</div>\n</div> </div>\n</div>\n<div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-AddingViews\">\n<h3 class=\"heading \"><span>Adding Views</span></h3>\n<p>\nViews in Titanium must have two classes:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nThe view proxy: A subclass of <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/titanium/proxy/TiViewProxy.html\" target=\"_blank\">TiViewProxy</a>.    </p>\n<ul class=\" \"><li class=\" \"> <p>\nResponsible for exposing methods and properties of the view to JavaScript (just as a normal proxy would do).    </p>\n</li><li class=\" \"> <p>\nImplements <tt class=\" \"> TiUIView createView(Activity activity) </tt> which returns a new instance of the associated view implementation.    </p>\n</li></ul></li></ul><ul class=\" \"><li class=\" \"> <p>\nThe view implementation: A subclass of <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/titanium/view/TiUIView.html\" target=\"_blank\">TiUIView</a>.    </p>\n<ul class=\" \"><li class=\" \"> <p>\nActs as a model listener for the view proxy.    </p>\n</li><li class=\" \"> <p>\nMust call <tt class=\" \">setNativeView</tt> with an instance of a native Android <a class=\"external-link external-link\" href=\"http://developer.android.com/reference/android/view/View.html\" target=\"_blank\">View</a> either in the constructor, or in <tt class=\" \">processProperties.</tt> </p>\n</li><li class=\" \"> <p>\nThe view implementation is responsible for taking data from the view proxy, and applying it directly to the native <a class=\"external-link external-link\" href=\"http://developer.android.com/reference/android/view/View.html\" target=\"_blank\">View</a> that it exposes.    </p>\n</li></ul></li></ul> <p>\nFor a simple example, see the <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_modules/blob/master/moddevguide/mobile/android/src/ti/moddevguide/DemoViewProxy.java\" target=\"_blank\">DemoViewProxy</a> and <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_modules/blob/master/moddevguide/mobile/android/src/ti/moddevguide/DemoView.java\" target=\"_blank\">DemoView</a> in the <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_modules/tree/master/moddevguide\" target=\"_blank\">ModDevGuide</a> public module.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-GettingtheCurrentActivity\">\n<h3 class=\"heading \"><span>Getting the Current Activity</span></h3>\n<p>\nTo get access to the current activity, first use <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/titanium/TiApplication.html\" target=\"_blank\">TiApplication</a>'s <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/titanium/TiApplication.html#getInstance%28%29\" target=\"_blank\">getInstance()</a> method, and then use the <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/titanium/TiApplication.html#getCurrentActivity%28%29\" target=\"_blank\">getCurrentActivity()</a> method:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">TiApplication appContext = TiApplication.getInstance();</code></div>\n<div class=\"line\"><code class=\"plain\">Activity activity = appContext.getCurrentActivity();</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-PuttingItAllTogether\">\n<h3 class=\"heading \"><span>Putting It All Together</span></h3>\n<p>\nAs part of the initial project creation, Titanium generated two classes that are used in the example/app.js:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nThe module class: <tt class=\" \">src/org/appcelerator/calc/CalcModule.java</tt> </p>\n</li><li class=\" \"> <p>\nAn example proxy class: <tt class=\" \">src/org/appcelerator/calc/ExampleProxy.java</tt> </p>\n</li></ul> <p>\nReview these and the example/app.js to see modules and proxies in action. Look back through the previous sections to make sure you can answer these questions about the example/app.js before moving on:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nWhere is the ID for the module specified? What are the minimum requirements for an object to be a module?    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var calc = require(</code><code class=\"string\">'org.appcelerator.calc'</code><code class=\"plain\">);</code></div>\n</div>\n</div></li></ul><ul class=\" \"><li class=\" \"> <p>\nWhere is the &quot;example&quot; method defined? What is its return type, and what should the label.text contain after this line runs?    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">label.text = calc.example();</code></div>\n</div>\n</div></li></ul><ul class=\" \"><li class=\" \"> <p>\nWhich method in CalcModule will be run when this line executes?    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"module exampleProp is =&gt; \"</code><code class=\"plain\"> + calc.exampleProp);</code></div>\n</div>\n</div></li></ul><ul class=\" \"><li class=\" \"> <p>\nWhich method for this line?    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">calc.exampleProp = </code><code class=\"string\">\"This is a test value\"</code><code class=\"plain\">;</code></div>\n</div>\n</div></li></ul><ul class=\" \"><li class=\" \"> <p>\nWhere is this &quot;createExample&quot; method defined, or how did it get defined?    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var proxy = calc.createExample({</code></div>\n</div>\n</div></li></ul><ul class=\" \"><li class=\" \"> <p>\nWhere are these methods defined?    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">proxy.printMessage(</code><code class=\"string\">\"Hello world!\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">proxy.message = </code><code class=\"string\">\"Hi world!.  It's me again.\"</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">proxy.printMessage(</code><code class=\"string\">\"Hello world!\"</code><code class=\"plain\">);</code></div>\n</div>\n</div></li></ul><ul class=\" \"><li class=\" \"> <p>\nWhen we are adding the proxy to the window, which of our objects is actually getting sent to the &quot;add&quot; method of Window? Can you pinpoint in our main GitHub repository the code that runs when this line executes?    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">window.add(proxy);</code></div>\n</div>\n</div></li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"29004945_AndroidModuleDevelopmentGuide-Building\">\n<h2 class=\"heading \"><span>Building</span></h2>\n<p>\nThe goal of building a module is to get a .zip file that can be included in a Titanium Mobile application. This is how the functionality we exposed gets added to a Titanium Mobile application. With Android modules, these zips are created in the the <tt class=\" \">dist</tt> folder of the module being built.    </p>\n<p>\nThe zip's name will follow this pattern: <tt class=\" \">$MODULE_ID-$PLATFORM-$MODULE_VERSION.zip</tt>.    </p>\n<p>\nThe zip contains:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nA compiled JAR with classes, generated bindings, and resources from the module project (built from the <tt class=\" \">src</tt> folder).    </p>\n</li><li class=\" \"> <p>\nThird-party JARs found in the <tt class=\" \">lib</tt> folder.    </p>\n</li><li class=\" \"> <p>\nThe manifest, which includes deployment metadata such as author, version, license, copyright, etc.    </p>\n</li><li class=\" \"> <p>\nThe timodule.xml.    </p>\n</li><li class=\" \"> <p>\nThe contents of the platform and example folders.    </p>\n</li><li class=\" \"> <p>\nHTML documentation.    </p>\n</li></ul> <div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-BuildingfromStudio\">\n<h3 class=\"heading \"><span>Building from Studio</span></h3>\n<p>\nRead the <a class=\"document-link \" href=\"#!/guide/Creating_a_New_Titanium_Module\" Creating_a_New_Titanium_Module.html=\"Creating_a_New_Titanium_Module.html\">Creating a New Titanium Module</a> guide to find out more about creating and building modules with Studio.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-BuildingfromtheCommandLinewithAnt\">\n<h3 class=\"heading \"><span>Building from the Command Line with Ant</span></h3>\n<p>\nIf <tt class=\" \">ant</tt> is already on your <tt class=\" \">PATH</tt>, then simply execute it from the top level directory of your module.    </p>\n<p>\nOn the first build, you should see output similar to this, and an updated zip file will exist in the &quot;dist&quot; directory:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">$ ant</code></div>\n<div class=\"line\"><code class=\"plain\">Buildfile: /Users/marshall/Code/test/test_modules/calc/build.xml</code></div>\n<div class=\"line\"><code class=\"plain\">init:</code></div>\n<div class=\"line\"><code class=\"plain\">  [mkdir] Created dir: /Users/marshall/Code/test/test_modules/calc/build/classes</code></div>\n<div class=\"line\"><code class=\"plain\">  [mkdir] Created dir: /Users/marshall/Code/test/test_modules/calc/dist</code></div>\n<div class=\"line\"><code class=\"plain\">process.annotations:</code></div>\n<div class=\"line\"><code class=\"plain\">  [javac] Compiling </code><code class=\"value\">2</code><code class=\"plain\"> source files to /Users/marshall/Code/test/test_modules/calc/build/classes</code></div>\n<div class=\"line\"><code class=\"plain\">  [javac] Note: [KrollBindingGen] Running Kroll binding generator.</code></div>\n<div class=\"line\"><code class=\"plain\">  [javac] Note: [KrollBindingGen] No binding data found, creating </code><code class=\"keyword\">new</code><code class=\"plain\"> data file.</code></div>\n<div class=\"line\"><code class=\"plain\">  [javac] Note: [KrollBindingGen] Found binding </code><code class=\"keyword\">for</code><code class=\"plain\"> module Calc</code></div>\n<div class=\"line\"><code class=\"plain\">  [javac] Note: [KrollBindingGen] Found binding </code><code class=\"keyword\">for</code><code class=\"plain\"> proxy Example</code></div>\n<div class=\"line\"><code class=\"plain\">compile:</code></div>\n<div class=\"line\"><code class=\"plain\">  [javac] Compiling </code><code class=\"value\">2</code><code class=\"plain\"> source files to /Users/marshall/Code/test/test_modules/calc/build/classes</code></div>\n<div class=\"line\"><code class=\"plain\">  [copy] Copying </code><code class=\"value\">1</code><code class=\"plain\"> file to /Users/marshall/Code/test/test_modules/calc/build/classes</code></div>\n<div class=\"line\"><code class=\"plain\">dist:</code></div>\n<div class=\"line\"><code class=\"plain\">  [jar] Building jar: /Users/marshall/Code/test/test_modules/calc/dist/calc.jar</code></div>\n<div class=\"line\"><code class=\"plain\">  [zip] Building zip: /Users/marshall/Code/test/test_modules/calc/dist/org.appcelerator.calc-android-</code><code class=\"value\">0.1</code><code class=\"plain\">.zip</code></div>\n<div class=\"line\"><code class=\"plain\">BUILD SUCCESSFUL</code></div>\n<div class=\"line\"><code class=\"plain\">Total time: </code><code class=\"value\">1</code><code class=\"plain\"> second</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-BuildingfromEclipse\">\n<h3 class=\"heading \"><span>Building from Eclipse</span></h3>\n<p>\nIf you don't have <tt class=\" \">ant</tt> in your <tt class=\" \">PATH</tt>, or prefer using Eclipse, just follow these steps to build your module from within Eclipse:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nRight click on <tt class=\" \">build.xml</tt> under your module project.    </p>\n</li><li class=\" \"> <p>\nClick *<strong class=\" \">Run As</strong>* &gt; *<strong class=\" \">Ant Build</strong>* (the first option).    </p>\n</li></ul> <p>\nYou should see output similar to that shown in &quot;Building with Ant from the Terminal&quot;, and an updated zip file will exist in the &quot;dist&quot; directory.    </p>\n</div>\n</div>\n<div class=\"section section-2 \" id=\"29004945_AndroidModuleDevelopmentGuide-TestingandRunning\">\n<h2 class=\"heading \"><span>Testing and Running</span></h2>\n<div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-Testing\">\n<h3 class=\"heading \"><span>Testing</span></h3>\n<p>\nOn Android, there are a number of tools available to help you test and debug your modules: logging and DDMS.    </p>\n<div class=\"section section-4 \" id=\"29004945_AndroidModuleDevelopmentGuide-Logging\">\n<h4 class=\"heading \"><span>Logging</span></h4>\n<p>\nThe <a class=\"external-link external-link\" href=\"http://builds.appcelerator.com.s3.amazonaws.com/module-apidoc/2.0.0/android/org/appcelerator/kroll/common/Log.html\" target=\"_blank\">Log</a> class offers several static methods for writing to the log.    </p>\n<p>\nIt is considered a best practice to define a LCAT or TAG variable at the top of your class, and to use that as the first parameter to all calls to Log. For example, the ModDevGuide module <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_modules/blob/master/moddevguide/mobile/android/src/ti/moddevguide/ModdevguideModule.java#L31\" target=\"_blank\">defines its tag as &quot;ModdevguideModule&quot;</a> and then it uses it in <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/titanium_modules/blob/master/moddevguide/mobile/android/src/ti/moddevguide/ModdevguideModule.java#L84\" target=\"_blank\">various log statements</a>.    </p>\n<p>\nRemember the tag, because we will use it in a moment in DDMS.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004945_AndroidModuleDevelopmentGuide-DDMS\">\n<h4 class=\"heading \"><span>DDMS</span></h4>\n<p>\nDDMS, or Dalvik Debug Monitor Server, is a Google provided app that lets you grab debug information from emulators and connected Android devices.    </p>\n<p>\nRead <a class=\"external-link external-link\" href=\"http://developer.android.com/guide/developing/debugging/ddms.html\" target=\"_blank\">the page on Android.com dedicated to DDMS</a> to get started.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004945_AndroidModuleDevelopmentGuide-Debugging\">\n<h4 class=\"heading \"><span>Debugging</span></h4>\n<p>\nThe best way to debug your Android modules right now is a bit old fashioned. When there is a problem or unexpected behavior in your module, use log statements to trace through your code's execution. Any advancements in debug capabilities will be announced on <a class=\"external-link external-link\" href=\"http://developer.appcelerator.com/blog/\" target=\"_blank\">our developer blog</a>.    </p>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"29004945_AndroidModuleDevelopmentGuide-Running\">\n<h3 class=\"heading \"><span>Running</span></h3>\n<p>\nThe easiest way to get started with the module is to start writing code in the <tt class=\" \">example/app.js</tt> file, and use ant to run and test this code. The example folder is equivalent to the <tt class=\" \">Resources</tt> folder of the application, so feel free to copy data files, images, and other code there for testing purposes.    </p>\n<p>\nThe process for running the example project is simple:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<span style=\"color: #333333;\">\nRun the android emulator once.    </span>\n</p>\n</li><li class=\" \"> <p>\n<span style=\"color: #333333;\">\nOnce the emulator is booted, you can run your example app and module as many times as you like.    </span>\n</p>\n</li><li class=\" \"> <p>\n<span style=\"color: #333333;\">\nAlternatively install the example app directly to a connected Android device.    </span>\n</p>\n</li></ul> <div class=\"section section-4 \" id=\"29004945_AndroidModuleDevelopmentGuide-AvailableAntBuildTargets\">\n<h4 class=\"heading \"><span>Available Ant Build Targets</span></h4>\n<p>\nAnt has what are known as build targets. These are shortcuts to predefined actions. We will talk about how to use them in a moment, but first take a look at this list:    </p>\n<ul class=\" \"><li class=\" \"> <p>\ndist (the default): Compiled a module and generates a .zip file for distribution.    </p>\n</li><li class=\" \"> <p>\nclean: Removes all generated zips and binaries from previous builds.    </p>\n</li><li class=\" \"> <p>\ninstall: Runs the &quot;dist&quot; build target, generates a project using &quot;example&quot; as the &quot;Resources&quot;, and then installs it to a connected Android device.    </p>\n</li><li class=\" \"> <p>\nrun.emulator: Launches an Android emulator for the &quot;run&quot; build target.    </p>\n</li><li class=\" \"> <p>\nrun: Runs the &quot;dist&quot; build target, generates a project using &quot;example&quot; as the &quot;Resources&quot;, and then installs it to a running emulator (hint: use the &quot;run.emulator&quot; target to start up an emulator!).    </p>\n</li></ul> <p>\nNow look at the next section if you want to interact with modules from the terminal, or skip to the next section if you want to use Eclipse. Fear not, you can switch between the two at any time!    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004945_AndroidModuleDevelopmentGuide-RunningAntfromtheTerminal\">\n<h4 class=\"heading \"><span>Running Ant from the Terminal</span></h4>\n<p>\nAnt works with your current directory, so &quot;cd&quot; in to the top directory of your module, then type the following:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">ant run.emulator</code></div>\n</div>\n</div> <p>\nThe emulator will launch, and its output will show in the terminal.    </p>\n<p>\nLook through the other build targets and try them out.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004945_AndroidModuleDevelopmentGuide-RunningAntfromEclipse\">\n<h4 class=\"heading \"><span>Running Ant from Eclipse</span></h4>\n<p>\nTo start the emulator from Eclipse, we need to setup a launch configuration for each ant build target.    </p>\n<p>\nWe will start with run.emulator:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<span style=\"color: #333333;\">\nRight click on     </span>\n<span style=\"color: #333333;\">\n<tt class=\" \">build.xml</tt> </span>\n<span style=\"color: #333333;\">\n, click on *    </span>\n<span style=\"color: #333333;\">\n<strong class=\" \">Run As</strong> </span>\n<span style=\"color: #333333;\">\n* &gt; *    </span>\n<span style=\"color: #333333;\">\n<strong class=\" \">Ant Build...</strong> </span>\n<span style=\"color: #333333;\">\n* (the 2nd option).    </span>\n</p>\n</li><li class=\" \"> <p>\n<span style=\"color: #333333;\">\nA window will open with configuration settings for a new launch configuration.    </span>\n</p>\n</li><li class=\" \"> <p>\n<span style=\"color: #333333;\">\nUnder *    </span>\n<span style=\"color: #333333;\">\n<strong class=\" \">Check targets to execute</strong> </span>\n<span style=\"color: #333333;\">\n<strong class=\" \">, uncheck the **dist</strong> </span>\n<span style=\"color: #333333;\">\n* target, and check the *    </span>\n<span style=\"color: #333333;\">\n<strong class=\" \">run.emulator</strong> </span>\n<span style=\"color: #333333;\">\n* target.    </span>\n</p>\n</li><li class=\" \"> <p>\n<span style=\"color: #333333;\">\nRename the *    </span>\n<span style=\"color: #333333;\">\n<strong class=\" \">Launch Configuration</strong> </span>\n<span style=\"color: #333333;\">\n* to something memorable, such as     </span>\n<span style=\"color: #333333;\">\n<strong class=\" \">run emulator</strong> </span>\n<span style=\"color: #333333;\">\n.    </span>\n</p>\n</li><li class=\" \"> <p>\n<span style=\"color: #333333;\">\nClick *    </span>\n<span style=\"color: #333333;\">\n<strong class=\" \">Apply</strong> </span>\n<span style=\"color: #333333;\">\n<strong class=\" \">, then **Run</strong> </span>\n<span style=\"color: #333333;\">\n*.    </span>\n</p>\n</li><li class=\" \"> <p>\n<span style=\"color: #333333;\">\nFrom now on you can run the *    </span>\n<span style=\"color: #333333;\">\n<strong class=\" \">Launch Configuration</strong> </span>\n<span style=\"color: #333333;\">\n* from *    </span>\n<span style=\"color: #333333;\">\n<strong class=\" \">External Tools</strong> </span>\n<span style=\"color: #333333;\">\n* menu in *    </span>\n<span style=\"color: #333333;\">\n<strong class=\" \">Run</strong> </span>\n<span style=\"color: #333333;\">\n*, or the toolbar entry.    </span>\n</p>\n</li></ul> <p>\nNow that you have set up run.emulator, also set one up for run and install.    </p>\n<p>\nThe configurations you set up will be quickly accessible through the Run drop down:    </p>\n<p>\n<img src=\"images/download/attachments/29004945/external_tools_toolbar.jpg\" alt=\"images/download/attachments/29004945/external_tools_toolbar.jpg\" class=\"confluence-embedded-image\" />\n</p>\n</div>\n<div class=\"section section-4 \" id=\"29004945_AndroidModuleDevelopmentGuide-RunningtheExampleProject\">\n<h4 class=\"heading \"><span>Running the Example Project</span></h4>\n<p>\nOnce the emulator is up and running (through the &quot;run.emulator&quot; build target), the example can be run in it. In the last section, you saw how to use build targets. Do &quot;ant run&quot; now to see your app launch in the emulator! (Hint: make sure you unlock the emulator)    </p>\n<p>\nNote that instead of running the emulator, you can &quot;ant install&quot; the example app directly to a connected device. You will see a message in the console after the app successfully installs to look for it in your app tray (you must launch the app manually).    </p>\n<p>\nYou should see a default &quot;hello world&quot; app, such as the following:    </p>\n<p>\n<img src=\"images/download/attachments/29004945/example_project_first_run.jpg\" alt=\"images/download/attachments/29004945/example_project_first_run.jpg\" class=\"confluence-embedded-image\" />\n</p>\n</div>\n<div class=\"section section-4 \" id=\"29004945_AndroidModuleDevelopmentGuide-Help!*Run*TimesOutTryingtoFindtheEmulator!\">\n<h4 class=\"heading \"><span>Help! *Run* Times Out Trying to Find the Emulator!</span></h4>\n<p>\nIf the *<strong class=\" \">run</strong>* target times out trying to find the emulator, then the ADB server needs to be restarted. Run the following two commands, replacing $ANDROID_SDK with the path to your Android SDK.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">$ $ANDROID_SDK/tools/adb kill-server</code></div>\n<div class=\"line\"><code class=\"plain\">$ $ANDROID_SDK/tools/adb start-server</code></div>\n</div>\n</div> </div>\n</div>\n</div>\n<div class=\"section section-2 \" id=\"29004945_AndroidModuleDevelopmentGuide-ModuleDistributionandInstallation\">\n<h2 class=\"heading \"><span>Module Distribution and Installation</span></h2>\n<p>\nTo use this new module in a Titanium Mobile app, read the <a class=\"document-link \" href=\"#!/guide/Using_Titanium_Modules\" Using_Titanium_Modules.html=\"Using_Titanium_Modules.html\">Using Titanium Modules</a> guide.    </p>\n<p>\nAt the end of the <a class=\"document-link \" href=\"#!/guide/Creating_a_New_Titanium_Module\" Creating_a_New_Titanium_Module.html=\"Creating_a_New_Titanium_Module.html\">Creating a New Titanium Module</a> guide are bullet points to help with using the <a class=\"external-link external-link\" href=\"https://marketplace.appcelerator.com/home\" target=\"_blank\">Open Mobile Marketplace</a>.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004945_AndroidModuleDevelopmentGuide-Appendix:BuildingJavaScriptNativeModules\">\n<h2 class=\"heading \"><span>Appendix: Building JavaScript Native Modules</span></h2>\n<p>\nBeginning in Titanium Mobile SDK 2.0.0, we also support the ability to package a CommonJS module as a Titanium Android module. Up until now, we've talked only about fully native modules. Let's now talk about JavaScript modules.    </p>\n<p>\nSometimes you want to create a native module but implement them written in JavaScript and distribute them as compiled modules. In Titanium, you would write your module code in a file named &quot;&lt;module_id&gt;.js&quot; in your &quot;assets&quot; directory. Using our sample project, this would be &quot;org.appcelerator.calc.js&quot;.    </p>\n<p>\nThe module file must use the CommonJS format for declaring a module and it's exports. Let's start with a very simple example that defines one property and one function:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">exports.addition = function(x, y)</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> (x + y);</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n</div>\n</div> <p>\nCopy this code into a new file named &quot;org.appcelerator.calc.js&quot; under the &quot;assets&quot; folder.    </p>\n<p>\nNow, here is some test application code to use the module. Put this in an app.js:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var calc = require(</code><code class=\"string\">'org.appcelerator.calc'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">var result = calc.addition(</code><code class=\"value\">5</code><code class=\"plain\">, </code><code class=\"value\">6</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">alert(</code><code class=\"string\">\"5 + 6 = \"</code><code class=\"plain\"> + result);</code></div>\n</div>\n</div> <p>\nCommonJS allows you to cleanly export one or more properties/functions by defining them to the special &quot;exports&quot; object (which is pre-defined before loading your module). Any methods or properties defined outside of the &quot;exports&quot; object will be considered module scoped and won't be visible outside of the module.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&gt; titanium.py create --platform=android --type=module --name=$MODULE_NAME --id=$MODULE_ID --android=$ANDROID_SDK</code></div>\n</div>\n</div> </div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Android Module Development Guide"});