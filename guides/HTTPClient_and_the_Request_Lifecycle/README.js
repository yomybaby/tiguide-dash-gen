Ext.data.JsonP['HTTPClient_and_the_Request_Lifecycle']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>HTTPClient and the Request Lifecycle</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004904\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004904\"><span>Edit</span></a>\n<h1>HTTPClient and the Request Lifecycle</h1>\n<div class=\"section section-2 \" id=\"29004904_HTTPClientandtheRequestLifecycle-Objective\">\n<h2 class=\"heading \"><span>Objective</span></h2>\n<p>\nIn this chapter, you will learn how to access and interact with remote servers via the HTTP protocol. You will also examine the XHLHTTPRequest (XHR) lifecycle and how it is implemented within Titanium.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004904_HTTPClientandtheRequestLifecycle-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<p>\nYour Titanium application can interact with remote servers over <a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\" target=\"_blank\">HTTP</a> using the <a class=\"external-link external-link\" href=\"#!/api/Titanium.Network.HTTPClient\">Ti.Network.HTTPClient object</a>. Titanium's HTTPClient API mirrors that of the XMLHTTPRequest object in the web browser, so if you have done any Ajax programming in the browser (outside of libraries like Dojo or jQuery, which use XMLHTTPRequest), HTTPClient will be familiar to you.    </p>\n<div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\nWith Mobile Web apps, in order to access cross-domain resources (resources not on the server that hosts your Mobile Web pages) you must either enable CORS header support on your web server or configure a proxy service on your web server and define a custom Ti.Network.httpURLFormatter. A good guide on CORS is available from <a class=\"external-link external-link\" href=\"https://developer.mozilla.org/en/HTTP_access_control\" target=\"_blank\">Mozilla.org</a>.    </p>\n</div>\n<p>\nAs shown in the code example below, you declare an <tt class=\" \">HTTPClient</tt> object and pass to it a number of parameters. Of these, the most critical is the <tt class=\" \">onload</tt> callback function. It is the function called when data is returned and available for use. The <tt class=\" \">onerror</tt> callback function is called when there's a network error, such as a timeout.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Ti.Network.HTTPClient skeleton</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var url = </code><code class=\"string\">\"https://www.appcelerator.com\"</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">var xhr = Ti.Network.createHTTPClient({</code></div>\n<div class=\"line\"><code class=\"plain\">    onload: function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// this function is called when data is returned from the server and available for use</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// this.responseText holds the raw text return of the message (used for text/JSON)</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// this.responseXML holds any returned XML (including SOAP)</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// this.responseData holds any returned binary data</code></div>\n<div class=\"line\"><code class=\"plain\">        Ti.API.debug(</code><code class=\"keyword\">this</code><code class=\"plain\">.responseText);</code></div>\n<div class=\"line\"><code class=\"plain\">        alert(</code><code class=\"string\">'success'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    },</code></div>\n<div class=\"line\"><code class=\"plain\">    onerror: function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// this function is called when an error occurs, including a timeout</code></div>\n<div class=\"line\"><code class=\"plain\">        Ti.API.debug(e.error);</code></div>\n<div class=\"line\"><code class=\"plain\">        alert(</code><code class=\"string\">'error'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    },</code></div>\n<div class=\"line\"><code class=\"plain\">    timeout:</code><code class=\"value\">5000</code><code class=\"plain\"> </code><code class=\"comments\">/* in milliseconds */</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">xhr.open(</code><code class=\"string\">\"GET\"</code><code class=\"plain\">, url);</code></div>\n<div class=\"line\"><code class=\"plain\">xhr.send();  </code><code class=\"comments\">// request is actually sent with this statement</code></div>\n</div>\n</div> <p>\nIt is possible to use HTTPClient to interact with many popular types of web services, but the easiest form to work with are REST-style web services. Defining and explaining RESTful web services is beyond the scope of this guide, but <a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer\" target=\"_blank\">you can learn more about REST here</a>. For our purposes, it is sufficient to understand that a 'resource' is some bit of data on the web, identified by a <a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Identifier\" target=\"_blank\">URI</a>. Most commonly, your mobile application will interact with this data on the web using HTTP GET or POST requests (though the full range of HTTP verbs are supported by HTTPClient: GET, POST, PUT, and DELETE).    </p>\n<p>\nThe handling of network communication is handled asynchronously. Mobile data networks are less reliable and consistently available than office or home Internet connections. You would not want your application to hang while waiting on an HTTP request to return.    </p>\n<div class=\"section section-3 \" id=\"29004904_HTTPClientandtheRequestLifecycle-GETrequests\">\n<h3 class=\"heading \"><span>GET requests</span></h3>\n<p>\nMaking a GET (or any other type of) request to a resource on the web consists of three steps:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nCreating an HTTP Client (starts on line 2 in the code above)    </p>\n</li><li class=\" \"> <p>\nOpening an HTTP connection to a specified resource (line 18)    </p>\n</li><li class=\" \"> <p>\nSending an HTTP request (line 19)    </p>\n</li></ul> <p>\nMost of the time, simply sending the request is not useful to your application. You are likely interested in the data the server will respond with, which is available in the response body. In order to access this data, you can specify callback functions to be executed at specific points in the lifecycle of the request. As shown in the code above, <tt class=\" \">onload</tt> is called after a response from the resource has been successfully received, and <tt class=\" \">oneerror</tt> is called if there is an error.    </p>\n<p>\nWithin those callback functions:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">this.responseText</tt> holds the returned payload as raw text    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">this.responseXML</tt> holds the payload as an <a class=\"external-link external-link\" href=\"#!/api/Titanium.XML.DOMDocument\">XML document</a> instance    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">this.responseData</tt> holds the payload as a BLOB (binary data)    </p>\n</li></ul> </div>\n<div class=\"section section-3 \" id=\"29004904_HTTPClientandtheRequestLifecycle-POSTrequests\">\n<h3 class=\"heading \"><span>POST requests</span></h3>\n<p>\nOften you will need to send data to the server in the body of your request, as you would in a standard HTML form. This is typically accomplished via a POST (or PUT) request. Titanium provides an easy way of sending along a POST body with a request, automatically serializing JavaScript object graphs into form-encoded POST parameters:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var xhr = Ti.Network.createHTTPClient();</code></div>\n<div class=\"line\"><code class=\"plain\">xhr.onload = function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//handle response, which at minimum will be an HTTP status code</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n<div class=\"line\"><code class=\"plain\">xhr.open(</code><code class=\"string\">'POST'</code><code class=\"plain\">,</code><code class=\"string\">'http://www.myblog.com/post.php'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">xhr.send({</code></div>\n<div class=\"line\"><code class=\"plain\">\ttitle:</code><code class=\"string\">'My awesome blog'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tbody:</code><code class=\"string\">'Today I met Susy at the laundromat.  Best day EVAR\\!'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> <p>\nYou can also send arbitrary string data as the body of your post by passing a string to <tt class=\" \">send</tt>:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">xhr.send(</code><code class=\"string\">'&lt;some&gt;&lt;xml&gt;&lt;data&gt;&lt;/data&gt;&lt;/xml&gt;&lt;/some&gt;'</code><code class=\"plain\">);</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004904_HTTPClientandtheRequestLifecycle-HTTPheaders\">\n<h3 class=\"heading \"><span>HTTP headers</span></h3>\n<p>\nIt is often necessary to manually add HTTP headers to your requests. This can be accomplished easily by using the <tt class=\" \">setRequestHeader</tt> function on HTTPClient. <strong class=\" \">NOTE: HTTP Headers must be set AFTER client.open(), but before client.send(), as below:</strong> </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var client = Ti.Network.createHTTPClient();</code></div>\n<div class=\"line\"><code class=\"plain\">client.open(</code><code class=\"string\">'POST'</code><code class=\"plain\">,</code><code class=\"string\">'http://someserver.com/files/new'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">client.setRequestHeader(</code><code class=\"string\">'Content-Type'</code><code class=\"plain\">,</code><code class=\"string\">'text/csv'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">client.send(</code><code class=\"string\">'foo,bar,foo,bar'</code><code class=\"plain\">);</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004904_HTTPClientandtheRequestLifecycle-XHRlifecycle\">\n<h3 class=\"heading \"><span>XHR lifecycle</span></h3>\n<p>\n<tt class=\" \">HTTPClient</tt> implements the <a class=\"external-link external-link\" href=\"http://www.w3.org/TR/XMLHttpRequest/#states\" target=\"_blank\">five XHR ready states</a> defined by the W3 specification. Should you need to, your app can react to these state changes with the <tt class=\" \">onreadystatechange</tt> callback. The five states are:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nUNSENT (numeric value 0) &ndash; The object has been constructed. Titanium doesn't report on this state with the <tt class=\" \">onreadystatechange</tt> handler.    </p>\n</li><li class=\" \"> <p>\nOPENED (numeric value 1) &ndash; The open() method has been successfully invoked. During this state request headers can be set using setRequestHeader() and the request can be made using the send() method.    </p>\n</li><li class=\" \"> <p>\nHEADERS_RECEIVED (numeric value 2) &ndash; All redirects (if any) have been followed and all HTTP headers of the final response have been received. Several response members of the object are now available.    </p>\n</li><li class=\" \"> <p>\nLOADING (numeric value 3) &ndash; The response entity body is being received.    </p>\n</li><li class=\" \"> <p>\nDONE (numeric value 4) &ndash; The data transfer has been completed or something went wrong during the transfer (e.g. infinite redirects).    </p>\n</li></ul> <p>\nIn code, it would look like this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Monitoring ready state changes</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var xhr = Ti.Network.createHTTPClient({</code></div>\n<div class=\"line\"><code class=\"plain\">    onload: function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// function called in readyState DONE (4)</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tTi.API.info(</code><code class=\"string\">'onload called, readyState = '</code><code class=\"plain\">+</code><code class=\"keyword\">this</code><code class=\"plain\">.readyState);</code></div>\n<div class=\"line\"><code class=\"plain\">    },</code></div>\n<div class=\"line\"><code class=\"plain\">    onerror: function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// function called in readyState DONE (4)</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tTi.API.info(</code><code class=\"string\">'onerror called, readyState = '</code><code class=\"plain\">+</code><code class=\"keyword\">this</code><code class=\"plain\">.readyState);</code></div>\n<div class=\"line\"><code class=\"plain\">    },</code></div>\n<div class=\"line\"><code class=\"plain\">    ondatastream: function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// function called as data is downloaded</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tTi.API.info(</code><code class=\"string\">'ondatastream called, readyState = '</code><code class=\"plain\">+</code><code class=\"keyword\">this</code><code class=\"plain\">.readyState);</code></div>\n<div class=\"line\"><code class=\"plain\">    },</code></div>\n<div class=\"line\"><code class=\"plain\">    onsendstream: function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// function called as data is uploaded</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tTi.API.info(</code><code class=\"string\">'onsendstream called, readyState = '</code><code class=\"plain\">+</code><code class=\"keyword\">this</code><code class=\"plain\">.readyState);</code></div>\n<div class=\"line\"><code class=\"plain\">    },</code></div>\n<div class=\"line\"><code class=\"plain\">\tonreadystatechange: function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">switch</code><code class=\"plain\">(</code><code class=\"keyword\">this</code><code class=\"plain\">.readyState) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">case</code><code class=\"plain\"> </code><code class=\"value\">0</code><code class=\"plain\">:</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// after HTTPClient declared, prior to open()</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// though Ti won't actually report on this readyState</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\tTi.API.info(</code><code class=\"string\">'case 0, readyState = '</code><code class=\"plain\">+</code><code class=\"keyword\">this</code><code class=\"plain\">.readyState);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">break</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">case</code><code class=\"plain\"> </code><code class=\"value\">1</code><code class=\"plain\">:</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// open() has been called, now is the time to set headers</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\tTi.API.info(</code><code class=\"string\">'case 1, readyState = '</code><code class=\"plain\">+</code><code class=\"keyword\">this</code><code class=\"plain\">.readyState);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">break</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">case</code><code class=\"plain\"> </code><code class=\"value\">2</code><code class=\"plain\">:</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// headers received, xhr.status should be available now</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\tTi.API.info(</code><code class=\"string\">'case 2, readyState = '</code><code class=\"plain\">+</code><code class=\"keyword\">this</code><code class=\"plain\">.readyState);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">break</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">case</code><code class=\"plain\"> </code><code class=\"value\">3</code><code class=\"plain\">:</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// data is being received, onsendstream/ondatastream being called now</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\tTi.API.info(</code><code class=\"string\">'case 3, readyState = '</code><code class=\"plain\">+</code><code class=\"keyword\">this</code><code class=\"plain\">.readyState);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">break</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">case</code><code class=\"plain\"> </code><code class=\"value\">4</code><code class=\"plain\">:</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// done, onload or onerror should be called now</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\tTi.API.info(</code><code class=\"string\">'case 4, readyState = '</code><code class=\"plain\">+</code><code class=\"keyword\">this</code><code class=\"plain\">.readyState);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">break</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t}</code></div>\n<div class=\"line\"><code class=\"plain\">\t},</code></div>\n<div class=\"line\"><code class=\"plain\">    timeout:</code><code class=\"value\">5000</code><code class=\"plain\"> </code><code class=\"comments\">/* in milliseconds */</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">xhr.open(</code><code class=\"string\">\"GET\"</code><code class=\"plain\">, </code><code class=\"string\">'http://training.appcelerator.com.s3.amazonaws.com/atp_doc.pdf'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">xhr.send();  </code><code class=\"comments\">// request is actually sent with this statement</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004904_HTTPClientandtheRequestLifecycle-Hands-onPractice\">\n<h3 class=\"heading \"><span>Hands-on Practice</span></h3>\n<div class=\"section section-4 \" id=\"29004904_HTTPClientandtheRequestLifecycle-Goal\">\n<h4 class=\"heading \"><span>Goal</span></h4>\n<p>\nIn this activity, you will write an app that downloads and displays an image from a remote web URL using the HTTPClient object.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004904_HTTPClientandtheRequestLifecycle-Resources\">\n<h4 class=\"heading \"><span>Resources</span></h4>\n<p>\nTo perform the steps in this activity, you will need to reference the HTTPClient API docs at <a class=\"external-link external-link\" href=\"#!/api/Titanium.Network.HTTPClient\">http://developer.appcelerator.com/apidoc/mobile/latest/Titanium.Network.HTTPClient-object.html</a>. You will also need a working internet connection on your simulator/emulator or test device.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004904_HTTPClientandtheRequestLifecycle-Steps\">\n<h4 class=\"heading \"><span>Steps</span></h4>\n<ol class=\" \"><li class=\" \"> <p>\nCreate a new Titanium Mobile project.    </p>\n</li><li class=\" \"> <p>\nIn app.js, declare an HTTPClient object with a name of your choosing. It will <tt class=\" \">GET</tt> the image at <a class=\"external-link external-link\" href=\"http://developer.appcelerator.com/assets/img/DEV_appteam_photo.png\" target=\"_blank\">http://developer.appcelerator.com/assets/img/DEV_appteam_photo.png</a> </p>\n</li><li class=\" \"> <p>\nWrite an onload callback for your HTTPClient that will perform these operations:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nLog the HTTP status code to the console. See the API docs for the correct property to use to access the status code.    </p>\n</li><li class=\" \"> <p>\nDefine an ImageView object whose image property is set equal to the binary data returned from the network.    </p>\n</li><li class=\" \"> <p>\nAdd that ImageView object to the <tt class=\" \">win1</tt> window so that it will be displayed.    </p>\n</li></ul></li><li class=\" \"> <p>\nWrite an onerror callback for your HTTPClient that will perform these operations:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nLog the HTTP status code to the console.    </p>\n</li><li class=\" \"> <p>\nDisplay the contents of the error message in an <tt class=\" \">alert()</tt> dialog.    </p>\n</li></ul></li><li class=\" \"> <p>\nMake sure to open and then send the request.    </p>\n</li><li class=\" \"> <p>\nBuild and test your app. The photo should be displayed on the first tab after it is downloaded.    </p>\n</li></ol> </div>\n</div>\n<div class=\"section section-3 \" id=\"29004904_HTTPClientandtheRequestLifecycle-ReferencesandFurtherReading\">\n<h3 class=\"heading \"><span>References and Further Reading</span></h3>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://assets.appcelerator.com.s3.amazonaws.com/app_u/ebook/6.1_httpclient.zip\" target=\"_blank\">Finished code</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"#!/api/Titanium.Network.HTTPClient\">HTTPClient API docs</a> </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"29004904_HTTPClientandtheRequestLifecycle-Summary\">\n<h2 class=\"heading \"><span>Summary</span></h2>\n<p>\nIn this chapter, you learned learned that Titanium implements the XHLHTTPRequest (XHR) via the <tt class=\" \">HTTPClient</tt> module. You used that module to access and interact with remote servers over HTTP. You also examined the XHR lifecycle and how it is implemented within Titanium.    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"HTTPClient and the Request Lifecycle"});