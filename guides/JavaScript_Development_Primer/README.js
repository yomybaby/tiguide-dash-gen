Ext.data.JsonP['JavaScript_Development_Primer']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>JavaScript Development Primer</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004886\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004886\"><span>Edit</span></a>\n<h1>JavaScript Development Primer</h1>\n<div class=\"section section-2 \" id=\"29004886_JavaScriptDevelopmentPrimer-Objective\">\n<h2 class=\"heading \"><span>Objective</span></h2>\n<p>\nIn this section, you will take a brief look at JavaScript development and the resources you might explore to expand your JavaScript skills.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004886_JavaScriptDevelopmentPrimer-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<p>\nJavaScript is a powerful, lightweight and dynamic object-oriented programming language. It is one of the most widely deployed in the world, being shipped with almost every web browser, giving it a good pedigree for cross-platform client development. It is leveraged by some of the largest and diverse communities of programmers, meaning there is never likely to be a shortage of skills. These are just some of the reasons that support why JavaScript was chosen as the language of choice  for Titanium.    </p>\n<p>\nWhile Javascript's popularity stems from its strong web browser presence, it has become much more than a tool for web interactivity. Many people are building servers, games, productivity tools and every other type of app conceivable with Javascript. Here's a short list of what Javascript has been doing lately.    </p>\n<ul class=\" \"><li class=\" \"> <p>\nNearly every web browser supports JavaScript; most supporting one of the standardized ECMAScript versions    </p>\n</li><li class=\" \"> <p>\nnode.js is an event-driven server-side JavaScript implementation, supporting asynchronous I/O for high performance web applications    </p>\n</li><li class=\" \"> <p>\nActionScript is a superset of ECMAScript, originally developed by Macromedia (now part of Adobe) for scripting Flash animations)    </p>\n</li><li class=\" \"> <p>\nOpenOffice supports JavaScript (among other languages) for scripting the suite's applications    </p>\n</li><li class=\" \"> <p>\nVarious supersets of JavaScript or higher-level languages seek to standardize programming patterns, add advanced features, and so forth. Systems like CoffeeScript, Objective-J, Quby, and more &quot;compile&quot; to JavaScript for broadest possible support in the web browser    </p>\n</li><li class=\" \"> <p>\nTitanium Mobile is, of course, a JavaScript framework for mobile app development (see <a class=\"document-link \" href=\"#!/guide/ECMA-262-5_Compliance\" ECMA-262-5_Compliance.html=\"ECMA-262-5_Compliance.html\">ECMA-262-5 Compliance</a> for more info on language support and standards compliance).    </p>\n</li></ul> <p>\nHere are a few of the features of the language that make it a favorite among its developers:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nDynamic typing (which allows <a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/Duck_typing\" target=\"_blank\">Duck typing</a>)    </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/Functional_programming\" target=\"_blank\">Functional programming</a> </p>\n</li><li class=\" \"> <p>\nConvenient object literal notation    </p>\n</li><li class=\" \"> <p>\nA small set of standard functions and syntactical elements - learn the whole language in a day!    </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/Closure_(computer_science)\" target=\"_blank\">Closures</a> </p>\n</li></ul> <div class=\"section section-3 \" id=\"29004886_JavaScriptDevelopmentPrimer-JavaScriptResources\">\n<h3 class=\"heading \"><span>JavaScript Resources</span></h3>\n<p>\nJavaScript can be a truly powerful tool when you've learned to how to master it. Teaching JavaScript is outside of the scope of our wiki. So, here are a few resources to help you get started.    </p>\n<div class=\"section section-4 \" id=\"29004886_JavaScriptDevelopmentPrimer-Onlineandvirtualcourses\">\n<h4 class=\"heading \"><span>Online and virtual courses</span></h4>\n<p>\nThe following is an alphabetical list of online JavaScript course offerings that you might find helpful.    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://learn.appendto.com/lessons\" target=\"_blank\">appendTo</a> is a free, interactive JavaScript tutorial site that covers a lot of browser-based JavaScript. While some isn't directly-applicable to Titanium, the Javascript learning material is excellent.    </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://www.codecademy.com/#%21%2Fexercise%2F0\" target=\"_blank\">Codecademy</a> is a free, interactive scripting tutorial site.    </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://javascriptmasterclass.com/\" target=\"_blank\">JavaScript Master Class</a> is an online course offered by Amy Hoy &amp; Thomas Fuchs. It's expensive ($529) but seems to get good reviews.    </p>\n</li><li class=\" \"> <p>\nStanford's CS101 course uses JavaScript, lecture notes and projects are available at <a class=\"external-link external-link\" href=\"http://www.stanford.edu/class/cs101/\" target=\"_blank\">http://www.stanford.edu/class/cs101/</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://www.udemy.com/search?q=javascript\" target=\"_blank\">Udemy</a> offers paid and free video-based courses on JavaScript and other topics.    </p>\n</li></ul> </div>\n<div class=\"section section-4 \" id=\"29004886_JavaScriptDevelopmentPrimer-OnlineBooksandResources\">\n<h4 class=\"heading \"><span>Online Books and Resources</span></h4>\n<p>\nThe following are some recommended JavaScript resources, freely-available on the web, that you will likely want to refer to while you build your Titanium application.    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://eloquentjavascript.net/\" target=\"_blank\">Eloquent JavaScript</a> is an excellent learning resource that is available as an interactive web site, downloadable HTML file, or printed book    </p>\n</li><li class=\" \"> <p>\nMozilla maintains an <a class=\"external-link external-link\" href=\"https://developer.mozilla.org/en/javascript\" target=\"_blank\">excellent JavaScript documentation site</a>, which very conveniently leaves out the DOM-specific programming tasks (which you'll rarely use in a native Titanium application). The MDC JavaScript site provides two key elements - an <a class=\"external-link external-link\" href=\"https://developer.mozilla.org/en/JavaScript/Reference\" target=\"_blank\">API doc source for JavaScript object types</a> and an <a class=\"external-link external-link\" href=\"https://developer.mozilla.org/en/JavaScript/Guide\" target=\"_blank\">introduction to programming JavaScript in general</a>. The JavaScript Guide will contain some browser-specific items that aren't included in the Titanium JavaScript environment, but the core techniques will be the same.    </p>\n</li><li class=\" \"> <p>\nConsidered by many to be the premier JavaScript expert in the world, Douglas Crockford maintains a listing of JavaScript resources <a class=\"external-link external-link\" href=\"http://javascript.crockford.com/\" target=\"_blank\">on his personal website</a>, all of which are definitely worth checking out. Many technologies pioneered by Crockford are embedded in Titanium in one way or another, including his <a class=\"external-link external-link\" href=\"http://www.jslint.com/\" target=\"_blank\">JSLint code validator</a> and <a class=\"external-link external-link\" href=\"http://www.json.org/\" target=\"_blank\">public domain JSON serialization library</a>.    </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"https://github.com/spencertipping/js-in-ten-minutes\" target=\"_blank\">JavaScript in 10 minutes</a> is a terse and dense guide to advanced JavaScript. It's not for the beginner, but it's packed full of tips, tricks, and inside-knowledge for the more advanced JavaScripter.    </p>\n</li><li class=\" \"> <p>\nGoogle, a major purveyor of JavaScript awesomeness, has published <a class=\"external-link external-link\" href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\" target=\"_blank\">a set of JavaScript code style guidelines</a>. Following these guidelines is certain to make your Javascript code more effective and maintainable.    </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://ejohn.org/apps/learn/\" target=\"_blank\">Learning Advanced JavaScript</a> from John Resig, the creator of jQuery. As you can see from its <a class=\"external-link external-link\" href=\"http://ejohn.org/apps/learn/#2\" target=\"_blank\">stated goal</a>, this is advanced stuff to be studied once you master the basics.    </p>\n</li></ul> </div>\n<div class=\"section section-4 \" id=\"29004886_JavaScriptDevelopmentPrimer-PrintBooks\">\n<h4 class=\"heading \"><span>Print Books</span></h4>\n<p>\nHere are a few good books to get you started. These should be considered required reading for those serious about understanding Javascript and leveraging it to its full capacity.    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://oreilly.com/catalog/9780596517748/\" target=\"_blank\">JavaScript: The Good Parts</a>, by Douglas Crockford    </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://oreilly.com/catalog/9780596805524/\" target=\"_blank\">JavaScript: The Definitive Guide</a>, by David Flanaghan    </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://oreilly.com/catalog/9780596806767\" target=\"_blank\">JavaScript Patterns</a>, by Stoyan Stefanov    </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://www.amazon.com/gp/product/1593272820?ie=UTF8&amp;tag=marijhaver-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1593272820\" target=\"_blank\">Eloquent JavaScript</a>, by Marijn Haverbeke    </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-3 \" id=\"29004886_JavaScriptDevelopmentPrimer-Afewbestpractices\">\n<h3 class=\"heading \"><span>A few best practices</span></h3>\n<p>\nThere's a large number of good references on JavaScript best practices available but, especially for developers coming to Titanium with a limited background in it, we'd like to share the most important to ensure high-quality applications.    </p>\n<div class=\"section section-4 \" id=\"29004886_JavaScriptDevelopmentPrimer-Don'tpollutetheglobalscope!\">\n<h4 class=\"heading \"><span>Don't pollute the global scope!</span></h4>\n<p>\nIn a JavaScript execution context, all variables are global by default. The only means of scoping variables is to place them inside of a function. (Within a function, if you don't include the <tt class=\" \">var</tt> keyword, your variables will be treated as global variables.) A much better approach than global variables/functions is to enclose all your application's API functions and properties into a single variable (namespace). This will minimize the chances of your code colliding with other code or libraries you include in the context later.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">//app.js</code></div>\n<div class=\"line\"><code class=\"comments\">//------</code></div>\n<div class=\"line\"><code class=\"comments\">// BAD - we put five variables in the global scope which could be clobbered</code></div>\n<div class=\"line\"><code class=\"plain\">var key = </code><code class=\"string\">'value'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    foo = </code><code class=\"string\">'bar'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    charlie = </code><code class=\"string\">'horse'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">function helper() {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//help out</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">function info(msg) {</code></div>\n<div class=\"line\"><code class=\"plain\">    helper(msg);</code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info(msg);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"comments\">// Better - define a single namespace to hold all your variables</code></div>\n<div class=\"line\"><code class=\"plain\">var myapp = {}; </code><code class=\"comments\">// namespace and only global variable</code></div>\n<div class=\"line\"><code class=\"plain\">myapp.key = </code><code class=\"string\">'value'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"comments\">/* Or, define the namespace and a few variables all at once with</code></div>\n<div class=\"line\"><code class=\"comments\">var myapp = {</code></div>\n<div class=\"line\"><code class=\"comments\">    key: 'value',</code></div>\n<div class=\"line\"><code class=\"comments\">    foo: 'bar',</code></div>\n<div class=\"line\"><code class=\"comments\">    charlie: 'horse'</code></div>\n<div class=\"line\"><code class=\"comments\">};</code></div>\n<div class=\"line\"><code class=\"comments\">*/</code></div>\n<div class=\"line\"><code class=\"comments\">// add a function to your namespace</code></div>\n<div class=\"line\"><code class=\"plain\">myapp.dosomething = function(foo) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// do something</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n<div class=\"line\"><code class=\"comments\">// extend and encapsulate by using self-calling functions</code></div>\n<div class=\"line\"><code class=\"plain\">(function() {</code></div>\n<div class=\"line\"><code class=\"plain\">    function helper() {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// this is a private function not directly accessible from the global scope</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">    myapp.info = function(msg) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// added to the app's namespace, so a public function</code></div>\n<div class=\"line\"><code class=\"plain\">        helper(msg);</code></div>\n<div class=\"line\"><code class=\"plain\">        Ti.API.info(msg)</code></div>\n<div class=\"line\"><code class=\"plain\">    };</code></div>\n<div class=\"line\"><code class=\"plain\">})();</code></div>\n<div class=\"line\"><code class=\"comments\">// you could then call your function with</code></div>\n<div class=\"line\"><code class=\"plain\">myapp.info(</code><code class=\"string\">'Hello World'</code><code class=\"plain\">);</code></div>\n</div>\n</div> </div>\n<div class=\"section section-4 \" id=\"29004886_JavaScriptDevelopmentPrimer-Use===and!==insteadof==and!=\">\n<h4 class=\"heading \"><span>Use  ===  and  !==  instead of  ==  and  !=</span></h4>\n<p>\nJavaScript will automatically convert values in a conditional test unless you tell it not to.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var testme = </code><code class=\"string\">'1'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\">(testme == </code><code class=\"value\">1</code><code class=\"plain\">) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// this will be executed because '1' is converted to an integer!</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nCalled by some the &quot;Compare, damn it!&quot; operator, <tt class=\" \">===</tt> performs what a <tt class=\" \">==</tt> operator might in other languages. If the two operands are equal in <i class=\" \">both</i> type and value, <tt class=\" \">===</tt> will return true and <tt class=\" \">!==</tt> will return false, which is almost always what you mean. This is a common gotcha and fits nicely in the category of JavaScript language quirks.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var testme = </code><code class=\"string\">'1'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\">(testme === </code><code class=\"value\">1</code><code class=\"plain\">) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// this will not be executed</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> </div>\n<div class=\"section section-4 \" id=\"29004886_JavaScriptDevelopmentPrimer-Theternaryoperator\">\n<h4 class=\"heading \"><span>The ternary operator</span></h4>\n<p>\nJavaScript's ternary operator is a handy way of turning a conditional block into a single statement. This lets you conditionally assign a value to a variable or object property. The value after the <tt class=\" \">?</tt> is assigned if the conditional statement is <tt class=\" \">true</tt>. The value after the <tt class=\" \">:</tt> is assigned if the conditional statement is <tt class=\" \">false</tt>.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// You could do this</code></div>\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\">(somecondition === somevalue) {</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar xyz = </code><code class=\"string\">'abc'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">} </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar xyz = </code><code class=\"string\">'123'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"comments\">// but this is more compact</code></div>\n<div class=\"line\"><code class=\"plain\">var xyz = (somecondition === somevalue) ? </code><code class=\"string\">'abc'</code><code class=\"plain\"> : </code><code class=\"string\">'123'</code><code class=\"plain\">;</code></div>\n</div>\n</div> </div>\n<div class=\"section section-4 \" id=\"29004886_JavaScriptDevelopmentPrimer-Lotsofvariables?Useacomma\">\n<h4 class=\"heading \"><span>Lots of variables? Use a comma</span></h4>\n<p>\nYou don't need to put <tt class=\" \">var</tt> in front of every variable - you can use commas to replace:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var foo = </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">var me = </code><code class=\"string\">'awesome'</code><code class=\"plain\">;</code></div>\n</div>\n</div> <p>\nwith:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var foo = </code><code class=\"keyword\">true</code><code class=\"plain\">, me = </code><code class=\"string\">'awesome'</code><code class=\"plain\">;</code></div>\n</div>\n</div> </div>\n<div class=\"section section-4 \" id=\"29004886_JavaScriptDevelopmentPrimer-Efficientloops\">\n<h4 class=\"heading \"><span>Efficient loops</span></h4>\n<p>\nIn most situations, checking the length of an array during every iteration can be slow. This is even more the case when working with Titanium proxy objects (that represent some native structure). So rather than writing:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var names = [</code><code class=\"string\">'Jeff'</code><code class=\"plain\">,</code><code class=\"string\">'Nolan'</code><code class=\"plain\">,</code><code class=\"string\">'Marshall'</code><code class=\"plain\">,</code><code class=\"string\">'Don'</code><code class=\"plain\">];</code></div>\n<div class=\"line\"><code class=\"keyword\">for</code><code class=\"plain\">(var i=</code><code class=\"value\">0</code><code class=\"plain\">;i&lt;names.length;i++){</code></div>\n<div class=\"line\"><code class=\"plain\">    process(names[i]);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nIt is better to only get the length of the array only once, as in:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var names = [</code><code class=\"string\">'Jeff'</code><code class=\"plain\">,</code><code class=\"string\">'Nolan'</code><code class=\"plain\">,</code><code class=\"string\">'Marshall'</code><code class=\"plain\">,</code><code class=\"string\">'Don'</code><code class=\"plain\">];</code></div>\n<div class=\"line\"><code class=\"keyword\">for</code><code class=\"plain\">(var i=</code><code class=\"value\">0</code><code class=\"plain\">,j=names.length;i&lt;j;i++){</code></div>\n<div class=\"line\"><code class=\"plain\">    process(names[i]);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> </div>\n<div class=\"section section-4 \" id=\"29004886_JavaScriptDevelopmentPrimer-Wrapself-callingfunctionsinparenthesis\">\n<h4 class=\"heading \"><span>Wrap self-calling functions in parenthesis</span></h4>\n<p>\n<a class=\"external-link external-link\" href=\"http://2007-2010.lovemikeg.com/2008/08/17/a-week-in-javascript-patterns-self-invocation/\" target=\"_blank\">Self-calling functions</a> are a useful pattern for encapsulating private variables and functions in JavaScript. As you start to realize the utility of self-calling functions, you may be tempted to write a self-calling function as:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var myValue = function() {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//do stuff</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> someValue;</code></div>\n<div class=\"line\"><code class=\"plain\">}();</code></div>\n</div>\n</div> <p>\nWhile syntactically correct, someone reading this code (missing the () at the end of the function declaration) might think you are assigning a function to <tt class=\" \">myValue</tt>, rather than the return value of the function. A better way to write this is with wrapping parentheses:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var myValue = (function() {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//do stuff</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> someValue;</code></div>\n<div class=\"line\"><code class=\"plain\">})();</code></div>\n</div>\n</div> <p>\nIn this case it is clear that <tt class=\" \">myValue</tt> is not a function, but the return value of the function.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004886_JavaScriptDevelopmentPrimer-AvoiddeepnestingwithAndroid/Rhino\">\n<h4 class=\"heading \"><span>Avoid deep nesting with Android/Rhino</span></h4>\n<p>\nOn Android, Rhino will occasionally cause your app to run out of memory if you have several levels of recursion or iteration in a function. If you run into a &quot;recursion too deep&quot; error, try and flatten out your code in areas where you have several levels of nested loops or recursive code. If that's not a viable solution, you can also increase the size of the <a class=\"document-link \" href=\"#!/guide/tiapp.xml_and_timodule.xml_Reference\" tiapp.xml_and_timodule.xml_Reference.html=\"tiapp.xml_and_timodule.xml_Reference.html\">thread stack</a> (see Android specific application properties section).    </p>\n<p>\nThis issue is not a problem with the V8 engine on Android.    </p>\n</div>\n</div>\n</div>\n<div class=\"section section-2 \" id=\"29004886_JavaScriptDevelopmentPrimer-Summary\">\n<h2 class=\"heading \"><span>Summary</span></h2>\n<p>\nIn this section, you briefly looked at JavaScript development and the resources you might explore to expand your JavaScript skills. This was a lightning fast assessment of coding style and practices that will aid in becoming a better Javascript developer. It is far from a comprehensive list, though, and is not meant to be training material per se. It is highly recommended that you go out and get at least one, if not all of the books mentioned in order to gain a true understanding of the scope and power of the language.    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"JavaScript Development Primer"});