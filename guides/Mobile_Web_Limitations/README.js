Ext.data.JsonP['Mobile_Web_Limitations']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Mobile Web Limitations</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"30084659\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=30084659\"><span>Edit</span></a>\n<h1>Mobile Web Limitations</h1>\n<p>\nTitanium Mobile Web apps run within the browser environment on the user's handset or tablet. Because of this, your Mobile Web apps are unavoidably limited by the environments provided by those browsers. The following limitations are a mix of Titanium limitations and a larger collection of general limitations for any web app.    </p>\n<p>\n<strong class=\" \">Overall</strong> </p>\n<ul class=\" \"><li class=\" \"> <p>\nYou cannot use as variable names any words that exist in the JavaScript environment of the browser. So words like window, document, navigator, debugger, class, and so forth. In other words, you can't use any name that exists in the HTML DOM or JavaScript language as variable names. See for example <a class=\"external-link external-link\" href=\"http://developer.mozilla.org/en/JavaScript/Reserved_Words\" target=\"_blank\">http://developer.mozilla.org/en/JavaScript/Reserved_Words</a> </p>\n</li></ul> <p>\n<strong class=\" \">Files and Local Storage</strong> </p>\n<ul class=\" \"><li class=\" \"> <p>\nMany browsers limit the amount of data (usually around 5MB) we can store in the browser's local storage. This limits the data, file storage, and database storage that can be used by your app. These are some of the components that consume that local storage:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nAnalytics system - Stores the machine id (mid)    </p>\n</li><li class=\" \"> <p>\nLoader system - Caches modules and static resources (caching such resources is optional, though)    </p>\n</li><li class=\" \"> <p>\nTi.App.Properties - Stores all properties, including those from the tiapp.xml    </p>\n</li><li class=\" \"> <p>\nTi.Filesystem - Any file storage your app might perform    </p>\n</li><li class=\" \"> <p>\nTi.UI.Clipboard - Temporary storage of data placed on the clipboard    </p>\n</li></ul></li><li class=\" \"> <p>\nTi.Filesystem can see all files in the Resources (web root) folder on the web server except <tt class=\" \">index.html</tt> and <tt class=\" \">titanium/filesystem.registry</tt>.    </p>\n</li><li class=\" \"> <p>\nIf Ti.Filesystem.getFile() is called with a relative path (i.e. &quot;myimage.jpg&quot;), the Resource directory path is automatically prepended to the path.    </p>\n</li><li class=\" \"> <p>\nFiles with a mime type application/* image/*, audio/*, or video/* are automatically handled as &quot;binary&quot; where the data internally is stored Base64 encoded.    </p>\n</li></ul> <p>\n<strong class=\" \">Loader</strong> </p>\n<ul class=\" \"><li class=\" \"> <p>\nModule IDs must NOT begin with a forward slash (so <tt class=\" \">require('foo')</tt> <i class=\" \">not</i> <tt class=\" \">require('/foo')</tt>). Paths are relative to the app's Resources directory.    </p>\n</li><li class=\" \"> <p>\nModules including Titanium APIs cannot be named &quot;require&quot;, &quot;exports&quot;, or &quot;module&quot;    </p>\n</li><li class=\" \"> <p>\nTitanium APIs must NOT contain properties named &quot;constructor&quot;, &quot;properties&quot;, &quot;constants&quot;, or &quot;declaredClass&quot;    </p>\n</li><li class=\" \"> <p>\nYou cannot call Ti.include() with a relative path from an async/callback function    </p>\n</li></ul> <p>\n<strong class=\" \">Media, Blobs, and Codec</strong> </p>\n<ul class=\" \"><li class=\" \"> <p>\nWith a Ti.Blob containing an image, the width and height are zero until the image is loaded which happens after a reflow. Either wait for a reflow or set a timeout with a callback before using the width and height.    </p>\n</li><li class=\" \"> <p>\nWith Ti.Codec, all buffers are treated as little endian. Furthermore, the &quot;position&quot; argument for encodeNumber() and decodeNumber() is unsupported    </p>\n</li><li class=\" \"> <p>\nVideo and audio codec support varies by browser    </p>\n</li></ul> <p>\n<strong class=\" \">Geolocation</strong> </p>\n<ul class=\" \"><li class=\" \"> <p>\nUsing Ti.Geolocation requires a browser that implements the Geolocation API.    </p>\n</li><li class=\" \"> <p>\nTi.Geolocation requires the end-user to allow browser to locate the user.    </p>\n</li></ul> <p>\n<strong class=\" \">Ti.Gesture</strong> </p>\n<ul class=\" \"><li class=\" \"> <p>\nRequires a device with an accelerometer plus a browser that implements an API for access to sensor data.    </p>\n</li><li class=\" \"> <p>\nRequires a device with a gyroscope plus a browser that implements an API for access to sensor data.    </p>\n</li></ul> <p>\n<strong class=\" \">Networking</strong> </p>\n<ul class=\" \"><li class=\" \"> <p>\nUses the navigator.online flag to detect state of connectivity.    </p>\n</li><li class=\" \"> <p>\nDetermining the network type is supported only on Android.    </p>\n</li><li class=\" \"> <p>\nYou can access cross-domain resources by either:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nEnabling CORS header support on the remote web server    </p>\n</li><li class=\" \"> <p>\nConfiguring a proxy and defining a custom <tt class=\" \">Ti.Network.httpURLFormatter</tt>.    </p>\n</li></ul></li></ul> <p>\n<strong class=\" \">Ti.Platform</strong> </p>\n<ul class=\" \"><li class=\" \"> <p>\nSeveral read-only properties are unavailable:    </p>\n<ul class=\" \"><li class=\" \"> <p>\naddress    </p>\n</li><li class=\" \"> <p>\narchitecture    </p>\n</li><li class=\" \"> <p>\navailableMemory    </p>\n</li><li class=\" \"> <p>\nmacaddress    </p>\n</li><li class=\" \"> <p>\nmodel    </p>\n</li><li class=\" \"> <p>\nnetmask    </p>\n</li><li class=\" \"> <p>\nprocessorCount    </p>\n</li><li class=\" \"> <p>\nusername    </p>\n</li></ul></li></ul> <p>\n<strong class=\" \">Ti.UI</strong> </p>\n<ul class=\" \"><li class=\" \"> <p>\nRadial background gradients do not support an end point.    </p>\n</li></ul> <p>\n<strong class=\" \">Ti.UI.EmailDialog</strong> </p>\n<ul class=\" \"><li class=\" \"> <p>\nSome browsers limit the maximum size of a mailto: URL to 2000 characters which includes all email addresses, subject, and body    </p>\n<ul class=\" \"><li class=\" \"> <p>\nIn our testing, this works fine with the Android web browser and iPhone's Safari on iPhone/iPad. It also works fine on desktop Firefox, Chrome, and Safari.    </p>\n</li></ul></li><li class=\" \"> <p>\nSome e-mail clients do not properly unescape HTML entities:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nTrue for Outlook, Mozilla Thunderbird, and Android mail app.    </p>\n</li><li class=\" \"> <p>\niPhone and iPad work as expected.    </p>\n</li><li class=\" \"> <p>\nWe recommend either leave &quot;html&quot; parameter false or only true for iPhone/iPad.    </p>\n</li></ul></li><li class=\" \"> <p>\nThere is no way to detect failure or cancelling of sending an email.    </p>\n</li></ul> <p>\n<strong class=\" \">Ti.UI.WebView</strong> </p>\n<ul class=\" \"><li class=\" \"> <p>\nThe following do NOT work for cross-domain URLs:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nevalJS()    </p>\n</li><li class=\" \"> <p>\ngoBack()    </p>\n</li><li class=\" \"> <p>\ngoForward()    </p>\n</li><li class=\" \"> <p>\nTi.API.* and Ti.App.* bridge    </p>\n</li><li class=\" \"> <p>\n&quot;beforeload&quot; event    </p>\n</li></ul></li><li class=\" \"> <p>\nThere is no way to detect if a page fails to load in the WebView, so the &quot;error&quot; event is never fired.    </p>\n</li><li class=\" \"> <p>\nThe <tt class=\" \">stopLoading()</tt> function generally does not work:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nIn some browsers, it will stop all WebViews from loading, which shouldn't be a huge deal.    </p>\n</li><li class=\" \"> <p>\nUse <tt class=\" \">stopLoading(true)</tt> to do a hard reset to force the WebView to be destroyed.    </p>\n</li></ul></li><li class=\" \"> <p>\nTouch events are generally ignored.    </p>\n</li><li class=\" \"> <p>\nYou will never be able to load a cross-domain resource that returns the HTTP header X-Frame-Options with the value SAMEORIGIN.    </p>\n</li><li class=\" \"> <p>\nWhen setting the contents of the WebView via the <tt class=\" \">html</tt> or <tt class=\" \">data</tt> properties, the <tt class=\" \">onload</tt> event will never fire since the WebView is loaded prior to injecting the new content.    </p>\n</li></ul> </div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Mobile Web Limitations"});