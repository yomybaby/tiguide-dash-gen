Ext.data.JsonP['Native_iOS_Debugging_and_Testing_Tools']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Native iOS Debugging and Testing Tools</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004939\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004939\"><span>Edit</span></a>\n<h1>Native iOS Debugging and Testing Tools</h1>\n<div class=\"section section-2 \" id=\"29004939_NativeiOSDebuggingandTestingTools-Objective\">\n<h2 class=\"heading \"><span>Objective</span></h2>\n<p>\nIn this section, you will about the testing and debugging tools provided as part of the Xcode environment.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004939_NativeiOSDebuggingandTestingTools-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<p>\nThe iOS SDK provides various tools that are useful for debugging Objective-C based apps. There are fewer options for debugging your Titanium apps. In this section, we'll take a look at how to view log output within Xcode, view device logs, and view crash logs. We'll introduce, but not dig too deep into the Instruments tool. We'll cover it in more depth in another section.    </p>\n<div class=\"section section-3 \" id=\"29004939_NativeiOSDebuggingandTestingTools-ViewlogoutputinConsole\">\n<h3 class=\"heading \"><span>View log output in Console</span></h3>\n<p>\nYou can use the <strong class=\" \">Console</strong> application to view log output from an iOS simulator.  You can either open the <strong class=\" \">Console</strong> application from the iOS simulator or through the <i class=\" \">Applications</i> folder.    </p>\n<p>\nTo open <strong class=\" \">Console</strong> from the iOS simulator, from the menu bar, select <strong class=\" \">Debug</strong> &gt; <strong class=\" \">Open System Log</strong><strong class=\" \">...</strong>.    </p>\n<p>\nTo open <strong class=\" \">Console</strong> from the <i class=\" \">Applications</i> folder:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nClick <strong class=\" \">Applications</strong> </p>\n</li><li class=\" \"> <p>\nSelect <strong class=\" \">Utilities</strong> &gt; <strong class=\" \">Console</strong><strong class=\" \">.app</strong> </p>\n</li><li class=\" \"> <p>\nOn the left bar, expand <strong class=\" \">iOS Simulator</strong>, then expand the version of the simulator you are using.    </p>\n</li><li class=\" \"> <p>\nClick <strong class=\" \">system.log</strong> item to view the simulator's log output.    </p>\n</li></ol> </div>\n<div class=\"section section-3 \" id=\"29004939_NativeiOSDebuggingandTestingTools-ViewlogoutputinXcode\">\n<h3 class=\"heading \"><span>View log output in Xcode</span></h3>\n<p>\nYou can view log output within Xcode. This includes the same information output to the Titanium Studio console. Viewing the Xcode (gdb) console is useful if you build your Titanium app from within Xcode to set project-specific parameters, build options, and so forth. (Keep in mind that you lose Titanium's i18n string handling if you build via Xcode.) It would also be useful when debugging a native iOS module for Titanium.    </p>\n<p>\nTo view log output in Xcode:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nBuild your project via Studio, then close the simulator    </p>\n</li><li class=\" \"> <p>\nOpen <i class=\" \">yourproject</i>/build/iphone/<i class=\" \">yourproject</i>.xcodeproj (e.g. KitchenSink.xcodeproj) in Xcode.    </p>\n</li><li class=\" \"> <p>\nBuild &amp; run the project within Xcode. Log output is shown in the GDB pane, as illustrated in the following screenshot.    </p>\n</li></ol> <p>\n<img src=\"images/download/attachments/29004939/ti_log_in_xcode.png\" alt=\"images/download/attachments/29004939/ti_log_in_xcode.png\" class=\"confluence-embedded-image\" width=\"600\" />\n</p>\n</div>\n<div class=\"section section-3 \" id=\"29004939_NativeiOSDebuggingandTestingTools-Viewlogoutputonaconnecteddevice\">\n<h3 class=\"heading \"><span>View log output on a connected device</span></h3>\n<p>\n</p>\n<div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\">\n<p>\nStarting with Release 3.3.0, Titanium captures and outputs iOS device output.    </p>\n</div>\n<p>\nA more useful technique would be to view the logging messages that are generated by an app running on a USB-connected iOS device. You can do this via the Console view in the Xcode Organizer. The console displays Titanium logging messages, plus iOS system messages that might provide additional useful information.    </p>\n<p>\n<strong class=\" \">Starting with Xcode 6</strong>, to view the console output of a connected device:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nConnect your device.    </p>\n</li><li class=\" \"> <p>\nBuild and deploy the app to the device using either the CLI or Studio.    </p>\n</li><li class=\" \"> <p>\nSync the application to the device using iTunes (if you are not building directly to device).    </p>\n</li><li class=\" \"> <p>\nLaunch Xcode.    </p>\n</li><li class=\" \"> <p>\nOpen the <strong class=\" \">Devices</strong> window.  From the menu, select <strong class=\" \">Window </strong>&gt; <strong class=\" \">Devices</strong>.    </p>\n</li><li class=\" \"> <p>\nSelect your device from the left bar.    </p>\n</li><li class=\" \"> <p>\nClick the <strong class=\" \">Show the device console</strong> button (        <img src=\"images/download/attachments/29004939/ExpandTheConsole.png\" alt=\"images/download/attachments/29004939/ExpandTheConsole.png\" class=\"confluence-embedded-image\" />\n    ) to expand the console.    </p>\n</li></ol> <p>\n<img src=\"images/download/attachments/29004939/Xcode6DeviceConsole.png\" alt=\"images/download/attachments/29004939/Xcode6DeviceConsole.png\" class=\"confluence-embedded-image\" />\n</p>\n<p>\n<strong class=\" \">Prior to Xcode 6</strong>, to view the console output of a connected device:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nConnect your device.    </p>\n</li><li class=\" \"> <p>\nBuild &amp; deploy the app to the device using either the CLI or Studio.    </p>\n</li><li class=\" \"> <p>\nSync the application to the device using iTunes (if you are not building directly to device).    </p>\n</li><li class=\" \"> <p>\nLaunch Xcode.    </p>\n</li><li class=\" \"> <p>\nOpen the <strong class=\" \">Organizer</strong> window.  From the menu, select <strong class=\" \">Window </strong>&gt; <strong class=\" \">Organizer</strong>.    </p>\n</li><li class=\" \"> <p>\nSelect the <strong class=\" \">Devices</strong> tab, expand your device and select <strong class=\" \">Console</strong>.    </p>\n</li><li class=\" \"> <p>\nOpen your app and you'll be able to view Titanium logging messages among the other output in the console.    </p>\n</li></ol> <p>\n<img src=\"images/download/attachments/29004939/log_on_device.png\" alt=\"images/download/attachments/29004939/log_on_device.png\" class=\"confluence-embedded-image\" width=\"600\" />\n</p>\n</div>\n<div class=\"section section-3 \" id=\"29004939_NativeiOSDebuggingandTestingTools-Viewcrashlogsonadevice\">\n<h3 class=\"heading \"><span>View crash logs on a device</span></h3>\n<p>\nYou can view crash logs generated when an app running on your device crashes. That data is not hugely useful for debugging Titanium apps because it will include native object related logging messages, not Titanium logging output. That crash data will be tied to the Titanium module (object) that was involved with running your code rather than your JavaScript. This sort of logging information would be most useful when debugging a native iOS module for Titanium.    </p>\n<p>\n<strong class=\" \">Starting with Xcode 6</strong>, to view the crash log of a connected device:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nConnect your device.    </p>\n</li><li class=\" \"> <p>\nLaunch Xcode.    </p>\n</li><li class=\" \"> <p>\nOpen the <strong class=\" \">Devices</strong> window.  From the menu, select <strong class=\" \">Window </strong>&gt; <strong class=\" \">Devices</strong>.    </p>\n</li><li class=\" \"> <p>\nSelect your device from the left bar.    </p>\n</li><li class=\" \"> <p>\nClick the <strong class=\" \">View </strong><strong class=\" \">Device Logs</strong> button.    </p>\n</li><li class=\" \"> <p>\nIn the list of available log files, select your app. There might be more than one file for your app, one for each time it has crashed.    </p>\n</li></ol> <p>\n<strong class=\" \">Prior to Xcode 6</strong>, to view the crash log of a connected device:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nConnect your device.    </p>\n</li><li class=\" \"> <p>\nLaunch Xcode.    </p>\n</li><li class=\" \"> <p>\nOpen the <strong class=\" \">Organizer</strong> window.  From the menu, select <strong class=\" \">Window </strong>&gt; <strong class=\" \">Organizer</strong>.    </p>\n</li><li class=\" \"> <p>\nSelect the <strong class=\" \">Devices</strong> tab, expand your device and select <strong class=\" \">Device Logs</strong>.    </p>\n</li><li class=\" \"> <p>\nIn the list of available log files, select your app. There might be more than one file for your app, one for each time it has crashed.    </p>\n</li></ol> </div>\n<div class=\"section section-3 \" id=\"29004939_NativeiOSDebuggingandTestingTools-Instruments\">\n<h3 class=\"heading \"><span>Instruments</span></h3>\n<p>\nInstruments is a tool for memory monitoring and profiling. It can be a very useful tool for profiling your app to determine if there are memory leaks and perhaps to discover the causes of poor performance. We'll cover this tool in depth in the <a class=\"document-link \" href=\"#!/guide/Managing_Memory_and_Finding_Leaks\" Managing_Memory_and_Finding_Leaks.html=\"Managing_Memory_and_Finding_Leaks.html\">Managing Memory and Finding Leaks</a> section.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004939_NativeiOSDebuggingandTestingTools-SimulatecellularnetworkconditionswiththeNetworkLinkConditioner\">\n<h3 class=\"heading \"><span>Simulate cellular network conditions with the Network Link Conditioner</span></h3>\n<p>\nYou should test your app under less-than-ideal conditions so that you know how it will react as users go into roaming mode, operate over low-speed data networks, and so forth. If they run your app in such a state, your app should react appropriately rather than crashing. You can simulate slow, noisy, and lossy networks by using the Network Link Conditioner preferences tool included with OS X Lion.    </p>\n<p>\n<img src=\"images/download/attachments/29004939/networklineconditioner.png\" alt=\"images/download/attachments/29004939/networklineconditioner.png\" class=\"confluence-embedded-image\" width=\"600\" />\n</p>\n<p>\nNetwork Link Conditioner might not be installed by default. To install it:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nClick the Spotlight (magnifying glass) icon and enter <strong class=\" \">Network Link Conditioner</strong>.    </p>\n</li><li class=\" \"> <p>\nWhen prompted, select <strong class=\" \">Install for all users of this computer</strong> and click <strong class=\" \">Install</strong>. Enter your password.    </p>\n</li><li class=\" \"> <p>\nSelect the profile that represents the network conditions you'd like to simulate.    </p>\n</li><li class=\" \"> <p>\nClick the lock and enter your password.    </p>\n</li><li class=\" \"> <p>\nTurn the link conditioner on.    </p>\n</li></ol> <p>\n(Once installed, you can access the Network Link Conditioner via the System Preferences application.)    </p>\n<p>\nOnce you turn on link conditioning, your network speed will throttled to the level defined by the profile you selected. At this point, you can test your app in the Simulator under conditions that more realistically reflect the real world.    </p>\n<p>\nBecause the network throttling applies to your entire system, any OS X tasks you have running that use the network will also be throttled. This might include your email application, web browser, or streaming music player. Incidentally, this means you can use the Network Link Conditioner to test Android apps running in the emulator; it too will see network access throttled as you specified.    </p>\n<p>\nIf the default network condition profiles don't meet your needs, you can create a custom network profile. You might use a custom profile to specify certain conditions, such as packet loss, upload or download delays, and so forth.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004939_NativeiOSDebuggingandTestingTools-References\">\n<h3 class=\"heading \"><span>References</span></h3>\n<ul class=\" \"><li class=\" \"> <p>\nApple Developer docs: <a class=\"external-link external-link\" href=\"http://developer.apple.com/library/IOs/#documentation%2FXcode%2FConceptual%2Fios_development_workflow%2F130-Debugging_Applications%2Fdebugging_applications.html\" target=\"_blank\">Viewing Console Output and Device Logs</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://titaniumninja.com/simulating-slow-network-links-on-os-x/\" target=\"_blank\">Simulating slow network connections</a> with <tt class=\" \">ifpw</tt> for OS X Snow Leopard.    </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"29004939_NativeiOSDebuggingandTestingTools-Summary\">\n<h2 class=\"heading \"><span>Summary</span></h2>\n<p>\nIn this section, you learned that how to view log messages on a USB-connected device, how to view crash logs, and how to view logging messages within Xcode. Of these, viewing log messages from a device is the technique most applicable to debugging Titanium JavaScript issues. The other techniques are better suited to module development.    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Native iOS Debugging and Testing Tools"});