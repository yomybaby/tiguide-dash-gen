Ext.data.JsonP['Coding_Strategies']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Coding Strategies</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004891\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004891\"><span>Edit</span></a>\n<h1>Coding Strategies</h1>\n<div class=\"section section-2 \" id=\"29004891_CodingStrategies-Objective\">\n<h2 class=\"heading \"><span>Objective</span></h2>\n<p>\nIn this chapter, you will examine techniques for writing large JavaScript applications within the Titanium environment. You'll look also at some coding strategies that will help you organize your code, reduce repetition, and ease development and maintenance.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004891_CodingStrategies-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<p>\nFor many programmers, their first Titanium app is also their first experience with a large JavaScript project. While most have experience with browser-based JavaScript for adding client side interactivity, few have built entire applications using it. As you grow as a Titanium developer, you will find that a bevy of globally scoped functions and variables will quickly become unmanageable.    </p>\n<p>\nLet's take a look at the coding principles and application structures to which you should adhere to create high quality Titanium apps. In addition, we'll take a brief look at some community-supplied frameworks that are available to improve the structure and scalability of your Titanium projects.    </p>\n<div class=\"section section-3 \" id=\"29004891_CodingStrategies-Codingprinciples\">\n<h3 class=\"heading \"><span>Coding principles</span></h3>\n<p>\nWhen writing JavaScript for your Titanium apps, you should strive to achieve these programming principles:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nProtect the global scope    </p>\n</li><li class=\" \"> <p>\nKeep your code DRY (http://en.wikipedia.org/wiki/Don't_repeat_yourself)    </p>\n</li><li class=\" \"> <p>\nUse a single execution context    </p>\n</li></ul> <div class=\"section section-4 \" id=\"29004891_CodingStrategies-Globalscope\">\n<h4 class=\"heading \"><span>Global scope</span></h4>\n<p>\nJavaScript has a limited notion of <a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/Scope_(computer_science)\" target=\"_blank\">scope</a>, with variables too often being dumped into one global context. In fact, the only <a class=\"external-link external-link\" href=\"http://eloquentjavascript.net/chapter3.html#key10\" target=\"_blank\">scope</a> besides global that JavaScript supports is functional scope. This means that the scope of your variables and functions can be contained within other functions. For example, here's a simple case where functional scope is used to keep temporary variables from polluting the global scope. We make use of an immediate function to execute our code:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var sum = (function() {</code></div>\n<div class=\"line\"><code class=\"plain\">    var tmpValue = </code><code class=\"value\">0</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">for</code><code class=\"plain\"> (var i = </code><code class=\"value\">0</code><code class=\"plain\">; i &lt; </code><code class=\"value\">100</code><code class=\"plain\">; i++) {</code></div>\n<div class=\"line\"><code class=\"plain\">        tmpValue += i;</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> tmpValue;</code></div>\n<div class=\"line\"><code class=\"plain\">})();</code></div>\n</div>\n</div> <p>\nNow we have the computed value in our <tt class=\" \">sum</tt> variable, and the <tt class=\" \">tmpValue</tt> and <tt class=\" \">i</tt> variables are no longer part of the scope as they were contained within the functional scope of our immediate function.    </p>\n<p>\nIn addition to its concept of scope, JavaScript is also quite flexible in that it is loosely typed. This means that you can repurpose objects, including variables and functions, at any time in your code via assignment. But as I'm sure you've heard before, with great power comes great responsibility. If we are not careful with the management of our code, the power of JavaScript's expressive code can cause just as many problems as it solves.    </p>\n<p>\nWe touched on protecting the global scope in the <a class=\"document-link \" href=\"#!/guide/JavaScript_Development_Primer\" JavaScript_Development_Primer.html=\"JavaScript_Development_Primer.html\">JavaScript Development Primer</a> chapter. As we stated there, a much better approach than global variables/functions is to enclose all your application's API functions and properties into a single variable (<a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/Namespace_(computer_science)\" target=\"_blank\">namespace</a>). This will minimize the chances of your code colliding with other code or libraries.    </p>\n<p>\nTo refresh your memory on creating namespaces to protect the global scope, here's the example we gave back in the Primer chapter:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// Define a single namespace to hold all your variables, it's the only global variable</code></div>\n<div class=\"line\"><code class=\"plain\">var myapp = {};</code></div>\n<div class=\"line\"><code class=\"plain\">myapp.key = </code><code class=\"string\">\"value\"</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"comments\">/* Or, define the namespace and a few variables all at once with</code></div>\n<div class=\"line\"><code class=\"comments\">var myapp = {</code></div>\n<div class=\"line\"><code class=\"comments\">    key: 'value',</code></div>\n<div class=\"line\"><code class=\"comments\">    foo: 'bar',</code></div>\n<div class=\"line\"><code class=\"comments\">    charlie: 'horse'</code></div>\n<div class=\"line\"><code class=\"comments\">};</code></div>\n<div class=\"line\"><code class=\"comments\">*/</code></div>\n<div class=\"line\"><code class=\"comments\">// add a function to your namespace</code></div>\n<div class=\"line\"><code class=\"plain\">myapp.dosomething = function(foo) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// do something</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n<div class=\"line\"><code class=\"comments\">// extend and encapsulate by using self-calling functions</code></div>\n<div class=\"line\"><code class=\"plain\">(function() {</code></div>\n<div class=\"line\"><code class=\"plain\">    function helper() {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// this is a private function not directly accessible from the global scope</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">    myapp.info = function(msg) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// added to the app's namespace, so a public function</code></div>\n<div class=\"line\"><code class=\"plain\">        helper(msg);</code></div>\n<div class=\"line\"><code class=\"plain\">        Ti.API.info(msg)</code></div>\n<div class=\"line\"><code class=\"plain\">    };</code></div>\n<div class=\"line\"><code class=\"plain\">})();</code></div>\n<div class=\"line\"><code class=\"comments\">// you could then call your function with</code></div>\n<div class=\"line\"><code class=\"plain\">myapp.info(</code><code class=\"string\">'Hello World'</code><code class=\"plain\">);</code></div>\n</div>\n</div> </div>\n<div class=\"section section-4 \" id=\"29004891_CodingStrategies-StayDRY\">\n<h4 class=\"heading \"><span>Stay DRY</span></h4>\n<p>\nBy DRY (http://en.wikipedia.org/wiki/Don't_repeat_yourself), we mean &quot;don't repeat yourself.&quot; The less you repeat code, the easier it is to write, maintain, and fix that code. There are many techniques that will help you keep your code DRY. Among these are creating <a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/Factory_method_pattern\" target=\"_blank\">factory methods</a> for instantiating program components, capitalizing on JavaScript's <a class=\"external-link external-link\" href=\"http://javascript.crockford.com/prototypal.html\" target=\"_blank\">inheritance</a> model, and creating libraries of <a class=\"external-link external-link\" href=\"http://vimeopro.com/appcelerator/forging-titanium/video/27447911\" target=\"_blank\">reusable modules</a>.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004891_CodingStrategies-Executioncontexts\">\n<h4 class=\"heading \"><span>Execution contexts</span></h4>\n<p>\nIf you've ever created web pages, you know that JavaScript variables on one page have no access to the JavaScript variables on another. You have to take special steps &ndash; setting and getting POST or GET parameters, using cookies, or some similar measure &ndash; to get data from one page to another. Each page has its own global variable, which is cut off from that of any other page. We say each page runs in its own &quot;execution context.&quot;    </p>\n<p>\nBy default, a Titanium Mobile application has a single execution context in which it runs. Your application's app.js file bootstraps your application and serves as the root context. Your application can have multiple execution contexts (but as we'll show, you generally don't want it to). New execution contexts are typically created by opening a new window that points to an external URL in its <tt class=\" \">url</tt> property:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">Ti.UI.createWindow({</code></div>\n<div class=\"line\"><code class=\"plain\">  url:</code><code class=\"string\">'window.js'</code></div>\n<div class=\"line\"><code class=\"plain\">}).open();</code></div>\n</div>\n</div> <p>\nWhen the window is opened, the script window.js is immediately run in a new execution context. If the preceding code were run in app.js, any variables or function declarations made in app.js would be unavailable within window.js. Try it:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nCreate a new Titanium Mobile project.    </p>\n</li><li class=\" \"> <p>\nIn app.js, cut the following text and paste it into a new file named win1.js:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var label1 = Titanium.UI.createLabel({</code></div>\n<div class=\"line\"><code class=\"plain\">\tcolor:</code><code class=\"string\">'#999'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\ttext:</code><code class=\"string\">'I am Window 1'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tfont:{fontSize:</code><code class=\"value\">20</code><code class=\"plain\">,fontFamily:</code><code class=\"string\">'Helvetica Neue'</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">\ttextAlign:</code><code class=\"string\">'center'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win1.add(label1);</code></div>\n</div>\n</div></li><li class=\" \"> <p>\nThen, update the code that defines win1, like this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var win1 = Titanium.UI.createWindow({</code></div>\n<div class=\"line\"><code class=\"plain\">    title:</code><code class=\"string\">'Tab 1'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    backgroundColor:</code><code class=\"string\">'#fff'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\turl:</code><code class=\"string\">'win1.js'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div></li><li class=\" \"> <p>\nBuild your project for the simulator/emulator. You'll receive an error that <tt class=\" \">win1</tt> is undefined in the win1.js file. The <tt class=\" \">win1</tt> variable is defined in app.js, which is a separate context. Let's fix that.    </p>\n</li><li class=\" \"> <p>\nIn win1.js, add this statement at the top:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var win1 = Ti.UI.currentWindow;</code></div>\n</div>\n</div></li><li class=\" \"> <p>\nBuild your project for the simulator/emulator and this time it will run without errors. To pass data into a separate context, you can add custom properties to your window object.    </p>\n</li><li class=\" \"> <p>\nIn app.js, update the code to read:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var win1 = Titanium.UI.createWindow({</code></div>\n<div class=\"line\"><code class=\"plain\">    title:</code><code class=\"string\">'Tab 1'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    backgroundColor:</code><code class=\"string\">'#fff'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\turl:</code><code class=\"string\">'win1.js'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tmylabel:</code><code class=\"string\">'Hello from app.js'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div></li><li class=\" \"> <p>\nThen, in win1.js, update the code to read:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var label1 = Titanium.UI.createLabel({</code></div>\n<div class=\"line\"><code class=\"plain\">\tcolor:</code><code class=\"string\">'#999'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\ttext:win1.mylabel,</code></div>\n<div class=\"line\"><code class=\"plain\">\tfont:{fontSize:</code><code class=\"value\">20</code><code class=\"plain\">,fontFamily:</code><code class=\"string\">'Helvetica Neue'</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">\ttextAlign:</code><code class=\"string\">'center'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div></li><li class=\" \"> <p>\nBuild your project for the simulator/emulator. The custom window property you set in app.js is available within the win1.js context and is used as the label's text.    </p>\n</li></ol> <p>\nIt is possible to communicate across execution contexts using application-level events. Using Titanium's custom event API, arbitrary JavaScript data structures can be sent and received in different execution contexts. Note that the 'payload' of your event must be JSON serializable, so business objects will not preserve any instance methods associated with them. The APIs used to fire and receive events are in the Ti.App namespace.    </p>\n<p>\nLet's modify the project you just used to demonstrate multiple contexts.    </p>\n<ol class=\" \"><li class=\" \"> <p>\nIn win1.js, add this code:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">label1.addEventListener(</code><code class=\"string\">'click'</code><code class=\"plain\">, function() {</code></div>\n<div class=\"line\"><code class=\"plain\">\tTi.App.fireEvent(</code><code class=\"string\">'app:labelclicked'</code><code class=\"plain\">, {newlabel:</code><code class=\"string\">'Sent from win1.js'</code><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div></li><li class=\" \"> <p>\nBack in app.js, scroll down to find the <tt class=\" \">label2</tt> code. This code is in the app.js context, walled off from the win1.js context. We'll add an event listener here to update the text of <tt class=\" \">label2</tt> when label1 is clicked. Add this code after <tt class=\" \">label2</tt>:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">Ti.App.addEventListener(</code><code class=\"string\">'app:labelclicked'</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">\tlabel2.text = e.newlabel;</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div></li><li class=\" \"> <p>\nBuild your project for the simulator/emulator. Click the label on tab 1. Switch to tab 2 and the label should now read 'Sent from win1.js'.    </p>\n</li></ol> <div class=\"section section-5 \" id=\"29004891_CodingStrategies-ShouldIuseasinglecontextormultiplecontexts?\">\n<h5 class=\"heading \"><span>Should I use a single context or multiple contexts?</span></h5>\n<p>\nAs is often the case in software development, the answer is &quot;that depends&quot;. Most of the time, we recommend you use a single execution context for these reasons:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nYou can pass complex objects easily within your app's single context &mdash; With events, you can pass JSON-serializable objects, but not objects with methods.    </p>\n</li><li class=\" \"> <p>\nYou include your libraries/dependencies only once, since there's only one context &mdash; With multiple contexts, each file would need to include your libraries/dependencies, increasing memory usage.    </p>\n</li><li class=\" \"> <p>\nIn most of the projects done by Appcelerator's own Professional Services team on Titanium Mobile, a single execution context with multiple included external files is used. However, there are instances where having multiple execution contexts is useful. For example, in our Kitchen Sink application, it is advantageous to have a 'clean slate' for every API usage example, so we don't have to worry about polluting the global scope and can keep the examples easy.    </p>\n</li></ul> </div>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"29004891_CodingStrategies-CreatingHighQualityJavaScriptBasedApps\">\n<h3 class=\"heading \"><span>Creating High Quality JavaScript Based Apps</span></h3>\n<p>\nLet's recap: keep your code DRY, don't pollute the global scope, and strive for a single context app. We offer a couple of techniques you can use to meet these goals:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nNamespaced pattern with self-calling functions    </p>\n</li><li class=\" \"> <p>\nCommonJS modules    </p>\n</li></ul> <p>\n(These aren't formal <a class=\"external-link external-link\" href=\"http://addyosmani.com/resources/essentialjsdesignpatterns/book/\" target=\"_blank\">design patterns</a>, but important development concepts for JavaScript and Titanium developers.)    </p>\n<div class=\"section section-4 \" id=\"29004891_CodingStrategies-Namespacedpatternwithself-callingfunctions\">\n<h4 class=\"heading \"><span>Namespaced pattern with self-calling functions</span></h4>\n<p>\nA technique we teach in our classroom training sessions involves breaking your app into modular pieces, each constructed using <a class=\"external-link external-link\" href=\"http://2007-2010.lovemikeg.com/2008/08/17/a-week-in-javascript-patterns-self-invocation/\" target=\"_blank\">self-calling functions</a> which modify a single app namespace. (If you want to be semantically-correct, these are <a class=\"external-link external-link\" href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\" target=\"_blank\">Immediately Invoked Function Expressions</a>, or IIFEs.) This technique lets you divide code into multiple files, each focused on a discrete purpose. As each library is loaded, it modifies the app's namespace object, which is the only variable added to the global namespace. Let's demonstrate this with code:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// create an object literal to be your app's namespace</code></div>\n<div class=\"line\"><code class=\"plain\">var myapp = {};</code></div>\n<div class=\"line\"><code class=\"comments\">// include necessary libraries</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.include(</code><code class=\"string\">'ui.js'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"comments\">// instantiate and open the main UI component of our app</code></div>\n<div class=\"line\"><code class=\"plain\">myapp.mainWindow = myapp.ui.createApplicationWindow();</code></div>\n<div class=\"line\"><code class=\"plain\">myapp.mainWindow.open();</code></div>\n</div>\n</div> <p>\nThe ui.js library file contains the code that constructs your app's user interface.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">ui.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// create a self-calling function</code></div>\n<div class=\"line\"><code class=\"plain\">(function(){</code></div>\n<div class=\"line\"><code class=\"plain\">\tmyapp.ui = {}; </code><code class=\"comments\">// this sub-namespace extends the app's namespace object</code></div>\n<div class=\"line\"><code class=\"plain\">\tmyapp.ui.createApplicationWindow = function() {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tvar win = Ti.UI.createWindow({</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\tbackgroundColor:</code><code class=\"string\">'white'</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t});</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tvar header = Ti.UI.createLabel({</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\ttext: </code><code class=\"string\">'My App Heading'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\ttop: </code><code class=\"value\">10</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t});</code></div>\n<div class=\"line\"><code class=\"plain\">\t\twin.add(header);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> win;</code></div>\n<div class=\"line\"><code class=\"plain\">\t};</code></div>\n<div class=\"line\"><code class=\"plain\">})();</code></div>\n</div>\n</div> <p>\nYou would add other libraries, as necessary, to round out the functionality of your app. For example, you might put all your database code in a <tt class=\" \">db.js</tt> file, your network code in a <tt class=\" \">network.js</tt>, and so forth. You can include multiple libraries in a single <tt class=\" \">include</tt> call, or make a separate call to <tt class=\" \">include</tt> for each library. We recommend you keep namespace variable names short: you'll be typing them a lot. Use function names that describe their purpose and return value. Take <tt class=\" \">createApplicationWindow()</tt> as an example. It &quot;creates&quot; a &quot;window&quot; and the middle part describes what type of window it's creating. The purpose of the function is clear just by reading its name.    </p>\n<p>\nA good example of an app that uses this namespaced pattern is <a class=\"external-link external-link\" href=\"https://github.com/appcelerator-titans/tweetanium\" target=\"_blank\">Tweetanium Mobile</a>. We encourage you to download that and study the way that app is put together. The &quot;finished&quot; code we supply for our <a class=\"external-link external-link\" href=\"http://wiki.appcelerator.org/display/td/TCAD+Course+Labs\" target=\"_blank\">classroom labs</a> generally follow this namespaced pattern as well.    </p>\n<p>\n(As presented here, this is not officially an implementation of the formal <a class=\"external-link external-link\" href=\"http://addyosmani.com/largescalejavascript/#modpattern\" target=\"_blank\">modular pattern</a>. But it would not be too difficult to adapt the code presented here to match that design pattern.)    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004891_CodingStrategies-CommonJSmodules\">\n<h4 class=\"heading \"><span>CommonJS modules</span></h4>\n<p>\nTitanium Mobile is moving toward the adoption of the <a class=\"external-link external-link\" href=\"http://www.commonjs.org/\" target=\"_blank\">CommonJS</a> module specification as the way in which developers should structure their JavaScript code. While CommonJS Modules are a &quot;standard&quot; <a class=\"external-link external-link\" href=\"http://wiki.commonjs.org/wiki/Modules/1.1\" target=\"_blank\">specification</a>, there are differences in implementation across multiple technology stacks. The aim of this specification is to delineate what is and is not supported by the Titanium Mobile implementation of this spec, starting in 1.8 and moving forward.    </p>\n<div class=\"section section-5 \" id=\"29004891_CodingStrategies-Definitions\">\n<h5 class=\"heading \"><span>Definitions</span></h5>\n<ul class=\" \"><li class=\" \"> <p>\n<strong class=\" \">Module</strong> - Any CommonJS-compliant module which will be consumed in a Titanium Mobile application. This can be a JavaScript file included with an application, or a native extension to Titanium which exposes a JavaScript API.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">Resources</strong> - The Resources directory of a Titanium application, where the user's source code lives before any processing by our build system.    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">exports</tt> - a free variable within a module, to which multiple properties may be added to create a public interface    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">module.exports</tt> - an object within a module, which may be REPLACED by an object representing the public interface to the module    </p>\n</li></ul> <p>\nOur specific implementation of the <a class=\"external-link external-link\" href=\"http://wiki.commonjs.org/wiki/Modules/1.1\" target=\"_blank\">CommonJS Module Specification</a> is based on (and the early implementation on Android taken directly from) that of <a class=\"external-link external-link\" href=\"http://nodejs.org/docs/v0.6.0/api/modules.html\" target=\"_blank\">node.js</a>. While we should not consider our implementation a direct clone of node, we should favor node conventions where possible to foster reuse of modules across both environments.    </p>\n</div>\n<div class=\"section section-5 \" id=\"29004891_CodingStrategies-Basicusage\">\n<h5 class=\"heading \"><span>Basic usage</span></h5>\n<p>\nIn order to use a module within Titanium, you must use the <tt class=\" \">require()</tt> function, which is built in to the global scope in every JavaScript context.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var myModule = require(</code><code class=\"string\">'/MyModule'</code><code class=\"plain\">); </code><code class=\"comments\">// don't include the \".js\" extension!</code></div>\n</div>\n</div> <p>\nThe string passed to <tt class=\" \">require()</tt> is the path to and base name of the JavaScript module to load. We recommend that you use absolute paths, where <tt class=\" \">/</tt> corresponds to your app's Resources directory, to make sure Titanium can locate and load your module. The <tt class=\" \">require()</tt> function returns a JavaScript object, with properties, functions, and other data assigned to it which form the public interface to the module. If the module we loaded into the application above exposed a function <tt class=\" \">sayHello()</tt>, which would print a name and a welcome message to the console, it would be accessed in this way:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var myModule = require(</code><code class=\"string\">'/MyModule'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">myModule.sayHello(</code><code class=\"string\">'Kevin'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"comments\">//console output is \"Hello Kevin!\"</code></div>\n</div>\n</div> </div>\n<div class=\"section section-5 \" id=\"29004891_CodingStrategies-JavaScriptModuleComposition\">\n<h5 class=\"heading \"><span>JavaScript Module Composition</span></h5>\n<p>\nAs in the <a class=\"external-link external-link\" href=\"http://wiki.commonjs.org/wiki/Modules/1.1\" target=\"_blank\">CommonJS Module specification</a>, inside the module's JavaScript file, there will be a special variable called <tt class=\" \">exports</tt> to which properties may be added for the public interface of the module. Anything assigned to it will be available in the calling context as a property of the returned object.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">MyModule.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// variables defined in this files are private</code></div>\n<div class=\"line\"><code class=\"plain\">var defaultMessage = </code><code class=\"string\">\"Hello world\"</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"comments\">// we make objects, variables, functions available to the</code></div>\n<div class=\"line\"><code class=\"comments\">// calling context by adding them to the exports object</code></div>\n<div class=\"line\"><code class=\"plain\">exports.sayHello = function(msg) {</code></div>\n<div class=\"line\"><code class=\"plain\">\tTi.API.info(msg);</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n<div class=\"line\"><code class=\"comments\">// we can assign other objects, functions, and variables to</code></div>\n<div class=\"line\"><code class=\"comments\">// exports and they will be available to the calling context</code></div>\n<div class=\"line\"><code class=\"plain\">exports.helloWorld = function() {</code></div>\n<div class=\"line\"><code class=\"plain\">\tTi.API.info(defaultMessage);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nAlternately, if the module author wishes to make the exported value from the module an object of their own design and choosing, there is a non-standard (but common, as with node.js) extension to the Module specification which allows for this. The <tt class=\" \">module.exports</tt> object is available within the module file, and may be assigned any value which the developer would like to return from the <tt class=\" \">require</tt> function for their module. This is most commonly used for functions which act as object constructors. The following would be a typical use case for this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">function Person(firstName,lastName) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.firstName = firstName;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.lastName = lastName;</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">Person.prototype.fullName = function() {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.firstName+</code><code class=\"string\">' '</code><code class=\"plain\">+</code><code class=\"keyword\">this</code><code class=\"plain\">.lastName;</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n<div class=\"line\"><code class=\"plain\">module.exports = Person;</code></div>\n</div>\n</div> <p>\nUsage:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Resources/app.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var Person = require(</code><code class=\"string\">'Person'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">var fred = </code><code class=\"keyword\">new</code><code class=\"plain\"> Person(</code><code class=\"string\">'Fred'</code><code class=\"plain\">,</code><code class=\"string\">'Flintstone'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">var fredsName = fred.fullName(); </code><code class=\"comments\">// \"Fred Flinstone\"</code></div>\n</div>\n</div> <p>\n(You should not mix and match usage of <tt class=\" \">module.exports</tt> and <tt class=\" \">exports.*</tt>.)    </p>\n<p>\nCommonJS is being rapidly and widely adopted by professional JavaScript programmers. It is implemented in high-profile projects like <a class=\"external-link external-link\" href=\"http://nodejs.org/\" target=\"_blank\">Node.js</a>, NarwhalJS, <a class=\"external-link external-link\" href=\"http://www.sproutcore.com/\" target=\"_blank\">SproutCore</a>, and more. Much of the code currently being written by our team members follows the CommonJS <tt class=\" \">require()</tt> module pattern. We encourage you to use this pattern in your Titanium projects.    </p>\n<p>\nSome additional CommonJS resources we recommend you check out are:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/CommonJS_Modules_in_Titanium\" CommonJS_Modules_in_Titanium.html=\"CommonJS_Modules_in_Titanium.html\">CommonJS Modules in Titanium</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://vimeopro.com/appcelerator/forging-titanium/video/27447911\" target=\"_blank\">Forging Titanium Episode 1: CommonJS Modules</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"https://github.com/appcelerator-titans/TodoList\" target=\"_blank\">ToDoList Sample App</a> </p>\n</li></ul> </div>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"29004891_CodingStrategies-Model-View-ControllerusingtheAlloyFramework\">\n<h3 class=\"heading \"><span>Model-View-Controller using the Alloy Framework</span></h3>\n<p>\nThe Alloy framework provides an alternate model for developing Titanium applications. Alloy is a Model-View-Controller (MVC) framework for Titanium that allows you to define UI elements in declarative markup, instead of code. For more information, see:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Alloy_Framework\" Alloy_Framework.html=\"Alloy_Framework.html\">Alloy Framework</a> </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"29004891_CodingStrategies-Hands-onPractice\">\n<h2 class=\"heading \"><span>Hands-on Practice</span></h2>\n<div class=\"section section-3 \" id=\"29004891_CodingStrategies-Goal\">\n<h3 class=\"heading \"><span>Goal</span></h3>\n<p>\nIn this activity, you will create a project in which you first implement the self-calling function pattern. Then, you'll refactor the code to implement the CommonJS module pattern.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004891_CodingStrategies-Steps\">\n<h3 class=\"heading \"><span>Steps</span></h3>\n<p>\n<strong class=\" \">Part A</strong> </p>\n<ol class=\" \"><li class=\" \"> <p>\nIn Studio, create a new project. Delete the default content of app.js.    </p>\n</li><li class=\" \"> <p>\nUsing the module/self-calling technique outlined above, write an app that:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nDefines a single, hierarchical namespace such that only one variable is added to the global namespace    </p>\n</li><li class=\" \"> <p>\nOpens a window with a red background.    </p>\n</li><li class=\" \"> <p>\nIncludes a single label with white text, centered at the top of the window. Use the label text of your choice.    </p>\n</li><li class=\" \"> <p>\nIncludes a method to update the label's text. Use <tt class=\" \">setTimeout()</tt> to update the label with new text after a few second delay.    </p>\n</li><li class=\" \"> <p>\nIf you implement this app in multiple files, add the necessary <tt class=\" \">Ti.include()</tt> statement to import them all.    </p>\n</li></ul></li><li class=\" \"> <p>\nBuild and test your app in the simulator/emulator.    </p>\n</li></ol> <p>\n<strong class=\" \">Part B</strong> </p>\n<ol class=\" \"><li class=\" \"> <p>\nRefactor the code to use the CommonJS <tt class=\" \">require()</tt> technique. Your app should still only define a single, hierarchical namespace such that only one variable is added to the global namespace.    </p>\n</li><li class=\" \"> <p>\nBuild and test your app in the simulator/emulator.    </p>\n</li></ol> </div>\n<div class=\"section section-3 \" id=\"29004891_CodingStrategies-ReferencesandFurtherReading\">\n<h3 class=\"heading \"><span>References and Further Reading</span></h3>\n<ul class=\" \"><li class=\" \"> <p>\nFinished code for <a class=\"external-link external-link\" href=\"http://assets.appcelerator.com.s3.amazonaws.com/app_u/ebook/2.3_codingpatterns_A.zip\" target=\"_blank\">Part A</a> and <a class=\"external-link external-link\" href=\"http://assets.appcelerator.com.s3.amazonaws.com/app_u/ebook/2.3_codingpatterns_B.zip\" target=\"_blank\">Part B</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/CommonJS_Modules_in_Titanium\" CommonJS_Modules_in_Titanium.html=\"CommonJS_Modules_in_Titanium.html\">CommonJS Modules in Titanium</a> (Titanium Mobile best practices guide)    </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://www.hunlock.com/blogs/Functional_Javascript\" target=\"_blank\">Functional JavaScript</a> </p>\n</li><li class=\" \"> <p>\nVideo: <a class=\"external-link external-link\" href=\"http://yuilibrary.com/theater/douglas-crockford/crockonjs-3/\" target=\"_blank\">Douglas Crockford on JavaScript functions</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://yuiblog.com/blog/2007/06/12/module-pattern/\" target=\"_blank\">Module Pattern</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://addyosmani.com/resources/essentialjsdesignpatterns/book/\" target=\"_blank\">Essential JavaScript Design Patterns ebook</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://addyosmani.com/largescalejavascript\" target=\"_blank\">Patterns For Large-Scale JavaScript Application Architecture</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\" target=\"_blank\">Immediately Invoked Function Expressions</a> </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"29004891_CodingStrategies-Summary\">\n<h2 class=\"heading \"><span>Summary</span></h2>\n<p>\nIn this chapter, you examined techniques for writing large JavaScript applications within the Titanium environment. You also looked at some coding patterns that can help you organize your code, reduce repetition, and ease development and maintenance. Next we'll look at how we can developer Titanium apps for multiple mobile platforms with a single code base.    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Coding Strategies"});