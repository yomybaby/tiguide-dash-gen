Ext.data.JsonP['Internationalization']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Internationalization</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004892\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004892\"><span>Edit</span></a>\n<h1>Internationalization</h1>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Objective\" Internationalization.html#29004892_Internationalization-Objective=\"Internationalization.html#29004892_Internationalization-Objective\">Objective</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Contents\" Internationalization.html#29004892_Internationalization-Contents=\"Internationalization.html#29004892_Internationalization-Contents\">Contents</a> </p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Languagestrings\" Internationalization.html#29004892_Internationalization-Languagestrings=\"Internationalization.html#29004892_Internationalization-Languagestrings\">Language strings</a> </p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Resourcefilestructure\" Internationalization.html#29004892_Internationalization-Resourcefilestructure=\"Internationalization.html#29004892_Internationalization-Resourcefilestructure\">Resource file structure</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Gettingalocalizedstring\" Internationalization.html#29004892_Internationalization-Gettingalocalizedstring=\"Internationalization.html#29004892_Internationalization-Gettingalocalizedstring\">Getting a localized string</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Replacingvaluesinalocalizedstring\" Internationalization.html#29004892_Internationalization-Replacingvaluesinalocalizedstring=\"Internationalization.html#29004892_Internationalization-Replacingvaluesinalocalizedstring\">Replacing values in a localized string</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-iOS-specificlocalizations\" Internationalization.html#29004892_Internationalization-iOS-specificlocalizations=\"Internationalization.html#29004892_Internationalization-iOS-specificlocalizations\">iOS-specific localizations</a> </p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-LocalizeSystemButtonsandSubmittoInternationalAppStores\" Internationalization.html#29004892_Internationalization-LocalizeSystemButtonsandSubmittoInternationalAppStores=\"Internationalization.html#29004892_Internationalization-LocalizeSystemButtonsandSubmittoInternationalAppStores\">Localize System Buttons and Submit to International App Stores</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-LocalizePropertyListKeys\" Internationalization.html#29004892_Internationalization-LocalizePropertyListKeys=\"Internationalization.html#29004892_Internationalization-LocalizePropertyListKeys\">Localize Property List Keys</a> </p>\n</li></ul></li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Internationalizingtheapp%27sname\" Internationalization.html#29004892_Internationalization-Internationalizingtheapp%27sname=\"Internationalization.html#29004892_Internationalization-Internationalizingtheapp%27sname\">Internationalizing the app's name</a> </p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-ChangingLocaleforTesting\" Internationalization.html#29004892_Internationalization-ChangingLocaleforTesting=\"Internationalization.html#29004892_Internationalization-ChangingLocaleforTesting\">Changing Locale for Testing</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-AppNameLocalization\" Internationalization.html#29004892_Internationalization-AppNameLocalization=\"Internationalization.html#29004892_Internationalization-AppNameLocalization\">App Name Localization</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-AndroidAppNameLocalizationwithTitaniumSDK3.1.xandolder\" Internationalization.html#29004892_Internationalization-AndroidAppNameLocalizationwithTitaniumSDK3.1.xandolder=\"Internationalization.html#29004892_Internationalization-AndroidAppNameLocalizationwithTitaniumSDK3.1.xandolder\">Android App Name Localization with Titanium SDK 3.1.x and older</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Reference\" Internationalization.html#29004892_Internationalization-Reference=\"Internationalization.html#29004892_Internationalization-Reference\">Reference</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Links\" Internationalization.html#29004892_Internationalization-Links=\"Internationalization.html#29004892_Internationalization-Links\">Links</a> </p>\n</li></ul></li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Internationalizingimageandfileresources\" Internationalization.html#29004892_Internationalization-Internationalizingimageandfileresources=\"Internationalization.html#29004892_Internationalization-Internationalizingimageandfileresources\">Internationalizing image and file resources</a> </p>\n</li></ul></li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Dateandtimeformatting\" Internationalization.html#29004892_Internationalization-Dateandtimeformatting=\"Internationalization.html#29004892_Internationalization-Dateandtimeformatting\">Date and time formatting</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Otherformattingandlocalefunctions\" Internationalization.html#29004892_Internationalization-Otherformattingandlocalefunctions=\"Internationalization.html#29004892_Internationalization-Otherformattingandlocalefunctions\">Other formatting and locale functions</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-TestingLanguages\" Internationalization.html#29004892_Internationalization-TestingLanguages=\"Internationalization.html#29004892_Internationalization-TestingLanguages\">Testing Languages</a> </p>\n</li></ul></li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Hands-onPractice\" Internationalization.html#29004892_Internationalization-Hands-onPractice=\"Internationalization.html#29004892_Internationalization-Hands-onPractice\">Hands-on Practice</a> </p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Goal\" Internationalization.html#29004892_Internationalization-Goal=\"Internationalization.html#29004892_Internationalization-Goal\">Goal</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Steps\" Internationalization.html#29004892_Internationalization-Steps=\"Internationalization.html#29004892_Internationalization-Steps\">Steps</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-ReferencesandFurtherReading\" Internationalization.html#29004892_Internationalization-ReferencesandFurtherReading=\"Internationalization.html#29004892_Internationalization-ReferencesandFurtherReading\">References and Further Reading</a> </p>\n</li></ul></li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-Summary\" Internationalization.html#29004892_Internationalization-Summary=\"Internationalization.html#29004892_Internationalization-Summary\">Summary</a> </p>\n</li></ul> <div class=\"section section-2 \" id=\"29004892_Internationalization-Objective\">\n<h2 class=\"heading \"><span>Objective</span></h2>\n<p>\nIn this section, you will learn how you can seamlessly internationalize your Titanium apps. We'll look specifically how you can use external language files to display text in the user's preferred language.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004892_Internationalization-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<p>\nTitanium provides a number of JavaScript functions in the <tt class=\" \">Titanium.Locale</tt> namespace for use in localization. It also provides <tt class=\" \">String</tt> formatting functions to handle dates, times, currencies, and more. You can even internationalize the name of your app itself. We'll look at those features, as well as how to test your language settings in this section.    </p>\n<div class=\"section section-3 \" id=\"29004892_Internationalization-Languagestrings\">\n<h3 class=\"heading \"><span>Language strings</span></h3>\n<p>\nRather than hard-coding strings into your project, you can use localized strings. Localized strings are replaced at runtime with values appropriate to the user's language. Titanium relies on resources files and string placeholders to accomplish this task.    </p>\n<p>\nAt the top level of your Titanium project (the same level as <tt class=\" \">tiapp.xml</tt> and the <tt class=\" \">Resources</tt> directory), you will create a folder called <tt class=\" \">i18n</tt>. Inside this folder, you will have folders for each of the supported languages in your application, named according to the <a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/ISO_639-1\" target=\"_blank\">ISO 639-1</a> standard. For example, <tt class=\" \">en</tt> for English, is the default.    </p>\n<p>\n<img src=\"images/download/attachments/29004892/resources.jpg\" alt=\"images/download/attachments/29004892/resources.jpg\" class=\"confluence-embedded-image\" />\n</p>\n<div class=\"section section-4 \" id=\"29004892_Internationalization-Resourcefilestructure\">\n<h4 class=\"heading \"><span>Resource file structure</span></h4>\n<p>\nThe string resource file closely mirrors the format of Android localization files, which have an XML-based format. The name attribute represents the 'key' for the string, and the text inside the XML node represents the value. A typical <tt class=\" \">strings.xml</tt> file would look like the following:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">strings.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;resources&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"welcome_message\"</code><code class=\"plain\">&gt;Welcome to Kitchen Sink </code><code class=\"keyword\">for</code><code class=\"plain\"> Titanium&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"user_agent_message\"</code><code class=\"plain\">&gt;user agent set to&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"format_test\"</code><code class=\"plain\">&gt;Your name is %s&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"base_ui_title\"</code><code class=\"plain\">&gt;Base UI&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"controls_win_title\"</code><code class=\"plain\">&gt;Controls&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"phone_win_title\"</code><code class=\"plain\">&gt;Phone&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"platform_win_title\"</code><code class=\"plain\">&gt;Platform&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"mashups_win_title\"</code><code class=\"plain\">&gt;Mashups&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"ordered\"</code><code class=\"plain\">&gt;Hi %</code><code class=\"value\">1</code><code class=\"plain\">$s, my name is %</code><code class=\"value\">2</code><code class=\"plain\">$s&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/resources&gt;</code></div>\n</div>\n</div> <p>\nResource files are processed and included with your application at build time by our Titanium build scripts. This means that these strings won't be processed if you use Xcode or Eclipse to build your project natively.    </p>\n<div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\n<strong class=\" \">Android Platform Notes</strong> </p>\n<ol class=\" \"><li class=\" \"> <p>\nIf you have XML files in both the <tt class=\" \">i18n</tt> and <tt class=\" \">platform/android</tt> folders, the Titanium build scripts will try to merge the files together in the <tt class=\" \">build</tt> folder. If there are any conflicts, the build fails. Currently, if modules contain any files in the <tt class=\" \">platform/android</tt> folder, these files overwrite the build files.    </p>\n</li><li class=\" \"> <p>\nIf you have strings using multiple substitutions, as demonstrated in the &quot;ordered&quot; string in the previous example, you may need to add the <tt class=\" \">formatted=&quot;false&quot;</tt> attribute to these string elements if the localized string is not created correctly when running the application.    </p>\n</li><li class=\" \"> <p>\nWhen editing the strings.xml file, be sure to clean your project before building again.    </p>\n</li></ol> </div>\n<p>\nString resource names (the &quot;keys&quot;) must begin with a letter, and can contain digits, English characters, and the underscore. The contents (values) of each string resource must be <a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/UTF-8\" target=\"_blank\">UTF-8</a> compatible strings. While a given platform may not crash or throw an exception if you don't follow these rules, there's a good chance you will encounter some unexpected behavior.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004892_Internationalization-Gettingalocalizedstring\">\n<h4 class=\"heading \"><span>Getting a localized string</span></h4>\n<p>\nTitanium provides two functions for obtaining a localized string from your resource files. Both take the key of the string requested as their first parameter. The <tt class=\" \">L()</tt> macro is a short form for <a class=\"external-link external-link\" href=\"#!/api/Titanium.Locale-method-getString\">Ti.Locale.getString()</a>:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var str1 = L(</code><code class=\"string\">'welcome_message'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">var str2 = Ti.Locale.getString(</code><code class=\"string\">'welcome_message'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"comments\">// str1 === str2</code></div>\n</div>\n</div> <p>\nTo handle situations where no key exists in the <tt class=\" \">strings.xml</tt> file, the <a class=\"external-link external-link\" href=\"#!/api/Titanium.Locale-method-getString\">L() macro</a> accepts a second argument to provide default <tt class=\" \">hint</tt> text:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var str1 = L(</code><code class=\"string\">'missingKey'</code><code class=\"plain\">, </code><code class=\"string\">'No translation available'</code><code class=\"plain\">);</code></div>\n</div>\n</div> <p>\nAdditionally, you can use the <tt class=\" \">titleid</tt> property of Titanium UI objects, such as labels or buttons, to directly reference a string resource without using the <tt class=\" \">L()</tt> macro. For example:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var label = Ti.UI.createLabel({</code></div>\n<div class=\"line\"><code class=\"plain\">\ttitleid: </code><code class=\"string\">'welcome_message'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">/*</code></div>\n<div class=\"line\"><code class=\"comments\">* is equivalent to</code></div>\n<div class=\"line\"><code class=\"comments\">*   var label = Ti.UI.createLabel({</code></div>\n<div class=\"line\"><code class=\"comments\">*   text: L('welcome_message')</code></div>\n<div class=\"line\"><code class=\"comments\">* });</code></div>\n<div class=\"line\"><code class=\"comments\">*/</code></div>\n</div>\n</div> </div>\n<div class=\"section section-4 \" id=\"29004892_Internationalization-Replacingvaluesinalocalizedstring\">\n<h4 class=\"heading \"><span>Replacing values in a localized string</span></h4>\n<p>\nYou probably noticed the %1 and %2 placeholders in the sample <tt class=\" \">strings.xml</tt> file above. The <tt class=\" \">String</tt> object in Titanium contains a <tt class=\" \">format</tt> function which formats strings according to the <a class=\"external-link external-link\" href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\" target=\"_blank\">IEEE printf specification</a>. If your localization string contains replacement keys, as <tt class=\" \">format_test</tt> does in our example file above, you can replace values into your localized string like so:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var formatted = String.format(L(</code><code class=\"string\">'format_test'</code><code class=\"plain\">),</code><code class=\"string\">'Kevin'</code><code class=\"plain\">); </code><code class=\"comments\">// contains 'Your name is Kevin'</code></div>\n</div>\n</div> <p>\nUsing the other replacement values from the printf spec, you can also do ordered values:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var formatted = String.format(L(</code><code class=\"string\">'ordered'</code><code class=\"plain\">), </code><code class=\"string\">'Jeff'</code><code class=\"plain\">, </code><code class=\"string\">'Kevin'</code><code class=\"plain\">); </code><code class=\"comments\">// contains 'Hi Jeff, my name is Kevin'</code></div>\n</div>\n</div> </div>\n<div class=\"section section-4 \" id=\"29004892_Internationalization-iOS-specificlocalizations\">\n<h4 class=\"heading \"><span>iOS-specific localizations</span></h4>\n<p>\nOn iOS applications, you can localize the names of system buttons, such as &quot;Save&quot; and &quot;Cancel&quot;, and the values of pList keys.  You also need to modify the plist section of the <tt class=\" \">tiapp.xml</tt> file in order to submit your application to international App Stores.    </p>\n<div class=\"section section-5 \" id=\"29004892_Internationalization-LocalizeSystemButtonsandSubmittoInternationalAppStores\">\n<h5 class=\"heading \"><span>Localize System Buttons and Submit to International App Stores</span></h5>\n<p>\nTo localize system buttons or submit your application to international iTunes App Stores, add the <tt class=\" \">CFBundleLocalizations</tt> key to the iOS plist section of the project's <tt class=\" \">tiapp.xml</tt> file.  Assign the <tt class=\" \">CFBundleLocalizations</tt> key an array of strings.  Each string is the ISO 639-1 standard name of the language you want the application to support.  For example, to support English, Spanish and French, add the following to the application's <tt class=\" \">tiapp.xml</tt> file:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">tiapp.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;ti:app&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;ios&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">        &lt;plist&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">            &lt;dict&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">                &lt;key&gt;CFBundleLocalizations&lt;/key&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">                &lt;array&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">                    &lt;string&gt;en&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">                    &lt;string&gt;fr&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">                    &lt;string&gt;es&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">                &lt;/array&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">            &lt;/dict&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">        &lt;/plist&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;/ios&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/ti:app&gt;</code></div>\n</div>\n</div> </div>\n<div class=\"section section-5 \" id=\"29004892_Internationalization-LocalizePropertyListKeys\">\n<h5 class=\"heading \"><span>Localize Property List Keys</span></h5>\n<p>\nTo localize property list key values (Info.plist keys), add <tt class=\" \">string</tt> elements to the <tt class=\" \">app.xml</tt> file with the name attribute set to the property list key and the node text to the localized string to display.  For example, the following file provides French versions of several dialog messages displayed to the user when asking for permission to use their location, contacts or calendar.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">i18n/fr/app.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;?xml version=</code><code class=\"string\">\"1.0\"</code><code class=\"plain\"> encoding=</code><code class=\"string\">\"UTF-8\"</code><code class=\"plain\">?&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;resources&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"NSLocationAlwaysUsageDescription\"</code><code class=\"plain\">&gt;Où allez-vous?&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"NSContactsUsageDescription\"</code><code class=\"plain\">&gt;Avez-vous des amis?&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"NSCalendarsUsageDescription\"</code><code class=\"plain\">&gt;Bon voyage.&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/resources&gt;</code></div>\n</div>\n</div> <p>\n</p>\n</div>\n</div>\n<div class=\"section section-4 \" id=\"29004892_Internationalization-Internationalizingtheapp'sname\">\n<h4 class=\"heading \"><span>Internationalizing the app's name</span></h4>\n<p>\nOne thing that has been a little tricky for some developers, is changing the application name based on locale.    </p>\n<p>\nFor example, say you had an application named <strong class=\" \">&quot;Cat&quot;</strong>, but you wanted it to be <strong class=\" \">&quot;Gato&quot;</strong> in Spanish locales, <strong class=\" \">&quot;&#29483;&quot;</strong> in Japanese, and so on. Let 's see how you would prepare your application to display its name appropriately for both iOS and Android distributions.    </p>\n<div class=\"section section-5 \" id=\"29004892_Internationalization-ChangingLocaleforTesting\">\n<h5 class=\"heading \"><span>Changing Locale for Testing</span></h5>\n<p>\nBefore learning to configure your apps to use localized strings for application names, let's first see how we can change locales manually for testing. Below you can find short videos for both iOS and Android that show you exactly how to do that.    </p>\n<p>\n</p>\n<p>\n<a class=\"external-link \" href=\"http://vimeo.com/36991188\" target=\"_blank\">Change Locale on iPhone</a> from <a class=\"external-link \" href=\"http://vimeo.com/appcelerator\" target=\"_blank\">Appcelerator Video Channel</a> on <a class=\"external-link \" href=\"https://vimeo.com\" target=\"_blank\">Vimeo</a>.    </p>\n</div>\n<div class=\"section section-5 \" id=\"29004892_Internationalization-AppNameLocalization\">\n<h5 class=\"heading \"><span>App Name Localization</span></h5>\n<p>\nFor iOS applications and if you are using Titanium SDK 3.2.0 and greater to build your Android applications, it's pretty simple. Use the standard method for creating localization paths, which means creating and using the <tt class=\" \">i18n</tt> directory like this:    </p>\n<p>\n<img src=\"images/download/attachments/29004892/Screen_Shot_2012_02_17_at_6_36_41_PM.png\" alt=\"images/download/attachments/29004892/Screen_Shot_2012_02_17_at_6_36_41_PM.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n<p>\nIn each of your language directories under <tt class=\" \">i18n</tt>, you'll include an <tt class=\" \">app.xml</tt> file that includes the necessary XML structure for defining the localized name of your app. That structure will look like this for each file:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">i18n/en/app.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;resources&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"appname\"</code><code class=\"plain\">&gt;Cat&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/resources&gt;</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">i18n/es/app.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;resources&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"appname\"</code><code class=\"plain\">&gt;Gato&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/resources&gt;</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">i18n/ja/app.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;resources&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;string name=</code><code class=\"string\">\"appname\"</code><code class=\"plain\">&gt;猫&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/resources&gt;</code></div>\n</div>\n</div> <p>\nAnd that's it. The next time you build your application, these localized strings will be used for your application name. If everything was configured correctly, you'll see the app name has changed based on the selected locale.    </p>\n</div>\n<div class=\"section section-5 \" id=\"29004892_Internationalization-AndroidAppNameLocalizationwithTitaniumSDK3.1.xandolder\">\n<h5 class=\"heading \"><span>Android App Name Localization with Titanium SDK 3.1.x and older</span></h5>\n<p>\nIf you are using Titanium SDK 3.1.x and older to build your Android apps, the name localization is a little more involved. First, we need to create language-specific resource folders explicitly for Android. To do so, we will create the <tt class=\" \">platform/android/res/values-(language code)</tt> directory structure, like this:    </p>\n<p>\n<img src=\"images/download/attachments/29004892/Screen_Shot_2012_02_17_at_6_52_44_PM.png\" alt=\"images/download/attachments/29004892/Screen_Shot_2012_02_17_at_6_52_44_PM.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n<p>\nYou'll notice in this case we are creating the Android native <tt class=\" \">strings.xml</tt> files, rather than the <tt class=\" \">app.xml</tt> files used by iOS. While the file names are different, the contents will be identical to those in the iOS files <a class=\"document-link \" href=\"#!/guide/Internationalization-section-29004892_Internationalization-appxml\" Internationalization.html#29004892_Internationalization-appxml=\"Internationalization.html#29004892_Internationalization-appxml\">seen above</a>.    </p>\n<p>\nAside from the <tt class=\" \">strings.xml</tt> files, there's one more thing we need to add. To make your app use these localized strings, you need to modify the existing <tt class=\" \">AndroidManifest.xml</tt>. In order to do that, we need to add that custom manifest file, seen in the picture above at <tt class=\" \">platform/android/AndroidManifest.xml</tt>. The <tt class=\" \">AndroidManifest.xml</tt> file placed here should be a copy of the generated <tt class=\" \">AndroidManifest.xml</tt> file found in your project's <tt class=\" \">build/android</tt> directory. For more details on custom <tt class=\" \">AndroidManifest.xml</tt> files, check out <a class=\"document-link \" href=\"#!/guide/Maintaining_a_Custom_AndroidManifest.xml\" Maintaining_a_Custom_AndroidManifest.xml.html=\"Maintaining_a_Custom_AndroidManifest.xml.html\">this wiki entry</a> on the topic.    </p>\n<p>\nNow open up <tt class=\" \">platform/android/AndroidManifest.xml</tt> and change the <tt class=\" \">android:label</tt> attributes of the <tt class=\" \">&lt;application&gt;</tt> and <tt class=\" \">&lt;activity&gt;</tt> elements from the defined value of your app name to the value <tt class=\" \">@string/app_name</tt>. Yeah, that was a lot of instructions all in one sentence, so here's an example to show you what I mean:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">AndroidManifest.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;!-- ... --&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;!-- TI_MANIFEST --&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;application android:icon=</code><code class=\"string\">\"@drawable/appicon\"</code></div>\n<div class=\"line\"><code class=\"plain\">\tandroid:label=</code><code class=\"string\">\"@string/app_name\"</code><code class=\"plain\"> android:name=</code><code class=\"string\">\"TestlocApplication\"</code></div>\n<div class=\"line\"><code class=\"plain\">\tandroid:debuggable=</code><code class=\"string\">\"false\"</code><code class=\"plain\">&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t&lt;!-- TI_APPLICATION --&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t&lt;activity android:name=</code><code class=\"string\">\".TestlocActivity\"</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tandroid:label=</code><code class=\"string\">\"@string/app_name\"</code><code class=\"plain\"> android:theme=</code><code class=\"string\">\"@style/Theme.Titanium\"</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tandroid:configChanges=</code><code class=\"string\">\"keyboardHidden|orientation\"</code><code class=\"plain\">&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t&lt;intent-filter&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t&lt;action android:name=</code><code class=\"string\">\"android.intent.action.MAIN\"</code><code class=\"plain\"> /&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t        category android:name=</code><code class=\"string\">\"android.intent.category.LAUNCHER\"</code><code class=\"plain\"> /&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t&lt;/intent-filter&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t&lt;/activity&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;!-- The rest of your AndroidManifest.xml --&gt;</code></div>\n</div>\n</div> <p>\nWith these changes in place, you can now rebuild your app (probably best to give it a clean first) and you'll have a successfully localized application name.    </p>\n</div>\n<div class=\"section section-5 \" id=\"29004892_Internationalization-Reference\">\n<h5 class=\"heading \"><span>Reference</span></h5>\n<p>\nThis is how your home screens might look on Android and iOS when Japanese is the selected language.    </p>\n<div class=\"tablewrap\">\n<table class=\"confluenceTable\">\n<thead class=\" \"></thead><tfoot class=\" \"></tfoot><tbody class=\" \"> <tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<img src=\"images/download/attachments/29004892/Screen_Shot_2012_02_17_at_8_52_33_PM.png\" alt=\"images/download/attachments/29004892/Screen_Shot_2012_02_17_at_8_52_33_PM.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<img src=\"images/download/attachments/29004892/image.png\" alt=\"images/download/attachments/29004892/image.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n</td>\n</tr>\n</tbody> </table>\n</div>\n<p>\nAnd just in case my description was clear as mud, check out a Titanium project with these localizations set up first hand. Just go to the <a class=\"external-link external-link\" href=\"https://github.com/appcelerator-developer-relations/AppNameLocalization\" target=\"_blank\">AppNameLocalization project repository</a> on Github. It contains the <i class=\" \">very</i> basic project discussed here. With all this, you should be well-equipped to distribute your apps in as many languages as you wish to support.    </p>\n</div>\n<div class=\"section section-5 \" id=\"29004892_Internationalization-Links\">\n<h5 class=\"heading \"><span>Links</span></h5>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"https://github.com/appcelerator-developer-relations/AppNameLocalization\" target=\"_blank\">AppNameLocalization project</a> on Github    </p>\n</li><li class=\" \"> <p>\nAppcelerator Wiki: <a class=\"document-link \" href=\"#!/guide/Maintaining_a_Custom_AndroidManifest.xml\" Maintaining_a_Custom_AndroidManifest.xml.html=\"Maintaining_a_Custom_AndroidManifest.xml.html\">Maintaining a Custom AndroidManifest.xml</a> </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-4 \" id=\"29004892_Internationalization-Internationalizingimageandfileresources\">\n<h4 class=\"heading \"><span>Internationalizing image and file resources</span></h4>\n<p>\nTitanium does not provide built-in functions for internationalizing image and file resources. But you can easily accomplish this yourself. There are a couple of techniques you can employ:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nPut the path and file name of each resource in the <tt class=\" \">strings.xml</tt> file, then use that string in the <tt class=\" \">image</tt>property, like this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var img = Ti.UI.createImageView({</code></div>\n<div class=\"line\"><code class=\"plain\">\timage: L(</code><code class=\"string\">'my_image'</code><code class=\"plain\">)</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div></li><li class=\" \"> <p>\nPut your images into a set of folders that match the 2-letter ISO codes, and include that directory in the path with <tt class=\" \">Ti.Locale.currentCountry</tt>, like this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var img = Ti.UI.createImageView({</code></div>\n<div class=\"line\"><code class=\"plain\">\timage: </code><code class=\"string\">'images/'</code><code class=\"plain\">+Ti.Locale.currentCountry+</code><code class=\"string\">'/my_image.png'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div></li></ul> <p>\n</p>\n<div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\nThis technique won't work for the splash screen graphics. You should ideally avoid text that would need translation in your splash screen.    </p>\n<p>\nSee <a class=\"document-link \" href=\"#!/guide/Icons_and_Splash_Screens-section-29004897_IconsandSplashScreens-LocalizedSplashScreens\" Icons_and_Splash_Screens.html#29004897_IconsandSplashScreens-LocalizedSplashScreens=\"Icons_and_Splash_Screens.html#29004897_IconsandSplashScreens-LocalizedSplashScreens\">Icons and Splash Screens: Localized Splash Screen</a> for more information.    </p>\n</div>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"29004892_Internationalization-Dateandtimeformatting\">\n<h3 class=\"heading \"><span>Date and time formatting</span></h3>\n<p>\nTitanium provides <a class=\"external-link external-link\" href=\"#!/api/Titanium#string_formatting\">string formatting functions</a> that you can use to create formatted dates and times. These include <tt class=\" \">String.formatDate()</tt> and <tt class=\" \">String.formatTime()</tt>. You can use these methods to format a JavaScript Date object to locale-specific strings.    </p>\n<p>\nAt the time of this writing, natively, Android does not format dates in accordance with the official <a class=\"external-link external-link\" href=\"http://developer.android.com/reference/java/text/DateFormat.html\" target=\"_blank\">DateFormat</a> documentation. Consequently, this will affect the corresponding <tt class=\" \">short</tt>, <tt class=\" \">medium</tt> and <tt class=\" \">long</tt> formats of <a class=\"external-link external-link\" href=\"#!/api/Titanium#string_formatting\">Titanium String Formatting</a>. Furthermore, when the device settings are set to certain languages, the translations can be wrong or fields in the incorrect order. For example, the following code is run on a device to demonstrate the issue:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"Ti.Locale.currentLanguage = \"</code><code class=\"plain\"> + Ti.Locale.currentLanguage);</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"Ti.Locale.currentLocale = \"</code><code class=\"plain\"> + Ti.Locale.currentLocale);</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"thisDate = \"</code><code class=\"plain\"> + thisDate);</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"thisDate short = \"</code><code class=\"plain\"> + String.formatDate(thisDate,</code><code class=\"string\">\"short\"</code><code class=\"plain\">));</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"thisDate medium = \"</code><code class=\"plain\"> + String.formatDate(thisDate,</code><code class=\"string\">\"medium\"</code><code class=\"plain\">));</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"thisDate long = \"</code><code class=\"plain\"> + String.formatDate(thisDate,</code><code class=\"string\">\"long\"</code><code class=\"plain\">));</code></div>\n</div>\n</div> <p>\nThis results in the following when the device is set to display in Polish:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Log output (info)</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">1</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [4,603] Ti.Locale.currentLanguage = pl</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">1</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [3,606] Ti.Locale.currentLocale = pl-PL</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">1</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [7,613] thisDate = Mon May 23 2011 13:38:33 GMT-0000 (GMT+00:00)</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">1</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [6,619] thisDate short = 23-05-2011</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">1</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [6,625] thisDate medium = 23-05-2011</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">1</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [4,629] thisDate long = 23 maja 2011</code></div>\n</div>\n</div> <p>\nHere, <tt class=\" \">maja</tt> is output for the month of May, whereas the Polish for May is actually <i class=\" \">Maj</i>.    </p>\n<p>\nSimilarly, when the device is set to <i class=\" \">English (United Kingdom)</i>, the month fields are incorrectly displayed before the dates:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Log output (info)</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">3</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [2,1056] Ti.Locale.currentLanguage = en</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">3</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [1,1057] Ti.Locale.currentLocale = en-GB</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">3</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [9,1066] thisDate = Mon May 23 2011 14:09:28 GMT-0000 (GMT+00:00)</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">3</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [258,1324] thisDate short = 5/23/11</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">3</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [4,1328] thisDate medium = May 23, 2011</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">3</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [13,1341] thisDate long = May 23, 2011</code></div>\n</div>\n</div> <p>\nThis issue may well be fixed by the time you read this but, nevertheless, it gives us an opportunity to employ some of Titanium's tools to provide a workaround that gives you full control over the date format and translations.    </p>\n<p>\nWe can use JavaScipt's <a class=\"external-link external-link\" href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date\" target=\"_blank\">Date</a> object to return the date, which provides methods such as <tt class=\" \">getDate()</tt> and <tt class=\" \">getFullYear()</tt> to individually retrieve some of the information that we need. Although it does not specifically provide a method for returning the name of the month, we can derive it, in English, from the space-separated string output from <tt class=\" \">Date.</tt> To do so, we'll use the JavaScipt <a class=\"external-link external-link\" href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\">String.split()</a> function. This will give us a key to lookup in the <tt class=\" \">string.xml</tt> files.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var thisDate = </code><code class=\"keyword\">new</code><code class=\"plain\"> Date(); </code><code class=\"comments\">// will always return date in English</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"Ti.Locale.currentLanguage = \"</code><code class=\"plain\"> + Ti.Locale.currentLanguage);</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"Ti.Locale.currentLocale = \"</code><code class=\"plain\"> + Ti.Locale.currentLocale);</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"thisDate = \"</code><code class=\"plain\"> + thisDate);</code></div>\n<div class=\"line\"><code class=\"plain\">var thisMonth = thisDate.toString().split(</code><code class=\"string\">' '</code><code class=\"plain\">,</code><code class=\"value\">2</code><code class=\"plain\">)[</code><code class=\"value\">1</code><code class=\"plain\">];</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"The month contained in thisDate is: \"</code><code class=\"plain\"> + thisMonth);</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"Note: as thisMonth is always in the default language, English, it can be used to look up the localized string.\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(</code><code class=\"string\">\"Hence, the localized string, headingDate, in the language of \"</code><code class=\"plain\"> + Ti.Locale.currentLanguage + </code><code class=\"string\">\" is:\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.API.info(String.format(L(</code><code class=\"string\">'headingDate'</code><code class=\"plain\">),thisDate.getDate(),L(thisMonth),thisDate.getFullYear()));</code></div>\n</div>\n</div> <p>\nUsing string substitution placeholders, dynamic values can be passed to the <tt class=\" \">headingDate</tt> string. This enables each locale to display the fields in a different order. In the following <tt class=\" \">string.xml</tt> files, Polish and English translations will return the date in the default order, whereas Spanish will result in a modified order.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">i18n/pl/strings.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;resources&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"headingDate\"</code><code class=\"plain\">&gt;%d %s %d&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"January\"</code><code class=\"plain\">&gt;Stycze?&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"February\"</code><code class=\"plain\">&gt;Luty&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"March\"</code><code class=\"plain\">&gt;Marzec&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"April\"</code><code class=\"plain\">&gt;Kwiecie?&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"May\"</code><code class=\"plain\">&gt;Maj&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"June\"</code><code class=\"plain\">&gt;Czerwiec&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"July\"</code><code class=\"plain\">&gt;Lipiec&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"August\"</code><code class=\"plain\">&gt;Sierpie?&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"September\"</code><code class=\"plain\">&gt;Wrzesie?&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"October\"</code><code class=\"plain\">&gt;Pa?dziernik&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"November\"</code><code class=\"plain\">&gt;Listopad&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"December\"</code><code class=\"plain\">&gt;Grudzie?&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/resources&gt;</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">i18n/en/strings.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;resources&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"headingDate\"</code><code class=\"plain\">&gt;%d %s %d&lt;/string&gt; </code><code class=\"comments\">// Note: reordered keys not working on Android. Issue under investigation</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"January\"</code><code class=\"plain\">&gt;January&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"February\"</code><code class=\"plain\">&gt;February&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"March\"</code><code class=\"plain\">&gt;March&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"April\"</code><code class=\"plain\">&gt;April&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"May\"</code><code class=\"plain\">&gt;May&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"June\"</code><code class=\"plain\">&gt;June&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"July\"</code><code class=\"plain\">&gt;July&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"August\"</code><code class=\"plain\">&gt;August&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"September\"</code><code class=\"plain\">&gt;September&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"October\"</code><code class=\"plain\">&gt;October&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"November\"</code><code class=\"plain\">&gt;November&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"December\"</code><code class=\"plain\">&gt;December&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/resources&gt;</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">i18n/es/strings.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;resources&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"headingDate\"</code><code class=\"plain\">&gt;%</code><code class=\"value\">2</code><code class=\"plain\">$s %</code><code class=\"value\">1</code><code class=\"plain\">$d, %</code><code class=\"value\">3</code><code class=\"plain\">$d&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"January\"</code><code class=\"plain\">&gt;enero&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"February\"</code><code class=\"plain\">&gt;febrero&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"March\"</code><code class=\"plain\">&gt;marzo&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"April\"</code><code class=\"plain\">&gt;abril&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"May\"</code><code class=\"plain\">&gt;mayo&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"June\"</code><code class=\"plain\">&gt;junio&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"July\"</code><code class=\"plain\">&gt;julio&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"August\"</code><code class=\"plain\">&gt;agosto&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"September\"</code><code class=\"plain\">&gt;septiembre&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"October\"</code><code class=\"plain\">&gt;octubre&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"November\"</code><code class=\"plain\">&gt;noviembre&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">  &lt;string name=</code><code class=\"string\">\"December\"</code><code class=\"plain\">&gt;diciembre&lt;/string&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/resources&gt;</code></div>\n</div>\n</div> <p>\nUsing this code, the date in Polish is translated correctly:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Log output (info)</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">3</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [1,1366]    Ti.Locale.currentLanguage = pl</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">3</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [1,1367]    Ti.Locale.currentLocale = pl-PL</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">3</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [33,1400]   thisDate = Mon May 23 2011 15:05:21 GMT-0000 (GMT+00:00)</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">3</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [38,1479]   The month contained in thisDate is: May</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">3</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [1,1480]    Note: as thisMonth is always in the default language, English, it can be used to look up the localized string.</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">3</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [12,1492]   Hence, the localized string, headingDate, in the language of pl is:</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">3</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [18,1510]   23 Maj 2011</code></div>\n</div>\n</div> <p>\nIn addition, the recognized date format for the UK is produced:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Log output (info)</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">1</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [2,577]     Ti.Locale.currentLanguage = en</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">1</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [2,579]     Ti.Locale.currentLocale = en-GB</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">1</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [2094,2673] thisDate = Mon May 23 2011 14:56:42 GMT-0000 (GMT+00:00)</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">1</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [20,2707]   The month contained in thisDate is: May</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">1</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [1,2708]    Note: as thisMonth is always in the default language, English, it can be used to look up the localized string.</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">1</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [1,2709]    Hence, the localized string, headingDate, in the language of en is:</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">1</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [13,2722]   23 May 2011</code></div>\n</div>\n</div> <p>\nLastly, the date in Spanish has been reordered:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Log output (info)</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">5</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [2,1066]    Ti.Locale.currentLanguage = es</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">5</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [6,1072]    Ti.Locale.currentLocale = es-US</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">5</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [169,1241]  thisDate = Mon May 23 2011 16:23:17 GMT-0000 (GMT+00:00)</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">5</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [32,1440]   The month contained in thisDate is: May</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">5</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [2,1442]    Note: as thisMonth is always in the default language, English, it can be used to look up the localized string.</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">5</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [14,1456]   Hence, the localized string, headingDate, in the language of es is:</code></div>\n<div class=\"line\"><code class=\"plain\">TiAPI  I  (kroll$</code><code class=\"value\">5</code><code class=\"plain\">: app:</code><code class=\"comments\">//app.js) [14,1470]   mayo 23, 2011</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004892_Internationalization-Otherformattingandlocalefunctions\">\n<h3 class=\"heading \"><span>Other formatting and locale functions</span></h3>\n<p>\nTitanium also provides <a class=\"external-link external-link\" href=\"#!/api/Titanium#string_formatting\">string formatting functions</a> that you can use to create formatted currency and decimal numbers. These functions are <tt class=\" \">String.formatCurrency()</tt> and <tt class=\" \">String.formatDecimal()</tt>, respectively. The <a class=\"external-link external-link\" href=\"#!/api/Titanium.Locale\">Ti.Locale module</a> provides the <tt class=\" \">Ti.Locale.formatTelephoneNumber()</tt> method for getting a locale-formatted phone number. That module also includes functions for retrieving the correct currency symbol and currency code for the user's locale.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004892_Internationalization-TestingLanguages\">\n<h3 class=\"heading \"><span>Testing Languages</span></h3>\n<p>\nWhen building internationalized apps, you'll need to test each of the supported languages. You can do so either on-device or in the simulator/emulator. In each case, you configure the device's language settings to change locales.    </p>\n<p>\nTo set the language on iOS:,    </p>\n<ul class=\" \"><li class=\" \"> <p>\nTap Settings, General, International.    </p>\n</li><li class=\" \"> <p>\nTap Language    </p>\n</li><li class=\" \"> <p>\nSelect the language to use. Tap Done (or OK).    </p>\n</li><li class=\" \"> <p>\nOptionally, in Settings, tap General, International, Region Format to specify your locale format for dates and times.    </p>\n</li></ul> <p>\n</p>\n<div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\nLocalization is broken on the iOS 8.1 simulator.    </p>\n</div>\n<p>\nTo set the language on Android:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nOpen your Android Settings    </p>\n</li><li class=\" \"> <p>\nTap Language and Keyboard.    </p>\n</li><li class=\" \"> <p>\nTap Select language    </p>\n</li><li class=\" \"> <p>\nTap the language to use    </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"29004892_Internationalization-Hands-onPractice\">\n<h2 class=\"heading \"><span>Hands-on Practice</span></h2>\n<div class=\"section section-3 \" id=\"29004892_Internationalization-Goal\">\n<h3 class=\"heading \"><span>Goal</span></h3>\n<p>\nIn this activity, you will create an internationalized app that outputs language-specific strings and test that in the simulator/emulator.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004892_Internationalization-Steps\">\n<h3 class=\"heading \"><span>Steps</span></h3>\n<ol class=\" \"><li class=\" \"> <p>\nCreate a new Titanium Mobile project named &quot;Language Test&quot; with an app ID of your choice.    </p>\n</li><li class=\" \"> <p>\nUsing your computer's file management tools, create an <tt class=\" \">i18n</tt> directory at the root of your project. In that directory, create two directories: <tt class=\" \">en</tt> and <tt class=\" \">es</tt>.    </p>\n</li><li class=\" \"> <p>\nUsing Studio, within the <tt class=\" \">en</tt> directory, create a <tt class=\" \">strings.xml</tt>file following the format shown above. Add three key/value pairs:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nlanguage = Language    </p>\n</li><li class=\" \"> <p>\ntest = Test    </p>\n</li><li class=\" \"> <p>\ntab = Tab    </p>\n</li></ul></li><li class=\" \"> <p>\nIn the <tt class=\" \">es</tt> directory, create a matching copy of <tt class=\" \">strings.xml</tt>except that the values should be as follows:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nlanguage = Lengua    </p>\n</li><li class=\" \"> <p>\ntest = Prueba    </p>\n</li><li class=\" \"> <p>\ntab = Leng&uuml;eta    </p>\n</li></ul></li><li class=\" \"> <p>\nIn the <tt class=\" \">es</tt> directory, create an <tt class=\" \">app.xml</tt> file following the format shown above. Add the necessary key and value to specify &quot;Lengua Prueba&quot; as the translated version of the app's name. (This won't have any effect if you're building for Android.)    </p>\n</li><li class=\" \"> <p>\nIn app.js, on tab 1, add the necessary code to output the internationalized &quot;Language Test&quot; string as the text of <tt class=\" \">label1</tt>.    </p>\n</li><li class=\" \"> <p>\nOn tab 2, change the text of <tt class=\" \">label2</tt> to output today's date using the <tt class=\" \">String.formatDate()</tt> method.    </p>\n</li><li class=\" \"> <p>\nFor both tab 1 and tab 2, update the text to use the internationalized &quot;tab&quot; key plus the tab's number.    </p>\n</li><li class=\" \"> <p>\nBuild the app for the simulator/emulator. The label and tab text should output in English (unless your emulator is already set to output text in Spanish). Close the app.    </p>\n</li><li class=\" \"> <p>\nChange the simulator/emulator's settings to display text in Spanish. Open the app. Label and tab text should now be in Spanish. On iOS, the app's icon should be labeled in Spanish as well.    </p>\n</li></ol> </div>\n<div class=\"section section-3 \" id=\"29004892_Internationalization-ReferencesandFurtherReading\">\n<h3 class=\"heading \"><span>References and Further Reading</span></h3>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"#!/api/Titanium.Locale\">Ti.Locale module</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"#!/api/Titanium#string_formatting\">String formatting functions</a> </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"29004892_Internationalization-Summary\">\n<h2 class=\"heading \"><span>Summary</span></h2>\n<p>\nIn this chapter, you learned how to internationalize your app, including using language strings, internationalizing the app name, and formatting strings, dates, and currency values.    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Internationalization"});