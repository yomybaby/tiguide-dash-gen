Ext.data.JsonP['Dynamic_Styles']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Dynamic Styles</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"37530415\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=37530415\"><span>Edit</span></a>\n<h1>Dynamic Styles</h1>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Dynamic_Styles-section-37530415_DynamicStyles-Introduction\" Dynamic_Styles.html#37530415_DynamicStyles-Introduction=\"Dynamic_Styles.html#37530415_DynamicStyles-Introduction\">Introduction</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Dynamic_Styles-section-37530415_DynamicStyles-DefineClassStyles\" Dynamic_Styles.html#37530415_DynamicStyles-DefineClassStyles=\"Dynamic_Styles.html#37530415_DynamicStyles-DefineClassStyles\">Define Class Styles </a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Dynamic_Styles-section-37530415_DynamicStyles-GenerateaDynamicStyle\" Dynamic_Styles.html#37530415_DynamicStyles-GenerateaDynamicStyle=\"Dynamic_Styles.html#37530415_DynamicStyles-GenerateaDynamicStyle\">Generate a Dynamic Style</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Dynamic_Styles-section-37530415_DynamicStyles-ModifyTSSClasses\" Dynamic_Styles.html#37530415_DynamicStyles-ModifyTSSClasses=\"Dynamic_Styles.html#37530415_DynamicStyles-ModifyTSSClasses\">Modify TSS Classes</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Dynamic_Styles-section-37530415_DynamicStyles-Autostyle\" Dynamic_Styles.html#37530415_DynamicStyles-Autostyle=\"Dynamic_Styles.html#37530415_DynamicStyles-Autostyle\">Autostyle</a> </p>\n</li></ul> <div class=\"section section-2 \" id=\"37530415_DynamicStyles-Introduction\">\n<h2 class=\"heading \"><span>Introduction</span></h2>\n<p>\n<u class=\" \">Since Alloy 1.2.0</u>, Alloy supports changing styles dynamically or during runtime.  There are two methods to support dynamic styling in Alloy.  You can either generate a dynamic style dictionary that can be passed to <tt class=\" \">applyProperties</tt> or a create method, or modify TSS class styles to an existing component on the fly.    </p>\n<p>\nBefore reading this guide, review <a class=\"document-link \" href=\"#!/guide/Alloy_Styles_and_Themes\" Alloy_Styles_and_Themes.html=\"Alloy_Styles_and_Themes.html\">Alloy Styles and Themes</a> to learn the basics about TSS files and styles.    </p>\n</div>\n<div class=\"section section-2 \" id=\"37530415_DynamicStyles-DefineClassStyles\">\n<h2 class=\"heading \"><span>Define Class Styles</span></h2>\n<p>\nBefore using either method, you need to create class styles in the TSS files, either in the global style file or in the individual TSS files.  For example, suppose you have the following styles defined:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/styles/app.tss</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"string\">\".bluetext\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">\tcolor: </code><code class=\"string\">'blue'</code></div>\n<div class=\"line\"><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"string\">\".orangetext\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">\tcolor: </code><code class=\"string\">'orange'</code></div>\n<div class=\"line\"><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"string\">\".shadow\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">\tshadowColor: </code><code class=\"string\">'#88f'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tshadowOffset: {x:</code><code class=\"value\">1</code><code class=\"plain\">,y:</code><code class=\"value\">3</code><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"string\">\".ldpi\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">\tfont: {fontSize: </code><code class=\"string\">'9dp'</code><code class=\"plain\">, fontWeight: </code><code class=\"string\">'normal'</code><code class=\"plain\"> }</code></div>\n<div class=\"line\"><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"string\">\".mdpi\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">\tfont: {fontSize: </code><code class=\"string\">'12dp'</code><code class=\"plain\">, fontWeight: </code><code class=\"string\">'normal'</code><code class=\"plain\"> }</code></div>\n<div class=\"line\"><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"string\">\".hdpi\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">\tfont: {fontSize: </code><code class=\"string\">'18dp'</code><code class=\"plain\">, fontWeight: </code><code class=\"string\">'bold'</code><code class=\"plain\"> }</code></div>\n<div class=\"line\"><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"string\">\".xhdpi\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">\tfont: {fontSize: </code><code class=\"string\">'24dp'</code><code class=\"plain\">, fontWeight: </code><code class=\"string\">'bold'</code><code class=\"plain\"> }</code></div>\n<div class=\"line\"><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"string\">\"Label\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">\tfont: {fontSize: </code><code class=\"string\">'14dp'</code><code class=\"plain\">, fontWeight: </code><code class=\"string\">'normal'</code><code class=\"plain\"> },</code></div>\n<div class=\"line\"><code class=\"plain\">\tshadow : {},</code></div>\n<div class=\"line\"><code class=\"plain\">\tcolor : </code><code class=\"string\">'black'</code></div>\n<div class=\"line\"><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"string\">\".rude_button\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">\ttitle: </code><code class=\"string\">'Go Away'</code></div>\n<div class=\"line\"><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"string\">\".nice_button\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">\ttitle: </code><code class=\"string\">'Please Close'</code></div>\n<div class=\"line\"><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"string\">\"Button\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">    width: Ti.UI.SIZE,</code></div>\n<div class=\"line\"><code class=\"plain\">    height: Ti.UI.SIZE</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"string\">\".tiny_win\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">\theight: </code><code class=\"string\">'150dp'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\twidth: </code><code class=\"string\">'200dp'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tbackgroundColor: </code><code class=\"string\">'blue'</code></div>\n<div class=\"line\"><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"string\">\".big_win\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">\theight: </code><code class=\"string\">'300dp'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\twidth: </code><code class=\"string\">'400dp'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tbackgroundColor: </code><code class=\"string\">'red'</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nThe previous style sheet defines various class and markup element styles for labels, buttons and windows.  Alloy assigns a priority for each class, based on its order in the TSS file.  Styles listed first receive a lower priority than ones listed afterwards.  For example, if both the ldpi and hdpi classes are assigned to a label, since hdpi is after ldpi, the label text is 24 dp not 9 dp.  Since the Label size of 14 dp is a markup element style and even though it appears after the class styles, it does not have a higher priority number since class styles have higher precedence over markup element styles. The label is still 24 dp not 14 dp.  Properties define inline in the markup and TSS id styles still take precedence over class styles.    </p>\n</div>\n<div class=\"section section-2 \" id=\"37530415_DynamicStyles-GenerateaDynamicStyle\">\n<h2 class=\"heading \"><span>Generate a Dynamic Style</span></h2>\n<p>\nTo generate a dynamic style, use the controller's <tt class=\" \">createStyle</tt> method by passing it a dictionary with TSS classes.  You can optionally add additional properties inline specific to the component.  This method returns a dictionary that can be passed to the view object's <tt class=\" \">applyProperties</tt> method or a create view object method, such as <tt class=\" \">Ti.UI.createView</tt>.    </p>\n<p>\nYou can use the controller's <tt class=\" \">UI.create</tt> method to create a view component that is dynamically styled by passing it the name of the object as the first parameter and a dictionary with TSS classes as the second parameter.  The object name can either be the element name, such as <tt class=\" \">Button</tt>, or the full API name, such as <tt class=\" \">Ti.UI.Button</tt>.  You can optionally add additional properties inline specific to the component with the second parameter.    </p>\n<p>\nFor example, suppose that the following view-controller is defined in an Alloy project.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/views/dialog.xml</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;Alloy&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;Window id=</code><code class=\"string\">\"win\"</code><code class=\"plain\">&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">        &lt;Button id=</code><code class=\"string\">\"button\"</code><code class=\"plain\"> onClick=</code><code class=\"string\">\"doClick\"</code><code class=\"plain\"> /&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;/Window&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/Alloy&gt;</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/controllers/dialog.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">function doClick(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">    $.win.close();</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">args = arguments[</code><code class=\"value\">0</code><code class=\"plain\">] || {};</code></div>\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (args.button) {</code></div>\n<div class=\"line\"><code class=\"plain\">    var style = $.createStyle({</code></div>\n<div class=\"line\"><code class=\"plain\">        classes: args.button,</code></div>\n<div class=\"line\"><code class=\"plain\">        apiName: </code><code class=\"string\">'Button'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">        color: </code><code class=\"string\">'blue'</code></div>\n<div class=\"line\"><code class=\"plain\">    });</code></div>\n<div class=\"line\"><code class=\"plain\">    $.button.applyProperties(style);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (args.win) {</code></div>\n<div class=\"line\"><code class=\"plain\">    var style = $.createStyle({</code></div>\n<div class=\"line\"><code class=\"plain\">        classes: args.win,</code></div>\n<div class=\"line\"><code class=\"plain\">        apiName: </code><code class=\"string\">'Window'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Since backgroundColor is defined inline, this overrides the class style</code></div>\n<div class=\"line\"><code class=\"plain\">        backgroundColor: </code><code class=\"string\">'white'</code></div>\n<div class=\"line\"><code class=\"plain\">    });\t</code></div>\n<div class=\"line\"><code class=\"plain\">    $.win.applyProperties(style);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"keyword\">if</code><code class=\"plain\"> (args.label) {</code></div>\n<div class=\"line\"><code class=\"plain\">    args.label.top = </code><code class=\"value\">10</code></div>\n<div class=\"line\"><code class=\"plain\">    var label = $.UI.create(</code><code class=\"string\">\"Label\"</code><code class=\"plain\">, args.label);</code></div>\n<div class=\"line\"><code class=\"plain\">    $.win.add(label);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nThen, create an instance of this view-controller:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/controllers/index.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var args = {};</code></div>\n<div class=\"line\"><code class=\"plain\">args.button = [</code><code class=\"string\">'rude_button'</code><code class=\"plain\">];</code></div>\n<div class=\"line\"><code class=\"plain\">args.win = [</code><code class=\"string\">'tiny_win'</code><code class=\"plain\">];</code></div>\n<div class=\"line\"><code class=\"plain\">args.label = {</code></div>\n<div class=\"line\"><code class=\"plain\">    classes: [</code><code class=\"string\">'hdpi'</code><code class=\"plain\">, </code><code class=\"string\">'shadow'</code><code class=\"plain\">],</code></div>\n<div class=\"line\"><code class=\"plain\">    text: </code><code class=\"string\">'No girls allowed!'</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n<div class=\"line\"><code class=\"plain\">Alloy.createController(</code><code class=\"string\">'dialog'</code><code class=\"plain\">, args).getView().open(); </code></div>\n</div>\n</div> <p>\nIn this example, the index view-controller passes specific classes for the dialog view-controller to use.  In the dialog-view controller, for the button and window, it uses the passed classes to generate styles with the <tt class=\" \">createStyle</tt> method and update the styles of the components with the <tt class=\" \">applyProperties</tt> method.  The dialog controller defines extra properties to apply in the dictionary.  The background color of the <tt class=\" \">tiny_win</tt> class is overridden by the inline property defined in the dictionary, making the window white not blue.  For the label, the dialog-view controller uses the passed dictionary to generate a label object with the <tt class=\" \">UI.create</tt> method and adds it to the window.    </p>\n<p>\nIn this example, the dialog controller code is not necessary.  The dialog can be generated and styled outside the view-controller.  The following code using only the previous XML markup is equivalent to what the previous two controllers are doing:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/controllers/index.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var dialog = Alloy.createController(</code><code class=\"string\">'dialog'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">var style = dialog.createStyle({</code></div>\n<div class=\"line\"><code class=\"plain\">    classes: </code><code class=\"string\">'rude_button'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    apiName: </code><code class=\"string\">'Button'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    color: </code><code class=\"string\">'blue'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">dialog.button.applyProperties(style);</code></div>\n<div class=\"line\"><code class=\"plain\">style = dialog.createStyle({</code></div>\n<div class=\"line\"><code class=\"plain\">    classes: </code><code class=\"string\">'tiny_win'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    apiName: </code><code class=\"string\">'Window'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    backgroundColor: </code><code class=\"string\">'white'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">dialog.win.applyProperties(style);</code></div>\n<div class=\"line\"><code class=\"plain\">style = {</code></div>\n<div class=\"line\"><code class=\"plain\">    top: </code><code class=\"value\">10</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    text: </code><code class=\"string\">'No girls allowed!'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    classes: </code><code class=\"string\">'hdpi shadow'</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">var label = dialog.UI.create(</code><code class=\"string\">'Label'</code><code class=\"plain\">, style);</code></div>\n<div class=\"line\"><code class=\"plain\">dialog.win.add(label);</code></div>\n<div class=\"line\"><code class=\"plain\">dialog.getView().open();</code></div>\n</div>\n</div> <p>\nNote that code outside of the dialog view-controller is using the instance variable name <tt class=\" \">dialog</tt> to make the API calls with the <tt class=\" \">createStyle</tt> and <tt class=\" \">UI.create</tt> methods rather than the <tt class=\" \">$</tt> variable, which is used when making controller API calls inside its self view-controller.    </p>\n</div>\n<div class=\"section section-2 \" id=\"37530415_DynamicStyles-ModifyTSSClasses\">\n<h2 class=\"heading \"><span>Modify TSS Classes</span></h2>\n<p>\nTo modify the TSS classes of an object that has already been created, use the controller's <tt class=\" \">addClass</tt>, <tt class=\" \">removeClass</tt> and <tt class=\" \">resetClass</tt> methods, which adds, removes or resets the TSS classes of a view object, respectively.  Pass a reference to the view object as the first parameter, then pass the classes to add or remove as an array or space-separated string as the second parameter.  You can optionally specify inline properties related to the component to modify as an optional third parameter.  As the classes are modified using these API calls, the view is automatically updated.  For example, the following code is equivalent to the previous example:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/controllers/index.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var dialog = Alloy.createController(</code><code class=\"string\">'dialog'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">dialog.addClass(dialog.win, </code><code class=\"string\">'tiny_win'</code><code class=\"plain\">, {backgroundColor:</code><code class=\"string\">'white'</code><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">dialog.addClass(dialog.button, </code><code class=\"string\">'rude_button'</code><code class=\"plain\">, {color: </code><code class=\"string\">'blue'</code><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">var style = {</code></div>\n<div class=\"line\"><code class=\"plain\">    top: </code><code class=\"value\">10</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    text: </code><code class=\"string\">'No girls allowed!'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    classes: </code><code class=\"string\">'hdpi shadow'</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">var label = dialog.UI.create(</code><code class=\"string\">'Label'</code><code class=\"plain\">, style);</code></div>\n<div class=\"line\"><code class=\"plain\">dialog.getView().open();</code></div>\n</div>\n</div> <p>\nLater on, you can change the classes.  The following code removes all classes from the button object, then adds the nice_button, orangetext and hdpi classes:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">dialog.resetClass(dialog.button, </code><code class=\"string\">'nice_button orangetext hdpi'</code><code class=\"plain\">);</code></div>\n</div>\n</div> <p>\nTo take advantage of these APIs, you need to enable autostyle for the components or else the view may not update properly.  Autostyle is discussed in the next section.    </p>\n<p>\nFor example, if autostyle is not enabled with the following TSS file and controller code:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/styles/index.tss</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"string\">\".coloronly\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">    color: </code><code class=\"string\">'red'</code></div>\n<div class=\"line\"><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"string\">\".colorsize\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">    color: </code><code class=\"string\">'blue'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    font: {fontSize: </code><code class=\"string\">'24dp'</code><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"string\">\"Label\"</code><code class=\"plain\"> : {</code></div>\n<div class=\"line\"><code class=\"plain\">    color: </code><code class=\"string\">'black'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    font: {fontSize: </code><code class=\"string\">'12dp'</code><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app/controllers/index.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">$.addClass($.label, </code><code class=\"string\">\"coloronly colorsize\"</code><code class=\"plain\">); </code><code class=\"comments\">// --&gt; appears blue and 24dp</code></div>\n<div class=\"line\"><code class=\"plain\">$.removeClass($.label, </code><code class=\"string\">\"colorsize\"</code><code class=\"plain\">); </code><code class=\"comments\">// --&gt; appears red and 24dp</code></div>\n<div class=\"line\"><code class=\"plain\">$.removeClass($.label, </code><code class=\"string\">\"coloronly\"</code><code class=\"plain\">); </code><code class=\"comments\">// --&gt; appears red and 24dp</code></div>\n</div>\n</div> <p>\nThe controller adds two classes to the label object, then tries to remove each class one at a time.  Even though the classes are removed, the view does not update as expected.    </p>\n<p>\nFor the first remove statement, the color updates correctly but not the font size.  To workaround this issue, either define the same properties for each class or pass in the optional inline properties.    </p>\n<p>\nFor the second remove statement, neither the color nor the size updates correctly even though markup element class defines these properties.  To workaround this issue, create a default class that defines all possible properties you will modify and apply it first.    </p>\n<p>\nIf you enable autostyle, that is, set the <tt class=\" \">autoStyle</tt> attribute of the component to true in the XML markup, the styles in the view update without any issues and you do not need to work around these issues.    </p>\n</div>\n<div class=\"section section-2 \" id=\"37530415_DynamicStyles-Autostyle\">\n<h2 class=\"heading \"><span>Autostyle</span></h2>\n<p>\nA view component with autostyle enabled has its classes and API component name stored with the view object. Autostyle is necessary to take full advantage of the <tt class=\" \">addClass</tt>, <tt class=\" \">removeClass</tt> and <tt class=\" \">resetClass</tt> functionality to properly update the view as classes are removed and added.  There is a small performance overhead for using this feature and should only be enabled on components that use this feature.  By default, autostyle is disabled.    </p>\n<p>\nTo enable autostyle, you need to set the <tt class=\" \">autoStyle</tt> attribute to <tt class=\" \">true</tt> either in the XML markup or the <tt class=\" \">config.json</tt> file.  You can control where autostyle is enabled either:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nFor an individual component by setting the attribute in the view component tag: <tt class=\" \">&lt;View autoStyle=&quot;true&quot;&gt;</tt> </p>\n</li><li class=\" \"> <p>\nFor all components in a controller by setting the attribute in the <tt class=\" \">Alloy</tt> tag: <tt class=\" \">&lt;Alloy autoStyle=&quot;true&quot;&gt;</tt> </p>\n</li><li class=\" \"> <p>\nFor all controllers in the project by setting the attribute in the <tt class=\" \">config.json</tt> file.    </p>\n</li></ol> </div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Dynamic Styles"});