Ext.data.JsonP['Adding_new_Troubleshooting_Options']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Adding new Troubleshooting Options</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"30083181\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=30083181\"><span>Edit</span></a>\n<h1>Adding new Troubleshooting Options</h1>\n<p>\nStudio provides a sophisticated mechanism for allowing users to turn on and off various bits of logging in their code. Please see <a class=\"document-link \" href=\"#!/guide/Debugging_Studio\" Debugging_Studio.html=\"Debugging_Studio.html\">Debugging Studio</a> for details on the user interactions.    </p>\n<div class=\"section section-2 \" id=\"30083181_AddingnewTroubleshootingOptions-Logging\">\n<h2 class=\"heading \"><span>Logging</span></h2>\n<p>\nThe com.aptana.core.IdeLog class contains a variety of methods allowing the developer to write out information to the log file, and allow the user to filter exactly what they wish to see.    </p>\n<p>\nAt the simplest, the user can take a slider and switch debugging from Errors, to Errors + Warnings, to Errors + Warnings + Info messages. This will work, but the user may quickly be overwhelmed with wading through a large set of &quot;Info&quot; messages. This is where component-level debugging comes in.    </p>\n<p>\nWe create the notion of &quot;Debug Scopes&quot; which allows the user to more precisely filter the list of items that they see in the log file. To enable, a user selects the &quot;Debug specific components&quot; checkbox, and then selects the items in the list that apply.    </p>\n<div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\n</p>\n<p>\nThe log file is a poorly-discoverable option for the end user and directing the user to the log file should be seen as a method of last resort. It is, however, very useful to us when debugging, but please be careful when logging items under the <strong class=\" \">ERROR</strong> severity. That is a true, blocker/critical error. We can always ask the user to modify the severity slider for log info, and capture the more detailed information as necessary.    </p>\n</div>\n</div>\n<div class=\"section section-2 \" id=\"30083181_AddingnewTroubleshootingOptions-LoggingBestPractices\">\n<h2 class=\"heading \"><span>Logging Best Practices</span></h2>\n<ul class=\" \"><li class=\" \"> <p>\n<strong class=\" \">ERROR</strong> means a show-stopper error that deserves a bug report. If it's not that important, it's a <strong class=\" \">WARNING</strong> </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">WARNING</strong> means items of interest that may be the source of a problem, or issues that should be taken care of eventually    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">INFO</strong> means anything useful during debugging    </p>\n</li></ul> <p>\nIf the error is caused by a configuration issue in Studio, the UI should present the problem and offer ways to help the user solve the problem, one of which may be pointing them to documentation. This is independent of what is logged to the log file.    </p>\n<p>\nThe error message in the log file should be descriptive enough that the user could reasonably file a bug and we could understand the context. <strong class=\" \">e.getLocalizedMessage() is rarely the right message to display.</strong> </p>\n<div class=\"confbox panel panel\">\n<ul class=\" \"><li class=\" \"> <p>\nIf the user is <strong class=\" \">not</strong> in &quot;Specific components&quot; mode, all components are logged, regardless of scope, but filtered by severity slider    </p>\n</li><li class=\" \"> <p>\nIf a user <strong class=\" \">is</strong> in &quot;Specific components&quot; mode only components where the scope is null or matches the toggled options will log, filtered by severity slider    </p>\n</li><li class=\" \"> <p>\nIf a user is in <strong class=\" \">debug mode</strong> (-debug, tracing tab in run configurations), those settings override the &quot;Specific components&quot; setting. If desired, the user can then later turn on those specific options manually while in the process of debugging by using the &quot;Troubleshooting&quot; page.    </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"30083181_AddingnewTroubleshootingOptions-Scopes\">\n<h2 class=\"heading \"><span>Scopes</span></h2>\n<p>\nA scope is of the form:    </p>\n<p>\nPLUGIN_ID + &quot;/debug&quot; + name_of_scope    </p>\n<p>\nPerformance-related debug options may also be created, though they don't currently work in the Troubleshooting tab. They exhibit the form:    </p>\n<p>\nPLUGIN_ID + &quot;/perf&quot; + name_of_scope    </p>\n<div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\">\n<p>\n</p>\n<p>\nWe use the term &quot;scope&quot; a bit loosely here, as the scopes don't quite match the form of other scopes across Studio. However, to maintain compatibility with existing Eclipse infrastructure, we use the same form as they suggest    </p>\n</div>\n<div class=\"section section-3 \" id=\"30083181_AddingnewTroubleshootingOptions-Tocreateascope:\">\n<h3 class=\"heading \"><span>To create a scope:</span></h3>\n<ol class=\" \"><li class=\" \"> <p>\nCreate a new .options file at the root of your plugin (if one does not exist already)    </p>\n</li><li class=\" \"> <p>\nEdit build.properties to ensure the .options file is included as part of the build    </p>\n</li><li class=\" \"> <p>\nEdit the file to add a line such as:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">com.aptana.core/debug/logger=</code><code class=\"keyword\">true</code></div>\n</div>\n</div></li><li class=\" \"> <p>\nThe initial default value of true/false is not relevant here--when enabling a scope, we default to true    </p>\n</li><li class=\" \"> <p>\nCreate a new Interface of the form I*DebugScopes in the main package of your plugin, where * is derived from the name of the plugin. See <a class=\"document-link \" href=\"#!/guide/Source_Code_Conventions\" Source_Code_Conventions.html=\"Source_Code_Conventions.html\">here</a> for naming convention:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"keyword\">package</code><code class=\"plain\"> com.aptana.core;</code></div>\n<div class=\"line\"><code class=\"preprocessor\">/**</code></div>\n<div class=\"line\"><code class=\"preprocessor\"> * A interface to capture the various scopes available during debugging. These need to match the items in the .options</code></div>\n<div class=\"line\"><code class=\"preprocessor\"> * file at the root of the plugin</code></div>\n<div class=\"line\"><code class=\"preprocessor\"> *</code></div>\n<div class=\"line\"><code class=\"preprocessor\"> * @author Ingo Muschenetz</code></div>\n<div class=\"line\"><code class=\"preprocessor\"> */</code></div>\n<div class=\"line\"><code class=\"keyword\">public</code><code class=\"plain\"> </code><code class=\"keyword\">interface</code><code class=\"plain\"> ICoreDebugScopes</code></div>\n<div class=\"line\"><code class=\"plain\">{</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"preprocessor\">/**</code></div>\n<div class=\"line\"><code class=\"preprocessor\">\t * Items related to the logging process</code></div>\n<div class=\"line\"><code class=\"preprocessor\">\t */</code></div>\n<div class=\"line\"><code class=\"plain\">\tString LOGGER = CorePlugin.PLUGIN_ID + </code><code class=\"string\">\"/debug/logger\"</code><code class=\"plain\">; </code><code class=\"comments\">//$NON-NLS-1$</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div></li></ol> </div>\n<div class=\"section section-3 \" id=\"30083181_AddingnewTroubleshootingOptions-UsingaScope\">\n<h3 class=\"heading \"><span>Using a Scope</span></h3>\n<p>\nIn your code, call the scope above by using a log method of the form:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">IdeLog.logInfo(CorePlugin.getDefault(), </code><code class=\"string\">\"My info message\"</code><code class=\"plain\">, ICoreDebugScopes.LOGGER);</code></div>\n</div>\n</div> <p>\nIf you need to test if logging is enabled before compiling an errors sting (say there are performance considerations involved), you can test using IdeLog.isOutputEnabled(). An example:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">IdeLog.isOutputEnabled(ScriptingActivator.getDefault(), IdeLog.StatusLevel.INFO,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\t\tICoreDebugScopes.SHOW_ELEMENT_REGISTRATION)</code></div>\n</div>\n</div> <p>\nThere are also severity-specific versions, such as isInfoEnabled(), isWarningEnabled(), etc...    </p>\n</div>\n</div>\n<div class=\"section section-2 \" id=\"30083181_AddingnewTroubleshootingOptions-EnablingLogging\">\n<h2 class=\"heading \"><span>Enabling Logging</span></h2>\n<ol class=\" \"><li class=\" \"> <p>\nOpen the <strong class=\" \">Preferences &gt; Studio &gt; Troubleshooting</strong> page    </p>\n</li><li class=\" \"> <p>\nSlide the severity slider to the desired level    </p>\n</li><li class=\" \"> <p>\nClick &quot;specific component&quot; checkbox    </p>\n</li><li class=\" \"> <p>\nFind the scope in the list and click to check it    </p>\n</li></ol> </div>\n<div class=\"section section-2 \" id=\"30083181_AddingnewTroubleshootingOptions-DebuggingLogging\">\n<h2 class=\"heading \"><span>Debugging Logging</span></h2>\n<p>\nThe com.aptana.core plugin contains a debug scope for logging itself. Enable &quot;com.aptana.core/debug/logger&quot; to see messages written out to the log file. It will indicate if the message wasn't written because of a filtered severity level association, or a filtered scope setting.    </p>\n</div>\n<div class=\"section section-2 \" id=\"30083181_AddingnewTroubleshootingOptions-ErrorMessages\">\n<h2 class=\"heading \"><span>Error Messages</span></h2>\n<div class=\"section section-3 \" id=\"30083181_AddingnewTroubleshootingOptions-SC100:Error1\">\n<h3 class=\"heading \"><span>SC100: Error 1</span></h3>\n<p>\nThis is an error message detailing something has seriously gone wrong with your application.    </p>\n</div>\n<div class=\"section section-3 \" id=\"30083181_AddingnewTroubleshootingOptions-SC200:Error2\">\n<h3 class=\"heading \"><span>SC200: Error 2</span></h3>\n<p>\nThis is a different error message indicating something else has gone wrong.    </p>\n</div>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Adding new Troubleshooting Options"});