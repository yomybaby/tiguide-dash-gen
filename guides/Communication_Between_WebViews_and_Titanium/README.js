Ext.data.JsonP['Communication_Between_WebViews_and_Titanium']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Communication Between WebViews and Titanium</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004919\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004919\"><span>Edit</span></a>\n<h1>Communication Between WebViews and Titanium</h1>\n<div class=\"section section-2 \" id=\"29004919_CommunicationBetweenWebViewsandTitanium-Overview\">\n<h2 class=\"heading \"><span>Overview</span></h2>\n<p>\nYou can use features of the <tt class=\" \">Ti.UI.WebView</tt> component to interact with local and remote web content. However, as you'll see, most of this functionality is limited to local web content (HTML you load from the device rather than from a web server). In this section, you'll examine how to use the Titanium logging and event APIs with local HTML content. And, you'll see how you can use the <tt class=\" \">evalJS()</tt> method to inject JavaScript code into remote HTML content.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004919_CommunicationBetweenWebViewsandTitanium-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<p>\nBecause capabilities vary, we'll look at local and remote web interactions separately. We'll begin with seeing how you can use logging and events with local content. Then, we'll see how to inject JavaScript code and get data back from remote HTML content.    </p>\n<div class=\"section section-3 \" id=\"29004919_CommunicationBetweenWebViewsandTitanium-Localwebcontent\">\n<h3 class=\"heading \"><span>Local web content</span></h3>\n<div class=\"section section-4 \" id=\"29004919_CommunicationBetweenWebViewsandTitanium-Logging\">\n<h4 class=\"heading \"><span>Logging</span></h4>\n<p>\nYou can use the <tt class=\" \">Ti.API</tt> logging methods within HTML content loaded from the device.  Just as a quick refresher, let's take a look at the logging functions available:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">debug(message)} - Creates a Titanium log out of the {{message</tt> parameter and assigns it the log level of <tt class=\" \">debug</tt> </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">error(message)</tt> - Creates a Titanium log out of the <tt class=\" \">message</tt> parameter and assigns it the log level of <tt class=\" \">error</tt> </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">info(message)</tt> - Creates a Titanium log out of the <tt class=\" \">message</tt> parameter and assigns it the log level of <tt class=\" \">info</tt> </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">log(type, message)</tt> - Creates a Titanium log out of the <tt class=\" \">message</tt> parameter and assigns it the log level of the given parameter <tt class=\" \">type</tt> </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">warn(message)</tt> - Creates a Titanium log out of the <tt class=\" \">message</tt> parameter and assigns it the log level of <tt class=\" \">warn</tt> </p>\n</li></ul> <p>\nThese functions are great for adding logging to our native Titanium code, but they can also be used to add logging to web content in <tt class=\" \">WebViews</tt>. Let's take a look at a simple example. Here will we add Titanium logging to a <tt class=\" \">WebView</tt> to let us know when the &lt;body&gt; element of the web content has loaded.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">logging.html</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;html&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;body onload=</code><code class=\"string\">\"Ti.API.info('body loaded!');\"</code><code class=\"plain\">&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    &lt;/body&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/html&gt;</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow();</code></div>\n<div class=\"line\"><code class=\"plain\">var webview = Ti.UI.createWebView({</code></div>\n<div class=\"line\"><code class=\"plain\">\turl: </code><code class=\"string\">'logging.html'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(webview);</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n</div>\n</div> <p>\nWhen the above app runs and the &lt;body&gt; of the <tt class=\" \">WebView</tt> is loaded, it will put an informational message in the Titanium logging console that says &quot;body loaded!&quot;. This is a very simple case, but shows that you can use the logging capabilities of Titanium even when executing Javascript from the context of a <tt class=\" \">WebView</tt>'s content. These API calls can be made anywhere in your web content's Javascript.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004919_CommunicationBetweenWebViewsandTitanium-Ti.AppEvents\">\n<h4 class=\"heading \"><span>Ti.App Events</span></h4>\n<p>\nThe <tt class=\" \">Ti.API</tt> module gives your <tt class=\" \">WebView</tt> the ability to send messages to the Titanium logging console, but application level events via the <tt class=\" \">Ti.App</tt> module provide a much higher level of integration. Application level events are events that are not fired or handled by Titanium components, but by the app itself. If you are not already familiar with them, check out the <a class=\"document-link \" href=\"#!/guide/Event_Handling\" Event_Handling.html=\"Event_Handling.html\">Event Handling</a> chapter of this book.    </p>\n<p>\nSo how do application level events help us communicate with <tt class=\" \">WebViews</tt>? Well they are available to all execution contexts of our Titanium apps, and this includes a <tt class=\" \">WebView</tt>'s Javascript execution context. By using calls to <tt class=\" \">Ti.App.fireEvent()</tt> and <tt class=\" \">Ti.App.addEventListener()</tt>, we can establish bidirectional communication between our native Titanium code and our <tt class=\" \">WebView's</tt> Javascript code.    </p>\n<p>\nLet's take a look at an example of how we can use application level events to communicate bidirectionally with a <tt class=\" \">WebView</tt>. We will create an app with a native UI button and a button rendered in a <tt class=\" \">WebView</tt>. The <tt class=\" \">WebView</tt> will listen for events fired from the native button, and the native Titanium code will listen for events fired from the <tt class=\" \">WebView</tt> button. Whenever one of these events is received, the appropriate execution context will popup an alert notifying us that the event was received.    </p>\n<div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\n</p>\n<p>\nYou'll notice the prefix of <tt class=\" \">app:</tt> added to all application level events. This is a convention used to help identify these global events in Titanium apps.    </p>\n</div>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;html&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t&lt;head&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t&lt;script&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\tTi.App.addEventListener(</code><code class=\"string\">\"app:fromTitanium\"</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">\t        \talert(e.message);</code></div>\n<div class=\"line\"><code class=\"plain\">\t      \t});</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t&lt;/script&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t&lt;/head&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t&lt;body&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t&lt;button onclick=</code><code class=\"string\">\"Ti.App.fireEvent('app:fromWebView', { message: 'event fired from WebView, handled in Titanium' });\"</code><code class=\"plain\">&gt;fromWebView&lt;/button&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">\t&lt;/body&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/html&gt;</code></div>\n</div>\n</div><div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow();</code></div>\n<div class=\"line\"><code class=\"plain\">var webview = Ti.UI.createWebView({</code></div>\n<div class=\"line\"><code class=\"plain\">\turl: </code><code class=\"string\">'logging.html'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">var button = Ti.UI.createButton({</code></div>\n<div class=\"line\"><code class=\"plain\">\ttitle: </code><code class=\"string\">'fromTitanium'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\theight: </code><code class=\"string\">'50dp'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\twidth: </code><code class=\"string\">'130dp'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">button.addEventListener(</code><code class=\"string\">'click'</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">\tTi.App.fireEvent(</code><code class=\"string\">'app:fromTitanium'</code><code class=\"plain\">, { message: </code><code class=\"string\">'event fired from Titanium, handled in WebView'</code><code class=\"plain\"> });</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">Ti.App.addEventListener(</code><code class=\"string\">'app:fromWebView'</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">\talert(e.message);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(webview);</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(button);</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n</div>\n</div> <p>\nWith the above app, we would see the following application flow when testing its functionality:    </p>\n<p>\n<img src=\"images/download/attachments/29004919/tiapp_arrows.png\" alt=\"images/download/attachments/29004919/tiapp_arrows.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n<p>\nAs demonstrated above, we can both fire and listen for application level events in content of the <tt class=\" \">WebView</tt>. This gives Titanium the ability to react to interactions that occur in the web content. For example, you can set up application level events in your <tt class=\" \">WebView</tt> such that your Titanium code can respond to button clicks, page loads, mouse overs, or any other event the <tt class=\" \">WebView</tt> can handle.    </p>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"29004919_CommunicationBetweenWebViewsandTitanium-Remotewebcontent\">\n<h3 class=\"heading \"><span>Remote web content</span></h3>\n<p>\nYou cannot use any Titanium statements within HTML content loaded from a remote host. The techniques described above will not work with remote content. However, you're not without means to interact with remote content. The WebView component includes the <tt class=\" \">evalJS()</tt> method that you can use to inject JavaScript into a WebView. A few things to keep in mind:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nYou should call <tt class=\" \">evalJS()</tt> from the webview's <tt class=\" \">load</tt> event so you're sure the page is done loading before you attempt to inject your code.    </p>\n</li><li class=\" \"> <p>\nYou must pass in the code to run as a single <i class=\" \">string</i>. (Hint: You'll have to JSON.stringify any complex data types you pass into the webview.)    </p>\n</li><li class=\" \"> <p>\nThis method returns a string, so make sure any data you retrieve is a string or it will be treated as a <tt class=\" \">null</tt>.    </p>\n</li></ul> <p>\nLet's see an example. The following loads a remote web page, then uses <tt class=\" \">evalJS()</tt> to retrieve the cookies set by that server:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">app.js</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var webview = Ti.UI.createWebView({</code></div>\n<div class=\"line\"><code class=\"plain\">    url: </code><code class=\"string\">'http://www.google.com'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(webview);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">webview.addEventListener(</code><code class=\"string\">'load'</code><code class=\"plain\">,function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">    var cookies = webview.evalJS(</code><code class=\"string\">\"document.cookie\"</code><code class=\"plain\">).split(</code><code class=\"string\">\";\"</code><code class=\"plain\">); </code></div>\n<div class=\"line\"><code class=\"plain\">    Ti.API.info( </code><code class=\"string\">\"# of cookies -&gt; \"</code><code class=\"plain\"> + cookies.length  );</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">for</code><code class=\"plain\"> (i = </code><code class=\"value\">0</code><code class=\"plain\">; i &lt;= cookies.length - </code><code class=\"value\">1</code><code class=\"plain\">; i++) {</code></div>\n<div class=\"line\"><code class=\"plain\">            Ti.API.info( </code><code class=\"string\">\"cookie -&gt; \"</code><code class=\"plain\"> + cookies[i] );</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> <p>\nAs noted, the use of <tt class=\" \">evalJS()</tt> is nested within the WebView's <tt class=\" \">load</tt> event so we're sure the page is loaded before injecting our code. You'll see we're passing in a single string (&quot;document.cookie&quot;) which in this case simply retrieves the string of the cookies set by the site. The rest of the code is within Titanium and extracts the cookie values and logs them to the console.    </p>\n</div>\n</div>\n<div class=\"section section-2 \" id=\"29004919_CommunicationBetweenWebViewsandTitanium-Summary\">\n<h2 class=\"heading \"><span>Summary</span></h2>\n<p>\nIn this section, you learned that with local HTML content in a WebView, you can use the <tt class=\" \">Ti.API</tt> module to log informational and debugging data to the Titanium logging console. You also saw how to use application level events via the <tt class=\" \">Ti.App</tt> module to establish bidirectional communication between local HTML in WebViews and native Titanium code.    </p>\n<p>\nThen, you looked at how to interact with remote HTML content in a WebView by calling the <tt class=\" \">evalJS()</tt> method. You learned that you pass in, and get back, simple strings, and that you cannot use any Titanium-specific statements within remote content in a WebView.    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Communication Between WebViews and Titanium"});