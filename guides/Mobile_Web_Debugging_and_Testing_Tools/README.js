Ext.data.JsonP['Mobile_Web_Debugging_and_Testing_Tools']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Mobile Web Debugging and Testing Tools</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"31525350\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=31525350\"><span>Edit</span></a>\n<h1>Mobile Web Debugging and Testing Tools</h1>\n<div class=\"section section-2 \" id=\"31525350_MobileWebDebuggingandTestingTools-Objective\">\n<h2 class=\"heading \"><span>Objective</span></h2>\n<p>\nIn this section, you will learn the basics of using various web debugging tools for troubleshooting Titanium projects on Mobile Web.    </p>\n</div>\n<div class=\"section section-2 \" id=\"31525350_MobileWebDebuggingandTestingTools-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<p>\nThe purpose of this document is to provide tips and insight on how to use the development tools provided by browsers to debug Titanium Mobile Web apps. Learning how to use these tools is not covered by this article, as the major browser manufacturers already have detailed instructions on their use. This document assumes that the reader is at least somewhat familiar with web development.    </p>\n<div class=\"section section-3 \" id=\"31525350_MobileWebDebuggingandTestingTools-ImportantConcepts\">\n<h3 class=\"heading \"><span>Important Concepts</span></h3>\n<div class=\"section section-4 \" id=\"31525350_MobileWebDebuggingandTestingTools-MobileWebUI\">\n<h4 class=\"heading \"><span>Mobile Web UI</span></h4>\n<p>\nThe implementation of UI elements in Mobile Web is different from the implementation of elements in the native platforms because a) controls in Mobile Web are almost always composites of other controls and b) layouts are always asynchronous.    </p>\n<p>\nControls are almost always a collection of of other Titanium controls. This is important to remember when inspecting elements on a webpage because you will see more controls on the page than you created. As an example, a button contains a view with its layout set to horizontal. This view contains a <tt class=\" \">Ti.UI.ImageView</tt> and a <tt class=\" \">Ti.UI.Label</tt>, which are themselves composed of other elements. All together, a button contains 5 DIVs at minimum, and can contain even more. Understanding how these controls work under the hood is <i class=\" \">not</i> necessary for debugging Titanium apps, but it <i class=\" \">is</i> important to simply know that these &quot;hidden controls&quot; exist. To help with debugging, every <tt class=\" \">Ti.UI.View</tt> has a property called <tt class=\" \">widgetId</tt> that contains a unique identifier. For example, the first window that is opened has a widget ID of <tt class=\" \">&quot;Ti.UI.Window:0&quot;</tt>.    </p>\n<p>\nMobile Web doesn't have the concept of heavy-weight/light-weight windows like the native platforms do. All windows are just DIVs that are attached to the page. Each top-level window is attached to a hidden root <tt class=\" \">Ti.UI.View</tt> element that is persistent. This view is assigned a widgetID of <tt class=\" \">&quot;Ti.UI.View:0&quot;</tt>.    </p>\n<p>\nAnother aspect of the Mobile Web UI mechanism that differs from the native platforms is that layouts are <i class=\" \">always</i> asynchronous. To illustrate this point, consider the following code:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow({</code></div>\n<div class=\"line\"><code class=\"plain\">     backgroundColor: </code><code class=\"string\">\"red\"</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n<div class=\"line\"><code class=\"plain\">var button1 = Ti.UI.createButton({</code></div>\n<div class=\"line\"><code class=\"plain\">     title: </code><code class=\"string\">\"I'm a button\"</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(button1);</code></div>\n<div class=\"line\"><code class=\"plain\">button1.left = </code><code class=\"value\">10</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">var button2 = Ti.UI.createButton({</code></div>\n<div class=\"line\"><code class=\"plain\">     title: </code><code class=\"string\">\"I'm also a button\"</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(button2);</code></div>\n<div class=\"line\"><code class=\"plain\">button2.left = </code><code class=\"value\">120</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">console.log(</code><code class=\"string\">\"done\"</code><code class=\"plain\">);</code></div>\n</div>\n</div> <p>\nThe <tt class=\" \">left</tt> values of <tt class=\" \">button1</tt> and <tt class=\" \">button2</tt> are set, which will trigger a layout. The actual layout doesn't occur until after the current thread of execution has ended, which is <i class=\" \">after</i> the <tt class=\" \">console.log()</tt> call. If you were to set a breakpoint at the <tt class=\" \">console.log(&quot;done&quot;)</tt> call, the value read back from <tt class=\" \">button1.left</tt> will be 10, but the value in <tt class=\" \">button1.rect.x</tt> will <i class=\" \">not</i> be 10. This behavior must be kept in mind both when writing code and when setting breakpoints.    </p>\n<p>\nLayouts are performed asynchronously so that multiple layout updates can be batched together. A side effect is that calling <tt class=\" \">view.updateLayout()</tt> doesn't provide any performance benefit on Mobile Web, unlike iOS and Android.    </p>\n</div>\n<div class=\"section section-4 \" id=\"31525350_MobileWebDebuggingandTestingTools-Networking\">\n<h4 class=\"heading \"><span>Networking</span></h4>\n<p>\nNetworking in Mobile Web is limited by the <a class=\"external-link external-link\" href=\"https://developer.mozilla.org/En/Same_origin_policy_for_JavaScript\" target=\"_blank\">Same Origin Policy</a>. It is <i class=\" \">critical</i> that you understand what the Same Origin Policy is and how it affects networking requests. To quote Mozilla:    </p>\n<blockquote>\n<p>\nThe same origin policy prevents a document or script loaded from one origin from getting or setting properties of a document from another origin.    </p>\n</blockquote>\n<p>\nIn short, the Same Origin Policy prevents you from doing any request from a domain other than the domain hosting the Mobile Web app. If you are developing using Studio's built in web server, this means that requests to anything other than <tt class=\" \">http://localhost:8020</tt> <i class=\" \">will fail!</i> This includes requests to other ports on <tt class=\" \">localhost</tt>. It's important to note that this behavior is an intentional security mechanism intended to prevent <a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\" target=\"_blank\">Cross Site Scripting Attacks</a> and <a class=\"external-link external-link\" href=\"http://en.wikipedia.org/wiki/Cross-site_request_forgery\" target=\"_blank\">Cross Site Request Forgeries</a>.    </p>\n<p>\nBrowsers and servers implement a mechanism called <a class=\"external-link external-link\" href=\"https://developer.mozilla.org/en/http_access_control\" target=\"_blank\">Cross-Origin Resource Sharing</a> (CORS) to enable legitimate cross-site requests to be made. A server hosting content meant to be accessed from a different domain adds the <tt class=\" \">Access-Control-Allow-Origin</tt> header to responses that gives clients a white-list of domains that are allowed to access this resource. If the server sets the headers properly, then nothing needs to be done on the client. If the server does not support CORS, then a proxy will need to be used in conjunction with a URL formatter, as described in the <a class=\"external-link external-link\" href=\"#!/api/Titanium.Network.HTTPClient\">API Documentation</a>.    </p>\n<p>\nIt's important to note that CORS violations <i class=\" \">do not</i> throw an exception! Things will simply appear to &quot;not work.&quot; If your networking requests doesn't appear to be working, the first thing you should do is check to see if a CORS violation is occuring.    </p>\n</div>\n<div class=\"section section-4 \" id=\"31525350_MobileWebDebuggingandTestingTools-Facebook\">\n<h4 class=\"heading \"><span>Facebook</span></h4>\n<p>\nFacebook deserves a special mention here because there is a gotcha on Mobile Web that doesn't apply to the other platforms. When developing on Mobile Web, you must set the <tt class=\" \">&quot;Site URL&quot;</tt> to point to the domain hosting your app. When developing, this means you must set it to <tt class=\" \">localhost:8020</tt>, or whatever your local dev server is configured as.    </p>\n<p>\n<img src=\"images/download/attachments/31525350/facebook.png\" alt=\"images/download/attachments/31525350/facebook.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n<p>\n<strong class=\" \">IMPORTANT:</strong> If you do not set the <tt class=\" \">Site URL</tt> correctly, then Facebook will not work correctly. No errors are thrown, but no results are returned either. It is a <i class=\" \">very</i> silent failure.    </p>\n</div>\n<div class=\"section section-4 \" id=\"31525350_MobileWebDebuggingandTestingTools-WebViews\">\n<h4 class=\"heading \"><span>WebViews</span></h4>\n<p>\nMobile Web implements <tt class=\" \">Ti.UI.WebView</tt> by using an iFrame. The Same Origin Policy affects web views as well as HTTP requests. When a source is set on the web view that is different than domain hosting the app, the app cannot set any properties inside of the web view.    </p>\n<p>\nIt is also possible for servers to configure the <a class=\"external-link external-link\" href=\"https://developer.mozilla.org/en/The_X-FRAME-OPTIONS_response_header\" target=\"_blank\">X-Frame-Options</a> header to prevent the site from being displayed in the web view (this problem is unique to Mobile Web). If this header is set, the web view will not load by design and will throw an error. Notably, Google sets this option for all of their pages (including their home page). This means that you cannot set the source of a web view to <tt class=\" \">www.google.com</tt>!    </p>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"31525350_MobileWebDebuggingandTestingTools-WebKitInspector\">\n<h3 class=\"heading \"><span>WebKit Inspector</span></h3>\n<p>\nThe WebKit Inspector is a development tool included with desktop WebKit-based browsers such as Chrome and Safari. If you are using Firefox or Internet Explorer to debug your app, then the information presented here will need to be mapped to the appropriate sections of Firebug and the F12 tools, respectively. This section will discuss how to use the inspector to debug Titanium apps in specific. For general information about using WebKit Inspector, refer to the <a class=\"external-link external-link\" href=\"https://developers.google.com/chrome-developer-tools/docs/overview\" target=\"_blank\">Chrome Developer Tools</a> documentation and the <a class=\"external-link external-link\" href=\"http://developer.apple.com/library/safari/#documentation%2Fappleapplications%2FConceptual%2FSafari_Developer_Guide%2F2SafariDeveloperTools%2FSafariDeveloperTools.html\" target=\"_blank\">Safari Developer Tools</a> documentation (they are mostly the same).    </p>\n<div class=\"section section-4 \" id=\"31525350_MobileWebDebuggingandTestingTools-ElementsTab\">\n<h4 class=\"heading \"><span>Elements Tab</span></h4>\n<p>\nThe Elements tab shows the element hierarchy on the web page. Each element has a property called <tt class=\" \">data-widget-id</tt> that shows the assigned widget ID. This can be used to correlate DIVs and other elements in the hierarchy with Titanium controls in JavaScript. You can right click on any element on a page and select &quot;Inspect Element.&quot; This will highlight the element in the Elements tab, as shown below.    </p>\n<p>\n<img src=\"images/download/attachments/31525350/finding_elements.png\" alt=\"images/download/attachments/31525350/finding_elements.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n<p>\nInspect Element highlights the topmost DIV under the mouse cursor. Most controls utilize hidden elements which means that a hidden element is selected by default. In the Label example above, the inner view of the label <tt class=\" \">&quot;Ti.UI.View:9&quot;</tt> is highlighted first. Currently, you will need to just move up the tree until you find what you expect to find (e.g. look for a widgetID that starts with <tt class=\" \">&quot;Ti.UI.Label:&quot;</tt> if you are trying to find a label). There are plans to make this process easier in the future (<a class=\"external-link external-link\" href=\"https://jira.appcelerator.org/browse/TIMOB-9728\" target=\"_blank\">TIMOB-9728</a>).    </p>\n</div>\n<div class=\"section section-4 \" id=\"31525350_MobileWebDebuggingandTestingTools-ConsoleTab\">\n<h4 class=\"heading \"><span>Console Tab</span></h4>\n<p>\nThis tab should be your first stop when you encounter a problem. All of the logging that the native platforms send to the console window in Studio is sent here in Mobile Web. All calls to <tt class=\" \">Ti.API.*</tt> and <tt class=\" \">console.*</tt> are directed here, and any exceptions encountered are logged here. Networking issues, such as CORS violations, are also logged here.    </p>\n<p>\nThe following code has two bugs: one is a CORS violation and the other is an undefined reference.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var client = Ti.Network.createHTTPClient();</code></div>\n<div class=\"line\"><code class=\"plain\">client.open(</code><code class=\"string\">\"GET\"</code><code class=\"plain\">, </code><code class=\"string\">\"http://www.appcelerator.com\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">client.send();</code></div>\n<div class=\"line\"><code class=\"plain\">x = y;</code></div>\n</div>\n</div> <p>\nRunning the code gives us the following errors in the console:    </p>\n<p>\n<img src=\"images/download/attachments/31525350/console.png\" alt=\"images/download/attachments/31525350/console.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n<p>\nHere we can see the two expected errors, but it's important to note that we only got one red screen of death for the x = y assignment. This shows that inspecting the console is the <i class=\" \">only</i> way to catch CORS violations.    </p>\n</div>\n<div class=\"section section-4 \" id=\"31525350_MobileWebDebuggingandTestingTools-ScriptsTab\">\n<h4 class=\"heading \"><span>Scripts Tab</span></h4>\n<p>\nThe scripts tab is where you can debug your JavaScript. All of the familiar tools are available: inspecting values, setting breakpoints, traversing the callstack, etc. The index.html file contains the Mobile Web Titanium APIs. The project's app.js file, shown below, is where you can debug your app.    </p>\n<p>\n<img src=\"images/download/attachments/31525350/script.png\" alt=\"images/download/attachments/31525350/script.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n<p>\nNote: any <tt class=\" \">require()</tt>'d files won't show up in the list of files until after the require statement has finished executing. If you need to set a breakpoint in a file being <tt class=\" \">require()</tt>'d, you can add the <tt class=\" \">debugger</tt> JavaScript keyword to your code where you want the breakpoint to occur.    </p>\n</div>\n<div class=\"section section-4 \" id=\"31525350_MobileWebDebuggingandTestingTools-NetworkTab\">\n<h4 class=\"heading \"><span>Network Tab</span></h4>\n<p>\nThe Network tab shows all network connections the browser has made, when they were made, and how long they took. All requests, including images, script files, and the index.html page are shown.    </p>\n<p>\n<img src=\"images/download/attachments/31525350/network.png\" alt=\"images/download/attachments/31525350/network.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n<p>\nApplications that take a long time to load in Mobile Web are almost always hung up waiting for files to download. The network tab can help you pinpoint scripts/images that are slowing down the app. There are lots of tricks to reducing transfer times, such as compressing images, performing production builds of your app which minifies code, deferring downloading scripts/images until they are needed (or pre-loading them, as the case may be), etc.    </p>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"31525350_MobileWebDebuggingandTestingTools-Instrumentation\">\n<h3 class=\"heading \"><span>Instrumentation</span></h3>\n<p>\nMobile Web has built-in instrumentation that provides developers with information on the state of an app. It can be enabled by adding the following code to the <tt class=\" \">&lt;mobileweb&gt;</tt> section of your <tt class=\" \">tiapp.xml</tt> file (this section may need to be created manually).    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">&lt;instrumentation&gt;</code><code class=\"keyword\">true</code><code class=\"plain\">&lt;/instrumetation&gt;</code></div>\n</div>\n</div> <p>\nInstrumentation lists the following pieces of information:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nSystem load time    </p>\n</li><li class=\" \"> <p>\nLayout time    </p>\n</li><li class=\" \"> <p>\nNetwork access time    </p>\n</li></ul> <p>\nSystem load time is the amount of time that elapsed from when the page first starts to load until the time that <tt class=\" \">app.js</tt> is invoked. This time represents <i class=\" \">part</i> of the time that users must wait until they see their first page (the rest of the time is spent in app.js and doing subsequent layouts). System load time is almost purely dependent on the size of the app (app,js, precached images, and precached scripts) and the user's network speed.    </p>\n</div>\n<div class=\"section section-3 \" id=\"31525350_MobileWebDebuggingandTestingTools-Bringingitalltogether\">\n<h3 class=\"heading \"><span>Bringing it all together</span></h3>\n<p>\nUsing these tools together to solve problems is key to successfully debugging Mobile Web applications. Consider the following source code:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var win1 = Titanium.UI.createWindow({</code></div>\n<div class=\"line\"><code class=\"plain\">    title:</code><code class=\"string\">'Tab 1'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    backgroundColor:</code><code class=\"string\">'#fff'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win1.open();</code></div>\n<div class=\"line\"><code class=\"plain\">var i, j, view;</code></div>\n<div class=\"line\"><code class=\"keyword\">for</code><code class=\"plain\"> (i = </code><code class=\"value\">0</code><code class=\"plain\">; i &lt; </code><code class=\"value\">6</code><code class=\"plain\">; i++) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">for</code><code class=\"plain\"> (j = </code><code class=\"value\">0</code><code class=\"plain\">; j &lt; </code><code class=\"value\">6</code><code class=\"plain\">; j++) {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tview = Ti.UI.createView({</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\twidth: </code><code class=\"value\">30</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\theight: </code><code class=\"value\">30</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\tleft: i * </code><code class=\"value\">50</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\ttop: j * </code><code class=\"value\">50</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\tborderWidth: </code><code class=\"value\">1</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\tborderColor: </code><code class=\"string\">\"#000\"</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t});</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tview.backgroundColor = </code><code class=\"string\">\"#00\"</code><code class=\"plain\"> + (i + j);</code></div>\n<div class=\"line\"><code class=\"plain\">\t\twin1.add(view);</code></div>\n<div class=\"line\"><code class=\"plain\">\t}</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nThis code will create a 6 x 6 grid of views and attach them to the page. The background views create a linear gradient from black to blue, starting at the upper left view and ending at the bottom right view. There is a bug in the code though: the lower right square is completely white! Why is that?    </p>\n<p>\n<img src=\"images/download/attachments/31525350/example.png\" alt=\"images/download/attachments/31525350/example.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n<p>\nWe start by finding the widget ID of the offending view by right clicking on it and inspecting the element.    </p>\n<p>\n<img src=\"images/download/attachments/31525350/example1.png\" alt=\"images/download/attachments/31525350/example1.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n<p>\nWe find that the widget ID is <tt class=\" \">&quot;Ti.UI.View:36&quot;</tt>. We then use this value to set a conditional breakpoint (right click on the breakpoint and select &quot;Edit breakpoint&quot;) in the for loop so that it will break on this specific view (stepping through 36 views is tedious!).    </p>\n<p>\n<img src=\"images/download/attachments/31525350/example2.png\" alt=\"images/download/attachments/31525350/example2.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n<p>\nAfter reloading the page (the breakpoint is persistent), we inspect the view's background color by hovering our cursor over the <tt class=\" \">view.backgroundColor</tt> text.    </p>\n<p>\n<img src=\"images/download/attachments/31525350/example3.png\" alt=\"images/download/attachments/31525350/example3.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n<p>\nAha! The last element sets its background color to <tt class=\" \">&quot;#0010&quot;</tt>, which isn't a valid CSS color. Since <tt class=\" \">i + j</tt> equals 10, we need to string cast the value as a hex number, not a decimal number:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var win1 = Titanium.UI.createWindow({</code></div>\n<div class=\"line\"><code class=\"plain\">    title:</code><code class=\"string\">'Tab 1'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    backgroundColor:</code><code class=\"string\">'#fff'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win1.open();</code></div>\n<div class=\"line\"><code class=\"plain\">var i, j, view;</code></div>\n<div class=\"line\"><code class=\"keyword\">for</code><code class=\"plain\"> (i = </code><code class=\"value\">0</code><code class=\"plain\">; i &lt; </code><code class=\"value\">6</code><code class=\"plain\">; i++) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">for</code><code class=\"plain\"> (j = </code><code class=\"value\">0</code><code class=\"plain\">; j &lt; </code><code class=\"value\">6</code><code class=\"plain\">; j++) {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tview = Ti.UI.createView({</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\twidth: </code><code class=\"value\">30</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\theight: </code><code class=\"value\">30</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\tleft: i * </code><code class=\"value\">50</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\ttop: j * </code><code class=\"value\">50</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\tborderWidth: </code><code class=\"value\">1</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\tborderColor: </code><code class=\"string\">\"#000\"</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t});</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tview.backgroundColor = </code><code class=\"string\">\"#00\"</code><code class=\"plain\"> + (i + j).toString(</code><code class=\"value\">16</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">\t\twin1.add(view);</code></div>\n<div class=\"line\"><code class=\"plain\">\t}</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n</div>\n</div> <p>\nWith this change in place, everything works perfectly!    </p>\n<p>\n<img src=\"images/download/attachments/31525350/example4.png\" alt=\"images/download/attachments/31525350/example4.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n</div>\n<div class=\"section section-3 \" id=\"31525350_MobileWebDebuggingandTestingTools-DebuggingOnDevice\">\n<h3 class=\"heading \"><span>Debugging On Device</span></h3>\n<p>\nOnce the application is working well, it's time to take the application to devices. For the most part, everything should work the same in mobile browsers as they do in desktop browsers, just much slower. Desktop browsers tend to run around 10 times faster than their mobile counterparts. Debugging is difficult though because most devices only provide a JavaScript console. Below are three ways to debug applications on Android, iOS, and Blackberry. Unfortunately there is no way to debug Windows Phone 7.5 web apps other than using <tt class=\" \">alert()</tt>'s.    </p>\n<div class=\"section section-4 \" id=\"31525350_MobileWebDebuggingandTestingTools-EnablingtheJavaScriptConsoleinAndroid:\">\n<h4 class=\"heading \"><span>Enabling the JavaScript Console in Android:</span></h4>\n<p>\nMost Android devices can only be debugged using <a class=\"external-link external-link\" href=\"http://developer.android.com/tools/help/logcat.html\" target=\"_blank\">ADB logcat</a>, which requires the device to be connected to a PC. You can filter the results of adb logcat to only show browser logging by piping the command to grep (OS X and Linux only) like so:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">adb logcat | grep </code><code class=\"string\">\"^..browser\"</code></div>\n</div>\n</div> <p>\nSome Android 3 and newer browsers also support enabling a console on device by typing <tt class=\" \">&quot;about:debug&quot;</tt> into the address bar <i class=\" \">after</i> the page has loaded.    </p>\n</div>\n<div class=\"section section-4 \" id=\"31525350_MobileWebDebuggingandTestingTools-EnablingtheJavaScriptConsoleiniOS:\">\n<h4 class=\"heading \"><span>Enabling the JavaScript Console in iOS:</span></h4>\n<p>\niOS devices can be debugged by enabling the <a class=\"external-link external-link\" href=\"http://developer.apple.com/library/safari/#documentation%2Fappleapplications%2FConceptual%2FSafari_Developer_Guide%2F2SafariDeveloperTools%2FSafariDeveloperTools.html\" target=\"_blank\">Debug Console</a> in Mobile Safari's Advanced settings.    </p>\n</div>\n<div class=\"section section-4 \" id=\"31525350_MobileWebDebuggingandTestingTools-UsingtheBlackBerryRemoteWebInspector:\">\n<h4 class=\"heading \"><span>Using the BlackBerry Remote Web Inspector:</span></h4>\n<p>\nBlackBerry 7 and Playbook devices can be debugged remotely using a desktop browser via WebKit Inspector. The full details on using it are described <a class=\"external-link external-link\" href=\"http://devblog.blackberry.com/2011/06/debugging-blackberry-web-apps/\" target=\"_blank\">Debugging BlackBerry web applications using Web Inspector</a> on the BlackBerry Developer Blog.    </p>\n</div>\n<div class=\"section section-4 \" id=\"31525350_MobileWebDebuggingandTestingTools-WEINRE\">\n<h4 class=\"heading \"><span>WEINRE</span></h4>\n<p>\nAnother option for remotely debugging apps is to use <a class=\"external-link external-link\" href=\"http://people.apache.org/~pmuellr/weinre/docs/latest/\" target=\"_blank\">WEb INspector REmote</a>. WEINRE provides middleware that enables WebKit inspector to remotely debug apps, similar to how BlackBerry does it. There are a few limitations in WEINRE, such as the inability to set breakpoints, but it is still more powerful than just using a JavaScript console.    </p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Mobile Web Debugging and Testing Tools"});