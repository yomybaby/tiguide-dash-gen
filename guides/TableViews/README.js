Ext.data.JsonP['TableViews']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>TableViews</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004930\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004930\"><span>Edit</span></a>\n<h1>TableViews</h1>\n<div class=\"section section-2 \" id=\"29004930_TableViews-Objective\">\n<h2 class=\"heading \"><span>Objective</span></h2>\n<p>\nIn this chapter, we&rsquo;ll examine TableView basics then dig a bit deeper into what you can do with tables. We&rsquo;ll look at headers, footers, and sections. Finally, we'll wrap up with a look at handling events associated with tables and rows.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004930_TableViews-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<p>\nLet's start by creating a table. You do so with the <tt class=\" \">Ti.UI.createTableView()</tt> method, like this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var table = </code><code class=\"keyword\">new</code><code class=\"plain\"> Titanium.UI.createTableView({</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">/* properties */</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> <p>\nSome key table properties include:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">height</tt> and <tt class=\" \">width</tt> &ndash; controls the dimensions of the table; it doesn't have to fill its parent container    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">top</tt> and <tt class=\" \">left</tt> &ndash; controls placement of the table, useful if you want to add buttons or labels above or below it    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">backgroundColor</tt> and <tt class=\" \">backgroundImage</tt> &ndash; controls the background of the table; <tt class=\" \">transparent</tt> is a valid <tt class=\" \">backgroundColor</tt> </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">rowHeight</tt> / <tt class=\" \">minRowHeight</tt> / <tt class=\" \">maxRowHeight</tt> &ndash; controls table-wide dimensions of rows    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">headerTitle</tt> / <tt class=\" \">headerView</tt> &ndash; controls the table's header    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">footerTitle</tt> / <tt class=\" \">footerView</tt> &ndash; controls the table's footer    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">scrollable</tt> (boolean) &ndash; controls whether the table is scrollable (vertically)    </p>\n</li></ul> <div class=\"section section-3 \" id=\"29004930_TableViews-Assigningdatatoyourtable\">\n<h3 class=\"heading \"><span>Assigning data to your table</span></h3>\n<p>\nNext we'll move on to adding rows, which are the core of any table component. Let's take a look at the options that Titanium makes available to you for creating and adding rows.    </p>\n<p>\nTable rows are represented by the <tt class=\" \">Ti.UI.TableViewRow</tt> object. This object contains various properties and methods that you can use to style and manage your table rows. You can create TableViewRow objects explicitly using the <tt class=\" \">Ti.UI.createTableViewRow()</tt> function. Conversely, you can use simple Javascript object literals to represent your rows. For quick and dirty row creation, the object literal technique is likely faster and easier. When you want to carefully style and control the behavior of rows, though, you'll probably want to create explicit row objects.    </p>\n<p>\n<img src=\"images/download/attachments/29004930/table.png\" alt=\"images/download/attachments/29004930/table.png\" class=\"confluence-embedded-image confluence-content-image-border image-right\" />\n</p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Object literals as rows</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// create an array of anonymous objects</code></div>\n<div class=\"line\"><code class=\"plain\">var tbl_data = [</code></div>\n<div class=\"line\"><code class=\"plain\">\t{title:</code><code class=\"string\">'Row 1'</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">\t{title:</code><code class=\"string\">'Row 2'</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">\t{title:</code><code class=\"string\">'Row 3'</code><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">];</code></div>\n<div class=\"line\"><code class=\"comments\">// now assign that array to the table's data property to add those objects as rows</code></div>\n<div class=\"line\"><code class=\"plain\">var table = Titanium.UI.createTableView({</code></div>\n<div class=\"line\"><code class=\"plain\">\tdata:tbl_data</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// alternatively, you could do</code></div>\n<div class=\"line\"><code class=\"plain\">table.setData(tbl_data);</code></div>\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow();</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(table);</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n</div>\n</div> <p>\n</p>\n<p>\nCreating object literals in this way is very handy when pulling data out of a database or across the network. By explicitly creating TableViewRow objects, you gain access to a few handy methods such as <tt class=\" \">add()</tt> or <tt class=\" \">fireEvent()</tt>.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"title\">Explicit TableViewRow objects</div>\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var row = Titanium.UI.createTableViewRow({</code></div>\n<div class=\"line\"><code class=\"plain\">    title: </code><code class=\"string\">'Row 1'</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">/* other properties */</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">table.appendRow(row);</code></div>\n<div class=\"line\"><code class=\"comments\">// with an explicit object, you can call methods such as</code></div>\n<div class=\"line\"><code class=\"comments\">// var imgCapture = row.toImage();</code></div>\n</div>\n</div> <div class=\"section section-4 \" id=\"29004930_TableViews-Emptyingatable\">\n<h4 class=\"heading \"><span>Emptying a table</span></h4>\n<p>\nYou can empty a table by setting its <tt class=\" \">data</tt> property to an empty array.    </p>\n<div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\nDo not set a TableView's <tt class=\" \">data</tt> property to <tt class=\" \">null</tt> or <tt class=\" \">undefined</tt> as it will result un unexpected behavior.    </p>\n</div>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">table.setData([]);</code></div>\n<div class=\"line\"><code class=\"comments\">// or</code></div>\n<div class=\"line\"><code class=\"plain\">table.data = [];</code></div>\n</div>\n</div> </div>\n<div class=\"section section-4 \" id=\"29004930_TableViews-Settingdatavs.setData()vs.appendRow()\">\n<h4 class=\"heading \"><span>Setting  data  vs.  setData()  vs.  appendRow()</span></h4>\n<p>\nFor best performance, create an array of row objects (object literals or explicitly typed) and then assign them to the table using either <tt class=\" \">setData()</tt> or by setting the <tt class=\" \">data</tt> property. In community tests, <tt class=\" \">appendRow()</tt> performs significantly slower than <tt class=\" \">setData()</tt> when adding thousands of rows to a test table. Though this is an uncommon scenario, it is still best to manage your tables, and all UI components, in the most performant manner possible.    </p>\n<p>\nIf your app does however currently require a table with thousands of rows, you should may want to reconsider your UI. Users won't want to scroll through that many rows to find the one that interests them. Even on the fastest device, such a table will be slow. Consider some sort of drill-down interface, filtering mechanism, or alternate UI/UX paradigm to reduce the size of the available table.    </p>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"29004930_TableViews-Rowproperties\">\n<h3 class=\"heading \"><span>Row properties</span></h3>\n<p>\nNow that we've seen how to create tables and rows, let's learn a bit more about the built-in row properties. TableViewRow objects have various useful properties that you can use to add style and functionality to your tables.    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">className</tt> &ndash; set this property equal to an arbitrary string to optimize rendering performance. On both iOS and Android, setting this property enables the operating system to reuse table rows that are scrolled out of view to speed up the rendering of newly-visible rows. On iOS, the string you supply is used to specify the reuse-identifier string (<a class=\"external-link external-link\" href=\"http://developer.apple.com/library/ios/#documentation%2FUIKit%2FReference%2FUITableView_Class%2FReference%2FReference.html%23%2F%2Fapple_ref%2Focc%2Finstm%2FUITableView%2FdequeueReusableCellWithIdentifier%3A\" target=\"_blank\">setdequeueReusableCellWithIdentifier</a>); on Android, it is used within a custom object reuse method within Titanium.    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">leftImage</tt> &ndash; set this property equal to an image URL (local or remote) to display that image to the left of the row's title    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">rightImage</tt> &ndash; set this property equal to an image URL (local or remote) to display that image to the right of the row's title    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">backgroundImage</tt> &ndash; set this property equal to an image URL (local or remote) to display that image in the background of the row    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">backgroundColor</tt> &ndash; set this property to a color string to set the row's background color    </p>\n</li></ul> <p>\n<img src=\"images/download/attachments/29004930/table2.png\" alt=\"images/download/attachments/29004930/table2.png\" class=\"confluence-embedded-image confluence-content-image-border image-right\" />\n</p>\n<p>\nSo let's augment the properties of the prior TableView example rows. In the following code we'll utilize the above properties on a per row basis, making for a highly styled set of table rows.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var tbl_data = [</code></div>\n<div class=\"line\"><code class=\"plain\">    {title:</code><code class=\"string\">'Row 1'</code><code class=\"plain\">, leftImage: </code><code class=\"string\">'KS_nav_ui.png'</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">    {title:</code><code class=\"string\">'Row 2'</code><code class=\"plain\">, rightImage: </code><code class=\"string\">'KS_nav_ui.png'</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">    {title:</code><code class=\"string\">'Row 3'</code><code class=\"plain\">, backgroundColor: </code><code class=\"string\">'#fdd'</code><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">];</code></div>\n<div class=\"line\"><code class=\"comments\">// now assign that array to the table's data property to add those objects as rows</code></div>\n<div class=\"line\"><code class=\"plain\">var table = Titanium.UI.createTableView({</code></div>\n<div class=\"line\"><code class=\"plain\">    data:tbl_data</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// alternatively, you could do</code></div>\n<div class=\"line\"><code class=\"plain\">table.setData(tbl_data);</code></div>\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow();</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(table);</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n</div>\n</div> <p>\n</p>\n<div class=\"section section-4 \" id=\"29004930_TableViews-Rowindicators\">\n<h4 class=\"heading \"><span>Row indicators</span></h4>\n<p>\nRow indicators are icons that provide visual cues to your users related to your table rows. As shown in the following graphic, Android supports two built-in icons while iOS supports three. Each is a boolean value set with the property listed following the graphic.    </p>\n<p>\n<img src=\"images/download/attachments/29004930/row_indicators.png\" alt=\"images/download/attachments/29004930/row_indicators.png\" class=\"confluence-embedded-image\" />\n</p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">hasChild</tt> &ndash; indicates sub-table or additional rows (most commonly used on iOS with the navigation controller)    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">hasDetail</tt> &ndash; indicates a detail view or alert will appear when row is tapped (not supported on Android)    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">hasCheck</tt> &ndash; an on/off or yes/no indicator    </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-3 \" id=\"29004930_TableViews-Customrows\">\n<h3 class=\"heading \"><span>Custom rows</span></h3>\n<p>\nIf the stock properties don't suit your needs, you can add Views, ImageViews, Labels, Buttons, and so forth as children of your rows. This gives you enormous flexibility when laying out the content of your table.    </p>\n<p>\nLet's once again visit the example TableView code. This time we'll modify it to use explicit TableViewRows. To these TableViewRows we will add a label, button, and image in a custom format.    </p>\n<p>\n<img src=\"images/download/attachments/29004930/table3.png\" alt=\"images/download/attachments/29004930/table3.png\" class=\"confluence-embedded-image confluence-content-image-border image-right\" />\n</p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// Create an array of explicitly defined custom TableViewRows</code></div>\n<div class=\"line\"><code class=\"plain\">var tbl_data = [];</code></div>\n<div class=\"line\"><code class=\"keyword\">for</code><code class=\"plain\"> (var i = </code><code class=\"value\">0</code><code class=\"plain\">; i &lt; </code><code class=\"value\">10</code><code class=\"plain\">; i++) {</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar row = Ti.UI.createTableViewRow();</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar label = Ti.UI.createLabel({</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tleft: </code><code class=\"value\">10</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\ttext: </code><code class=\"string\">'Row '</code><code class=\"plain\"> + (i+</code><code class=\"value\">1</code><code class=\"plain\">)</code></div>\n<div class=\"line\"><code class=\"plain\">\t});</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar image = Ti.UI.createImageView({</code></div>\n<div class=\"line\"><code class=\"plain\">\t\timage: </code><code class=\"string\">'KS_nav_ui.png'</code></div>\n<div class=\"line\"><code class=\"plain\">\t});</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar button = Ti.UI.createButton({</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tright: </code><code class=\"value\">10</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\theight: </code><code class=\"value\">30</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\twidth: </code><code class=\"value\">80</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\ttitle: </code><code class=\"string\">'press me'</code></div>\n<div class=\"line\"><code class=\"plain\">\t});</code></div>\n<div class=\"line\"><code class=\"plain\">\trow.add(label);</code></div>\n<div class=\"line\"><code class=\"plain\">\trow.add(image);</code></div>\n<div class=\"line\"><code class=\"plain\">\trow.add(button);</code></div>\n<div class=\"line\"><code class=\"plain\">\ttbl_data.push(row);</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"comments\">// now assign that array to the table's data property to add those objects as rows</code></div>\n<div class=\"line\"><code class=\"plain\">var table = Titanium.UI.createTableView({</code></div>\n<div class=\"line\"><code class=\"plain\">    data:tbl_data</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow();</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(table);</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n</div>\n</div> <p>\nThis is just one very simple example of how you can create custom rows for your tables. You can literally embed almost any Titanium UI component in any visual configuration to create your rows.    </p>\n<div class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n<p>\nIt is tempting to make heavy use of Titanium's flexibility with custom rows. You need to be aware, however, of the performance implications of making your rows overly complex. Each unique UI element you add to a row has resources requirements, and those requirements are magnified by the number of rows in your tables. Be sure to test both on simulator/emulator and device as you develop to ensure you are getting the app performance you expect, and scale back row complexity if necessary.    </p>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"29004930_TableViews-Groupedrows\">\n<h3 class=\"heading \"><span>Grouped rows</span></h3>\n<p>\n<img src=\"images/download/attachments/29004930/table_grouped_rows.png\" alt=\"images/download/attachments/29004930/table_grouped_rows.png\" class=\"confluence-embedded-image image-right\" />\n</p>\n<p>\nOn iOS, you can set the <tt class=\" \">style</tt> property of the table to display table sections as separate components, as shown in the following graphic.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var inputData = [</code></div>\n<div class=\"line\"><code class=\"plain\">\t{title:</code><code class=\"string\">'row 1'</code><code class=\"plain\">, header:</code><code class=\"string\">'Header 1'</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">\t{title:</code><code class=\"string\">'row 2'</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">\t{title:</code><code class=\"string\">'row 3'</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">\t{title:</code><code class=\"string\">'row 4'</code><code class=\"plain\">, header:</code><code class=\"string\">'Header 2'</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">\t{title:</code><code class=\"string\">'row 5'</code><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">];</code></div>\n<div class=\"line\"><code class=\"plain\">var table = Titanium.UI.createTableView({</code></div>\n<div class=\"line\"><code class=\"plain\">\tdata:inputData,</code></div>\n<div class=\"line\"><code class=\"plain\">\tstyle:Titanium.UI.iPhone.TableViewStyle.GROUPED</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow();</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(table);</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004930_TableViews-Headersandfooters\">\n<h3 class=\"heading \"><span>Headers and footers</span></h3>\n<p>\n<img src=\"images/download/attachments/29004930/table5.png\" alt=\"images/download/attachments/29004930/table5.png\" class=\"confluence-embedded-image confluence-content-image-border image-right\" />\n</p>\n<p>\nYou can use the built-in <tt class=\" \">headerTitle</tt> and <tt class=\" \">footerTitle</tt> to add header and footer titles to your tables. This convenience property allows you to enter arbitrary text for these titles, but will only use the default font formatting.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var data = [</code></div>\n<div class=\"line\"><code class=\"plain\">\t{ title: </code><code class=\"string\">'Row 1'</code><code class=\"plain\"> },</code></div>\n<div class=\"line\"><code class=\"plain\">\t{ title: </code><code class=\"string\">'Row 2'</code><code class=\"plain\"> },</code></div>\n<div class=\"line\"><code class=\"plain\">\t{ title: </code><code class=\"string\">'Row 3'</code><code class=\"plain\"> }</code></div>\n<div class=\"line\"><code class=\"plain\">];</code></div>\n<div class=\"line\"><code class=\"plain\">var table = Titanium.UI.createTableView ({</code></div>\n<div class=\"line\"><code class=\"plain\">    data:data,</code></div>\n<div class=\"line\"><code class=\"plain\">    headerTitle:</code><code class=\"string\">'TableView examples and test cases'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    footerTitle:</code><code class=\"string\">\"Wow. That was cool!\"</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow();</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(table);</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n</div>\n</div> <p>\n</p>\n<p>\nA more flexible technique is to use Views for your headers and footers. You can create a view and set it in the table's <tt class=\" \">headerView</tt> or <tt class=\" \">footerView</tt> properties. Here's an example of setting both the header and footer using these properties.    </p>\n<p>\n<img src=\"images/download/attachments/29004930/table4.png\" alt=\"images/download/attachments/29004930/table4.png\" class=\"confluence-embedded-image confluence-content-image-border image-right\" />\n</p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var tbl_data = [</code></div>\n<div class=\"line\"><code class=\"plain\">\t{ title: </code><code class=\"string\">'Row 1'</code><code class=\"plain\"> },</code></div>\n<div class=\"line\"><code class=\"plain\">\t{ title: </code><code class=\"string\">'Row 2'</code><code class=\"plain\"> },</code></div>\n<div class=\"line\"><code class=\"plain\">\t{ title: </code><code class=\"string\">'Row 3'</code><code class=\"plain\"> }</code></div>\n<div class=\"line\"><code class=\"plain\">];</code></div>\n<div class=\"line\"><code class=\"plain\">var createCustomView = function(title) {</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar view = Ti.UI.createView({</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tbackgroundColor: </code><code class=\"string\">'#222'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\theight: </code><code class=\"value\">40</code></div>\n<div class=\"line\"><code class=\"plain\">\t});</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar text = Ti.UI.createLabel({</code></div>\n<div class=\"line\"><code class=\"plain\">\t\ttext: title,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tleft: </code><code class=\"value\">20</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tcolor: </code><code class=\"string\">'#fff'</code></div>\n<div class=\"line\"><code class=\"plain\">\t});</code></div>\n<div class=\"line\"><code class=\"plain\">\tview.add(text);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> view;</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n<div class=\"line\"><code class=\"comments\">// now assign that array to the table's data property to add those objects as rows</code></div>\n<div class=\"line\"><code class=\"plain\">var table = Titanium.UI.createTableView({</code></div>\n<div class=\"line\"><code class=\"plain\">    data:tbl_data,</code></div>\n<div class=\"line\"><code class=\"plain\">    headerView: createCustomView(</code><code class=\"string\">'Header View'</code><code class=\"plain\">),</code></div>\n<div class=\"line\"><code class=\"plain\">    footerView: createCustomView(</code><code class=\"string\">'Footer View'</code><code class=\"plain\">)</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// alternatively, you could do</code></div>\n<div class=\"line\"><code class=\"plain\">table.setData(tbl_data);</code></div>\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow();</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(table);</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004930_TableViews-Tablesections\">\n<h3 class=\"heading \"><span>Table sections</span></h3>\n<p>\nTable sections enable you to create groupings of related rows within your table. Table sections can have headers and footers. You create sections with the <tt class=\" \">Ti.UI.createTableViewSection()</tt> method. Then, you add rows to that section and set the table's <tt class=\" \">sections</tt> property equal to an array of sections. Like this:    </p>\n<p>\n<img src=\"images/download/attachments/29004930/table_section.png\" alt=\"images/download/attachments/29004930/table_section.png\" class=\"confluence-embedded-image confluence-content-image-border image-right\" />\n</p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"comments\">// Create the first TableViewSection</code></div>\n<div class=\"line\"><code class=\"plain\">var section1 = Ti.UI.createTableViewSection({</code></div>\n<div class=\"line\"><code class=\"plain\">\theaderTitle:</code><code class=\"string\">'Header 1'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// use a loop to add some rows</code></div>\n<div class=\"line\"><code class=\"keyword\">for</code><code class=\"plain\"> (var i=</code><code class=\"value\">0</code><code class=\"plain\">; i &lt; </code><code class=\"value\">4</code><code class=\"plain\">; i++) {</code></div>\n<div class=\"line\"><code class=\"plain\">\tsection1.add(Ti.UI.createTableViewRow({</code></div>\n<div class=\"line\"><code class=\"plain\">\t\ttitle:</code><code class=\"string\">'Row '</code><code class=\"plain\">+i</code></div>\n<div class=\"line\"><code class=\"plain\">\t}));</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"comments\">// do it all again...</code></div>\n<div class=\"line\"><code class=\"plain\">var section2 = Ti.UI.createTableViewSection({</code></div>\n<div class=\"line\"><code class=\"plain\">\theaderTitle: </code><code class=\"string\">'Section 2'</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"keyword\">for</code><code class=\"plain\"> (var i=</code><code class=\"value\">4</code><code class=\"plain\">; i &lt; </code><code class=\"value\">10</code><code class=\"plain\">; i++) {</code></div>\n<div class=\"line\"><code class=\"plain\">\tsection2.add(Ti.UI.createTableViewRow({</code></div>\n<div class=\"line\"><code class=\"plain\">\t\ttitle:</code><code class=\"string\">'Row '</code><code class=\"plain\">+i</code></div>\n<div class=\"line\"><code class=\"plain\">\t}));</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"comments\">// Now, here's our table, and we're setting the data to hold the sections</code></div>\n<div class=\"line\"><code class=\"plain\">var table = Ti.UI.createTableView({</code></div>\n<div class=\"line\"><code class=\"plain\">\tdata:[section1,section2]</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow();</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(table);</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n</div>\n</div> <p>\nPrior to Release 3.0, you need to use the TableView property <tt class=\" \">data</tt> to set the sections.    </p>\n<div class=\"section section-4 \" id=\"29004930_TableViews-Addingorremovingsectionsfromatable\">\n<h4 class=\"heading \"><span>Adding or removing sections from a table</span></h4>\n<p>\n<strong class=\" \">The information in this section only applies to Release 3.0 and later.</strong> </p>\n<p>\nAfter creating and rendering a TableView, you can add sections using the TableView methods: <tt class=\" \">appendSection</tt>, <tt class=\" \">insertSectionBefore</tt> and <tt class=\" \">insertSectionAfter</tt>. Using <tt class=\" \">insertSectionBefore</tt> or <tt class=\" \">insertSectionAfter</tt>, you can insert individual sections anywhere in the TableView, but using <tt class=\" \">appendSection</tt>, you can only insert individual or multiple sections to the end of the TableView. For the iOS platform, you can optionally choose to render the addition with an animation.    </p>\n<div class=\"confbox admonition admonition-warning aui-message problem shadowed information-macro\">\n<p>\nThere are several outstanding issues with the APIs described in this section. Until these issues are resolved, these APIs should be avoided.JIRA Issues Macro: The JIRA server returned a trusted apps error: USER_UNKNOWN;\tUnknown User: {0};\t[&quot;doc-robot&quot;]JIRA Issues Macro: The JIRA server returned a trusted apps error: USER_UNKNOWN;\tUnknown User: {0};\t[&quot;doc-robot&quot;]JIRA Issues Macro: The JIRA server returned a trusted apps error: USER_UNKNOWN;\tUnknown User: {0};\t[&quot;doc-robot&quot;]JIRA Issues Macro: The JIRA server returned a trusted apps error: USER_UNKNOWN;\tUnknown User: {0};\t[&quot;doc-robot&quot;]    </p>\n</div>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var tv = Ti.UI.createTableView({</code></div>\n<div class=\"line\"><code class=\"plain\">\tsections:[section2,section4]</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// Render table...</code></div>\n<div class=\"line\"><code class=\"comments\">// Inserts a section at the beginning</code></div>\n<div class=\"line\"><code class=\"plain\">tv.insertSectionBefore(</code><code class=\"value\">0</code><code class=\"plain\">, section1);</code></div>\n<div class=\"line\"><code class=\"comments\">// Inserts a section in between section2 and section4</code></div>\n<div class=\"line\"><code class=\"plain\">tv.insertSectionAfter(</code><code class=\"value\">1</code><code class=\"plain\">, section3);</code></div>\n<div class=\"line\"><code class=\"comments\">// Inserts multiple sections at the end of the table</code></div>\n<div class=\"line\"><code class=\"plain\">tv.appendSection(section5to7);</code></div>\n</div>\n</div> <p>\nYou can remove individual sections from a TableView using the TableView method, <tt class=\" \">removeSection</tt>.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var tv = Ti.UI.createTableView({</code></div>\n<div class=\"line\"><code class=\"plain\">\tsections:[section1,section2,section3]</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// Render table...</code></div>\n<div class=\"line\"><code class=\"plain\">tv.removeSection(section2);</code></div>\n</div>\n</div> <p>\nPrior to Release 3.0, you need to use the TableView property, <tt class=\" \">data</tt>, to refresh the entire table.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004930_TableViews-IteratingovertherowsinatableusingSection\">\n<h4 class=\"heading \"><span>Iterating over the rows in a table using Section</span></h4>\n<p>\nTitanium always creates at least one table section for you even if you don't explicitly create a TableViewSection. This is handy because sections have a <tt class=\" \">rows</tt> property, which tables do not. This property stores an array of all the rows in that section. In other words, you can use sections to loop programmatically through the rows in a table.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var table = Ti.UI.createTableView({});</code></div>\n<div class=\"line\"><code class=\"comments\">// we'll add rows, but not sections</code></div>\n<div class=\"line\"><code class=\"plain\">table.data = resultsOfSomeDatabaseOperation();</code></div>\n<div class=\"line\"><code class=\"comments\">// when the table is clicked, loop through the rows</code></div>\n<div class=\"line\"><code class=\"plain\">table.addEventListener(</code><code class=\"string\">'click'</code><code class=\"plain\">, function(e){</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar sections = table.data; </code><code class=\"comments\">// grab the array of sections</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar section = sections[</code><code class=\"value\">0</code><code class=\"plain\">]; </code><code class=\"comments\">// use just the first section</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">for</code><code class=\"plain\">(var x=</code><code class=\"value\">0</code><code class=\"plain\">,y=section.rowCount;x &lt; y;x++) {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tvar theRow = section.rows[x];</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// do something with theRow</code></div>\n<div class=\"line\"><code class=\"plain\">\t}</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> </div>\n</div>\n<div class=\"section section-3 \" id=\"29004930_TableViews-Searchingwithinatable\">\n<h3 class=\"heading \"><span>Searching within a table</span></h3>\n<p>\nYou can enable searching by adding a search bar to your tables. As users enter text, rows are filtered such that only those containing the text in their <tt class=\" \">title</tt> property remain visible. The search is not a leading character search. In other words, searching for the letter &quot;b&quot; would display all rows containing that letter anywhere within their <tt class=\" \">title</tt>.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">function makeRow() {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// generate random string of digits and capital English letters</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// see http://en.wikipedia.org/wiki/Base_36</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> Ti.UI.createTableViewRow({</code></div>\n<div class=\"line\"><code class=\"plain\">\t\ttitle: Math.random().toString(</code><code class=\"value\">36</code><code class=\"plain\">).substring(</code><code class=\"value\">7</code><code class=\"plain\">)</code></div>\n<div class=\"line\"><code class=\"plain\">\t});</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">var searchbar = Ti.UI.createSearchBar({</code></div>\n<div class=\"line\"><code class=\"plain\">\tbarColor: </code><code class=\"string\">'#385292'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tshowCancel: </code><code class=\"keyword\">false</code><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">var tbl = Ti.UI.createTableView({</code></div>\n<div class=\"line\"><code class=\"plain\">\tsearch: searchbar,</code></div>\n<div class=\"line\"><code class=\"plain\">\thideSearchOnSelection: </code><code class=\"keyword\">true</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">var data = [];</code></div>\n<div class=\"line\"><code class=\"keyword\">for</code><code class=\"plain\">(var i=</code><code class=\"value\">0</code><code class=\"plain\">; i&lt;</code><code class=\"value\">100</code><code class=\"plain\">; i++) {</code></div>\n<div class=\"line\"><code class=\"plain\">\tdata.push(makeRow());</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">tbl.data = data;</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(tbl);</code></div>\n</div>\n</div> <p>\nAs you can see in the image below, there are platform differences in the way the search bar is rendered. A couple of the properties used bear further explanation:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">showCancel</tt> if <tt class=\" \">true</tt> then show a cancel (&quot;clear&quot;) button always. If <tt class=\" \">false</tt> on Android never show that button; on iOS don't show Cancel until the user begins typing.    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">hideSearchOnSelection</tt> is an iOS only property. With it set to <tt class=\" \">true</tt> as soon as the user taps a row in the search results, the search box is cleared and the Cancel button is hidden. Set it to <tt class=\" \">false</tt> and the search text and button would remain. The default value is <tt class=\" \">true</tt> Android operates as if this value were set to <tt class=\" \">false</tt> </p>\n</li></ul> <p>\n<img src=\"images/download/attachments/29004930/tablesearching.png\" alt=\"images/download/attachments/29004930/tablesearching.png\" class=\"confluence-embedded-image confluence-content-image-border\" width=\"500\" />\n</p>\n</div>\n<div class=\"section section-3 \" id=\"29004930_TableViews-Eventsandeventobjectproperties\">\n<h3 class=\"heading \"><span>Events and event object properties</span></h3>\n<p>\nAs shown in the preceding code, you can add event listeners to tables. From there, you can access sections, rows, and nested child elements. While you could add event listeners directly to the rows, we don't recommend it. Doing so adds unnecessary memory and processing overhead to your app. Also, it can be difficult and repetitive adding listeners to all the various rows.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">table.addEventListener(</code><code class=\"string\">'click'</code><code class=\"plain\">, function(e){</code></div>\n<div class=\"line\"><code class=\"plain\">\talert(</code><code class=\"string\">'You clicked row '</code><code class=\"plain\">+e.index);</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> <p>\nAs shown in the code above, you have access to an event object, <tt class=\" \">e</tt>, that holds important table information within the listener. For example, some of the key properties of that event object include:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">index</tt> &ndash; the ordinal index number of the row that received the event    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">row</tt> &ndash; the object representing the row that received the event    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">rowData</tt> &ndash; the properties of the row that received the event    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">source</tt> &ndash; the object that received the original event    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">section</tt> &ndash; the table section that received the event    </p>\n</li></ul> <div class=\"section section-4 \" id=\"29004930_TableViews-Scrollevents\">\n<h4 class=\"heading \"><span>Scroll events</span></h4>\n<p>\nFor the iOS and Mobile Web platforms, the scroll events, <tt class=\" \">scroll</tt> and <tt class=\" \">scrollend</tt>, have different key properties than the other table view events:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">contentOffset</tt> &ndash; point that indicates how far the content in the table has moved. Since a table view can only scroll vertically, only the y-coordinate changes. A positive value indicates scrolling upward and a negative value indicates scrolling downward. See image below for a diagram of the content offset property.    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">contentSize</tt> &ndash; dimensions of the content, for example, the content height of a table with a few rows is smaller than the visible height. As illustrated in the image below, the pink box indicates the contentSize property and the blue box indicates the size property.    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">size</tt> &ndash; visible dimensions of the table view.    </p>\n</li></ul> <div class=\"tablewrap\">\n<table class=\"confluenceTable\">\n<thead class=\" \"></thead><tfoot class=\" \"></tfoot><tbody class=\" \"> <tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<img src=\"images/download/attachments/29004930/contentSize.png\" alt=\"images/download/attachments/29004930/contentSize.png\" class=\"confluence-embedded-image\" />\n</p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<img src=\"images/download/attachments/29004930/contentOffset.png\" alt=\"images/download/attachments/29004930/contentOffset.png\" class=\"confluence-embedded-image\" />\n</p>\n</td>\n</tr>\n</tbody> </table>\n</div>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"29004930_TableViews-Pulltorefresh\">\n<h3 class=\"heading \"><span>Pull to refresh</span></h3>\n<p>\nSince Release 2.1 on iOS, you can create a custom view that is only revealed when the user pulls the table down.  This custom view is commonly used to implement a pull-to-refresh feature that updates the table data when the user drags the table downward.  Create a custom View object containing other view objects, then set the TableView's <tt class=\" \">headerPullView</tt> to this object. Monitor the <tt class=\" \">scrolling</tt> event to see when the user pulls the table downward to initiate an update to the table.    </p>\n<p>\nWhile this example provides all the logic necessary to create the control, it is recommended to refactor it as a CommonJS module before using it for a production application.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow({fullscreen: </code><code class=\"keyword\">true</code><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">function getFormattedDate(){</code></div>\n<div class=\"line\"><code class=\"plain\">    var date = </code><code class=\"keyword\">new</code><code class=\"plain\"> Date();</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> date.toLocaleString();</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">var tableHeader = Ti.UI.createView({</code></div>\n<div class=\"line\"><code class=\"plain\">    backgroundColor:</code><code class=\"string\">'#e2e7ed'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    width:</code><code class=\"value\">320</code><code class=\"plain\">, height:</code><code class=\"value\">80</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">var border = Ti.UI.createView({</code></div>\n<div class=\"line\"><code class=\"plain\">    backgroundColor:</code><code class=\"string\">'#576c89'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    bottom:</code><code class=\"value\">0</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    height:</code><code class=\"value\">2</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">tableHeader.add(border);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">var imageArrow = Ti.UI.createImageView({</code></div>\n<div class=\"line\"><code class=\"plain\">    image:</code><code class=\"string\">'https://github.com/appcelerator/titanium_mobile/raw/master/demos/KitchenSink/Resources/images/whiteArrow.png'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    left:</code><code class=\"value\">20</code><code class=\"plain\">, bottom:</code><code class=\"value\">10</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    width:</code><code class=\"value\">23</code><code class=\"plain\">, height:</code><code class=\"value\">60</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">tableHeader.add(imageArrow);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">var labelStatus = Ti.UI.createLabel({</code></div>\n<div class=\"line\"><code class=\"plain\">    color:</code><code class=\"string\">'#576c89'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    font:{fontSize:</code><code class=\"value\">13</code><code class=\"plain\">, fontWeight:</code><code class=\"string\">'bold'</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">    text:</code><code class=\"string\">'Pull down to refresh...'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    textAlign:</code><code class=\"string\">'center'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    left:</code><code class=\"value\">55</code><code class=\"plain\">, bottom:</code><code class=\"value\">45</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    width:</code><code class=\"value\">200</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">tableHeader.add(labelStatus);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">var labelLastUpdated = Ti.UI.createLabel({</code></div>\n<div class=\"line\"><code class=\"plain\">    color:</code><code class=\"string\">'#576c89'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    font:{fontSize:</code><code class=\"value\">12</code><code class=\"plain\">},</code></div>\n<div class=\"line\"><code class=\"plain\">    text:</code><code class=\"string\">'Last Updated: '</code><code class=\"plain\"> + getFormattedDate(),</code></div>\n<div class=\"line\"><code class=\"plain\">    textAlign:</code><code class=\"string\">'center'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    left:</code><code class=\"value\">55</code><code class=\"plain\">, bottom:</code><code class=\"value\">15</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    width:</code><code class=\"value\">200</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">tableHeader.add(labelLastUpdated);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">var actInd = Ti.UI.createActivityIndicator({</code></div>\n<div class=\"line\"><code class=\"plain\">    left:</code><code class=\"value\">20</code><code class=\"plain\">, bottom:</code><code class=\"value\">13</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    width:</code><code class=\"value\">30</code><code class=\"plain\">, height:</code><code class=\"value\">30</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">tableHeader.add(actInd);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">var tableView = Ti.UI.createTableView({</code></div>\n<div class=\"line\"><code class=\"plain\">    headerPullView:tableHeader</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.add(tableView);</code></div>\n<div class=\"line\"><code class=\"plain\">var tableRowTotal = </code><code class=\"value\">0</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">function loadTableData(table, count, callback){</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">for</code><code class=\"plain\"> (var i=tableRowTotal, ilen=tableRowTotal+count; i&lt;ilen; i++){</code></div>\n<div class=\"line\"><code class=\"plain\">        var rowID = i + </code><code class=\"value\">1</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">        table.appendRow({title:</code><code class=\"string\">'Row '</code><code class=\"plain\"> + rowID});</code></div>\n<div class=\"line\"><code class=\"plain\">        tableRowTotal++;</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\">(callback &amp;&amp; typeof callback === </code><code class=\"string\">\"function\"</code><code class=\"plain\">){</code></div>\n<div class=\"line\"><code class=\"plain\">        callback(table);</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">loadTableData(tableView, </code><code class=\"value\">5</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">var pulling = </code><code class=\"keyword\">false</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">var reloading = </code><code class=\"keyword\">false</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">var offset = </code><code class=\"value\">0</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">tableView.addEventListener(</code><code class=\"string\">'scroll'</code><code class=\"plain\">,function(e){</code></div>\n<div class=\"line\"><code class=\"plain\">    offset = e.contentOffset.y;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (pulling &amp;&amp; !reloading &amp;&amp; offset &gt; -</code><code class=\"value\">80</code><code class=\"plain\"> &amp;&amp; offset &lt; </code><code class=\"value\">0</code><code class=\"plain\">){</code></div>\n<div class=\"line\"><code class=\"plain\">        pulling = </code><code class=\"keyword\">false</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">        var unrotate = Ti.UI.create2DMatrix();</code></div>\n<div class=\"line\"><code class=\"plain\">        imageArrow.animate({transform:unrotate, duration:</code><code class=\"value\">180</code><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">        labelStatus.text = </code><code class=\"string\">'Pull down to refresh...'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">    } </code><code class=\"keyword\">else</code><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (!pulling &amp;&amp; !reloading &amp;&amp; offset &lt; -</code><code class=\"value\">80</code><code class=\"plain\">){</code></div>\n<div class=\"line\"><code class=\"plain\">        pulling = </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">        var rotate = Ti.UI.create2DMatrix().rotate(</code><code class=\"value\">180</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">        imageArrow.animate({transform:rotate, duration:</code><code class=\"value\">180</code><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">        labelStatus.text = </code><code class=\"string\">'Release to refresh...'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">function resetPullHeader(table){</code></div>\n<div class=\"line\"><code class=\"plain\">    reloading = </code><code class=\"keyword\">false</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">    labelLastUpdated.text = </code><code class=\"string\">'Last Updated: '</code><code class=\"plain\"> + getFormattedDate();</code></div>\n<div class=\"line\"><code class=\"plain\">    actInd.hide();</code></div>\n<div class=\"line\"><code class=\"plain\">    imageArrow.transform=Ti.UI.create2DMatrix();</code></div>\n<div class=\"line\"><code class=\"plain\">    imageArrow.show();</code></div>\n<div class=\"line\"><code class=\"plain\">    labelStatus.text = </code><code class=\"string\">'Pull down to refresh...'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">    table.setContentInsets({top:</code><code class=\"value\">0</code><code class=\"plain\">}, {animated:</code><code class=\"keyword\">true</code><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">tableView.addEventListener(</code><code class=\"string\">'dragEnd'</code><code class=\"plain\">,function(e){</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (pulling &amp;&amp; !reloading &amp;&amp; offset &lt; -</code><code class=\"value\">80</code><code class=\"plain\">){</code></div>\n<div class=\"line\"><code class=\"plain\">        pulling = </code><code class=\"keyword\">false</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">        reloading = </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">        labelStatus.text = </code><code class=\"string\">'Updating...'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">        imageArrow.hide();</code></div>\n<div class=\"line\"><code class=\"plain\">        actInd.show();</code></div>\n<div class=\"line\"><code class=\"plain\">        e.source.setContentInsets({top:</code><code class=\"value\">80</code><code class=\"plain\">}, {animated:</code><code class=\"keyword\">true</code><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">        setTimeout(function(){</code></div>\n<div class=\"line\"><code class=\"plain\">            loadTableData(e.source, </code><code class=\"value\">5</code><code class=\"plain\">, resetPullHeader(e.source));</code></div>\n<div class=\"line\"><code class=\"plain\">        }, </code><code class=\"value\">2000</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004930_TableViews-Hands-onPractice\">\n<h3 class=\"heading \"><span>Hands-on Practice</span></h3>\n<div class=\"section section-4 \" id=\"29004930_TableViews-Goal\">\n<h4 class=\"heading \"><span>Goal</span></h4>\n<p>\nIn this activity, you will create a custom table that doesn&rsquo;t fill the entire viewport. The table will contain customized rows with background images that differ based on the row&rsquo;s location within the table. Each row will contain two images and two labels. When you tap a row, an event listener will determine if either of the images was the object that received the tap. If so, that image will be swapped with an alternate graphic.    </p>\n<p>\nWhen completed, your app should match what is shown in this movie: <a class=\"external-link external-link\" href=\"http://assets.appcelerator.com.s3.amazonaws.com/video/320.mov\" target=\"_blank\">http://assets.appcelerator.com.s3.amazonaws.com/video/320.mov</a> </p>\n</div>\n<div class=\"section section-4 \" id=\"29004930_TableViews-Resources\">\n<h4 class=\"heading \"><span>Resources</span></h4>\n<p>\nDownload the starting point code from <a class=\"external-link external-link\" href=\"http://assets.appcelerator.com.s3.amazonaws.com/app_u/code/320.zip\" target=\"_blank\">http://assets.appcelerator.com.s3.amazonaws.com/app_u/code/320.zip</a>. This archive includes the necessary graphics.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004930_TableViews-Steps\">\n<h4 class=\"heading \"><span>Steps</span></h4>\n<ol class=\" \"><li class=\" \"> <p>\nDownload, extract, and then import the TableView project into Studio. Confirm that the tiapp.xml file has appropriate values then close that file. Open app.js in Studio.    </p>\n</li><li class=\" \"> <p>\nFollowing the comments included in the starting app.js file, add these elements to the app:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nSet the window background to images/gradientBackground.png    </p>\n</li><li class=\" \"> <p>\nAdd a page heading of &ldquo;Custom Table&rdquo; with a dark blue, 18 px, bold font that is positioned at the top-left of the window    </p>\n</li><li class=\" \"> <p>\nDefine a table that is positioned below the label and which is 90% of the width of the screen and 85% of its height. Set the table&rsquo;s background color to transparent and for iOS, set the separator style to NONE.    </p>\n</li></ul></li><li class=\" \"> <p>\nWrite a function named makeRow() following the specifications included in the comments within the code.    </p>\n<ul class=\" \"><li class=\" \"> <p>\nYour makeRow() function should accept an object that will be used to pass in four values: the row number, primary label text, secondary label text, and a custom &ldquo;which image&rdquo; indicator string. Possible values for the row number parameter will be an integer or the string &lsquo;last&rsquo;. Possible values for the myImage string property will be a, b, c, blue, and red. You&rsquo;ll use this myImage property to determine which element in the row is tapped and to swap images accordingly.    </p>\n</li><li class=\" \"> <p>\nEach row should contain two images:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nLeft image: if an even-numbered row = &lsquo;images/imageA.png&rsquo; otherwise &lsquo;images/imageB.png&rsquo;. It should have a custom property named myImage that is set equal to the myImage parameter passed to your makeRow() function at run time.    </p>\n</li><li class=\" \"> <p>\nRight image: use &lsquo;images/notificationBadge.png&rsquo; and set its custom myImage property equal to &lsquo;blue&rsquo;    </p>\n</li></ul></li><li class=\" \"> <p>\nEach row should contain two labels:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nPrimary label: use a bold, 16 px font positioned to the right of the left image with its text set equal to the primary label parameter passed to makeRow() at run time. Be sure to set a height for the label.    </p>\n</li><li class=\" \"> <p>\nSecondary label: use a bold, 13 px font positioned below the primary label with its text set equal to the secondary label parameter passed to makeRow() at run time. Be sure to set a height for the label.    </p>\n</li></ul></li><li class=\" \"> <p>\nEach row&rsquo;s background image should be set to &lsquo;images/middleRow.png&rsquo; and the selected background image to &lsquo;images/middleRowSelected.png&rsquo;. If the row number parameter is 0, set the row&rsquo;s background image to &lsquo;images/topRow.png&rsquo; and selected background image to &lsquo;images/topRowSelected.png&rsquo;. If the row number parameter equals &lsquo;last&rsquo; then use &lsquo;images/bottomRow.png&rsquo; and &lsquo;images/bottomRowSelected.png&rsquo; for the background images and use &lsquo;images/imageC.png&rsquo; for the left image.    </p>\n</li><li class=\" \"> <p>\nThe makeRow() function should return a Titanium.UI.TableViewRow object.    </p>\n</li></ul></li><li class=\" \"> <p>\nUse a for-loop to create an array of 8 rows for your table, calling makeRow() in each iteration of the loop. Set the primary label to &ldquo;This is row&rdquo; plus the row-number indicator. Set the secondary label to &ldquo;Subtitle&rdquo; and the row-number indicator. Set the myImage value to either &lsquo;a&rsquo; or &lsquo;b&rsquo; depending on whether your loop counter is odd or even. (Hint: use the modulus operator, %, to calculate this odd/even value.)<br />Push one additional row into the rows array. This row should pass these values:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nrow number: &lsquo;last&rsquo;    </p>\n</li><li class=\" \"> <p>\nprimary label: &lsquo;This is the last row&rsquo;    </p>\n</li><li class=\" \"> <p>\nsecondary label: &lsquo;The last subtitle&rsquo;    </p>\n</li><li class=\" \"> <p>\nmyImage: &lsquo;c&rsquo;    </p>\n</li></ul></li><li class=\" \"> <p>\nAdd a click event listener to your table. Check the myImage property of the event source. Using a switch or if-else test, determine if myImage is set equal to a, b, c, blue, or red. If a, b, or c, swap the left image such that imageA becomes imageB, imageB becomes imageC, and imageC becomes imageA again. If the myImage property equals blue, the right image should change to images/notificationUnreadBadge.png otherwise it should swap back to images/notificationBadge.png.    </p>\n</li><li class=\" \"> <p>\nSave and run the project in the simulator. Confirm that the user interface matches the screenshots shown below. Confirm that your event listener functions properly:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nWhen the row is tapped, the background image should swap to the green &ldquo;selected&rdquo; version.    </p>\n</li><li class=\" \"> <p>\nIf the left image is tapped, the letter should advance to the next letter, looping back to the beginning properly.    </p>\n</li><li class=\" \"> <p>\nIf the right image is tapped, it should swap between the red and blue versions properly.    </p>\n</li></ul></li></ol> </div>\n</div>\n<div class=\"section section-3 \" id=\"29004930_TableViews-ReferencesandFurtherReading\">\n<h3 class=\"heading \"><span>References and Further Reading</span></h3>\n<ul class=\" \"><li class=\" \"> <p>\nFinished code: <a class=\"external-link external-link\" href=\"http://assets.appcelerator.com.s3.amazonaws.com/app_u/code/345-finished.zip\" target=\"_blank\">http://assets.appcelerator.com.s3.amazonaws.com/app_u/code/345-finished.zip</a> </p>\n</li><li class=\" \"> <p>\nTableView API docs: <a class=\"external-link external-link\" href=\"#!/api/Titanium.UI.TableView\">http://developer.appcelerator.com/apidoc/mobile/latest/Titanium.UI.TableView-object</a> </p>\n</li><li class=\" \"> <p>\nTableViewRow API docs: <a class=\"external-link external-link\" href=\"#!/api/Titanium.UI.TableViewRow\">http://developer.appcelerator.com/apidoc/mobile/latest/Titanium.UI.TableViewRow-object</a> </p>\n</li><li class=\" \"> <p>\nKitchen Sink code: <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/KitchenSink\" target=\"_blank\">https://github.com/appcelerator/KitchenSink</a> </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"29004930_TableViews-Summary\">\n<h2 class=\"heading \"><span>Summary</span></h2>\n<p>\nIn this section, you reviewed TableView basics, then explored some of its more powerful functionality. We looked at headers, footers, and sections. Finally, we wrapped up with a look at handling events associated with tables and rows. In the next section, we'll see how we can add custom icons and splash screens to our Titanium apps.    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"TableViews"});