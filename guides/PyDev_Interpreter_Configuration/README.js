Ext.data.JsonP['PyDev_Interpreter_Configuration']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>PyDev Interpreter Configuration</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"30083047\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=30083047\"><span>Edit</span></a>\n<h1>PyDev Interpreter Configuration</h1>\n<div class=\"section section-2 \" id=\"30083047_PyDevInterpreterConfiguration-ConfigureInterpreter\">\n<h2 class=\"heading \"><span>Configure Interpreter</span></h2>\n<p>\nAfter installing it, the first thing you must do is configure the <strong class=\" \">Python and/or Jython and/or IronPython</strong> interpreter.<br />To configure the interpreter:    </p>\n<p>\n1. Go to: <strong class=\" \">window &gt; preferences &gt; PyDev &gt; Interpreter - (Python/Jython/IronPython)</strong>.    </p>\n<p>\n2. Choose the interpreter you have installed in your computer (such as python.exe, jython.jar or ipy.exe).    </p>\n<p>\nNote that the <strong class=\" \">Auto Config</strong> will try to find it in your PATH, but it can fail if it's not there (or if you<br />want to configure a different interpreter).    </p>\n<p>\nOn <strong class=\" \">Windows</strong> it'll also search the registry and provide a choice based on the multiple interpreters available<br />in your computer (searching in the registry).    </p>\n<p>\nOn <strong class=\" \">Linux/Mac</strong>, usually you can do a 'which python' to know where the python executable is located.    </p>\n<p>\nOn <strong class=\" \">Mac</strong> it's usually at some place resembling the image below (so, if you want to configure a different version<br />of the interpreter manually, that's where you'd want to search):    </p>\n<p>\n<img src=\"images/pydev.org/images/interpreter_mac.png\" alt=\"images/pydev.org/images/interpreter_mac.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n<br />3. Select the paths that will be in your <strong class=\" \">SYSTEM PYTHONPATH</strong>.    </p>\n<p>\n<strong class=\" \">IMPORTANT</strong>: Select only folders that will <strong class=\" \">NOT be used as source folders for any project</strong> of yours<br />(those should be later configured as source folders in the project).    </p>\n<p>\n<strong class=\" \">IMPORTANT for Mac users</strong>: The Python version that usually ships with Mac doesn't seem to have the .py source files<br />available, which are required for PyDev, so, using a different interpreter is recommended (i.e.: Download it from <a class=\"external-link external-link\" href=\"http://python.org\" target=\"_blank\">http://python.org</a>). If you don't want to use a different interpreter, get the source files for the Python '/Lib' folder<br />and add those to the system installation.    </p>\n<p>\nAfter those steps, you should have a screen as presented below:    </p>\n<p>\n<img src=\"images/pydev.org/images/interpreter.png\" alt=\"images/pydev.org/images/interpreter.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n</p>\n</div>\n<div class=\"section section-2 \" id=\"30083047_PyDevInterpreterConfiguration-Howtocheckiftheinformationwascorrectlygotten\">\n<h2 class=\"heading \"><span>How to check if the information was correctly gotten</span></h2>\n<p>\nThe <strong class=\" \">System libs</strong> must contain at least the Lib and the Lib/site-packages directory.    </p>\n<p>\nThe <strong class=\" \">Forced builtin libs</strong> must contain the modules built into the interpreter (and others whose<br />analysis should be done dynamically. See: <a class=\"document-link \" href=\"#!/guide/PyDev_Interpreter_Configuration-section-30083047_PyDevInterpreterConfiguration-ForcedBuiltins\" PyDev_Interpreter_Configuration.html#30083047_PyDevInterpreterConfiguration-ForcedBuiltins=\"PyDev_Interpreter_Configuration.html#30083047_PyDevInterpreterConfiguration-ForcedBuiltins\">#Forced Builtins</a>).    </p>\n</div>\n<div class=\"section section-2 \" id=\"30083047_PyDevInterpreterConfiguration-Whatifitisnotcorrect?\">\n<h2 class=\"heading \"><span>What if it is not correct?</span></h2>\n<p>\nThe most common error is having a problem in the environment variables used from the shell that spawned Eclipse,<br />in a way that for some reason when getting the variables of one interpreter, it gathers the info from another<br />interpreter (thus mixing the interpreter and the actual libraries).    </p>\n<p>\nUsually running (from the command prompt) the file that gives that info for PyDev can help you discovering the<br />problem in your configuration (interpreterInfo.py):    </p>\n<p>\nThat file is usually located at: eclipse\\plugins\\org.python.pydev_$version$\\PySrc\\interpreterInfo.py,<br />but it can be at other location depending on how you installed it )    </p>\n<p>\npython.exe interpreterInfo.py    </p>\n<p>\njava.exe -cp c:\\path\\to\\jython.jar org.python.util.jython interpreterInfo.py    </p>\n<p>\nipy.exe interpreterInfo.py    </p>\n<p>\nIf you're unable to find out what's going on, please ask in the users forum (giving the output obtained from<br />executing interpreterInfo.py in your machine).    </p>\n</div>\n<div class=\"section section-2 \" id=\"30083047_PyDevInterpreterConfiguration-WhatifIaddsomethingnewinmySystemPYTHONPATHafterconfiguringit?\">\n<h2 class=\"heading \"><span>What if I add something new in my System PYTHONPATH after configuring it?</span></h2>\n<p>\nIf you add something to your python installation, you need to either<br />add it manually as a 'new folder' in the System PYTHONPATH (if it's still not under a folder in the PYTHONPATH)<br />or <strong class=\" \">(recommended) remove your interpreter and add it again</strong>, then, press apply.    </p>\n<p>\nNote that if you added a library that's already under a folder in the PYTHONPATH, you have to at least go to<br />the interpreter preferences and press apply so that it clears its internal caches (after the configuration<br />is done, things are set in stone for PyDev)    </p>\n</div>\n<div class=\"section section-2 \" id=\"30083047_PyDevInterpreterConfiguration-Libraries\">\n<h2 class=\"heading \"><span>Libraries</span></h2>\n<p>\nThe <strong class=\" \">System libs</strong> are the libraries that will be added to the PYTHONPATH of any project that is using this interpreter.    </p>\n<p>\nFor <strong class=\" \">Python and IronPython</strong>, it's composed of <strong class=\" \">folders, zip files and egg files</strong>. Note that if dlls should be added to<br />the PYTHONPATH, the folders actually containing those dlls should be added, and they must have the same name to be<br />imported in the code (the case is important). I.e.: if you want to import iTextDll, it <strong class=\" \">must</strong> be called iTextDll.dll<br />(note that .pyd and .so extensions are also accepted).    </p>\n<p>\nFor <strong class=\" \">Jython</strong>, it's composed of <strong class=\" \">folders and jars</strong>.    </p>\n</div>\n<div class=\"section section-2 \" id=\"30083047_PyDevInterpreterConfiguration-ForcedBuiltinsForcedBuiltins\">\n<h2 class=\"heading \"><span>Forced Builtins</span></h2>\n<p>\nThe Forced builtin libs are the libraries that are built-in the interpreter, such as <strong class=\" \">_<i class=\" \">builtin</i>_, sha, etc</strong> or<br />libraries that should forcefully analyzed through a shell (i.e.: to analyze modules in this list, PyDev will spawn<br />a shell and do a dir() on the module to get the available tokens for completions and code-analysis) &ndash; still,<br />sometimes even that is not always possible, in which case, <a class=\"document-link \" href=\"#!/guide/PyDev_Interpreter_Configuration-section-30083047_PyDevInterpreterConfiguration-PredefinedCompletions\" PyDev_Interpreter_Configuration.html#30083047_PyDevInterpreterConfiguration-PredefinedCompletions=\"PyDev_Interpreter_Configuration.html#30083047_PyDevInterpreterConfiguration-PredefinedCompletions\">#Predefined Completions</a> may be used to let PyDev know<br />about the structure of the code.    </p>\n<p>\nFor <strong class=\" \">Python</strong>, you should have around <strong class=\" \">50</strong> entries    </p>\n<p>\nFor <strong class=\" \">Jython</strong> around <strong class=\" \">30</strong> entries.    </p>\n<p>\nFor <strong class=\" \">IronPython</strong> more than <strong class=\" \">100</strong> entries. All the packages built into .NET should be included here &ndash; e.g.:<br />Microsoft, Microsoft.Windows.Themes, System, System.IO, etc.    </p>\n<p>\nAdditionally, you may add other libraries that you want to treat as<br />builtins, such as <strong class=\" \">os, wxPython, OpenGL, etc</strong>. This is very important, because PyDev works<br />on the java side only with static information, but some modules don't have much information when analyzed<br />statically, so, PyDev creates a shell to get information on those. Another important<br />thing is that they <strong class=\" \">must</strong> be on your system pythonpath (otherwise, the shell will be unable to get that information).    </p>\n<p>\n<img src=\"images/pydev.org/images/interpreter_forced_builtins.png\" alt=\"images/pydev.org/images/interpreter_forced_builtins.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n</p>\n</div>\n<div class=\"section section-2 \" id=\"30083047_PyDevInterpreterConfiguration-PredefinedCompletionsPredefinedCompletions\">\n<h2 class=\"heading \"><span>Predefined Completions</span></h2>\n<p>\nPredefined completions are completions acquired from sources that provide only the interfaces for<br />a given Python module (with Python 3.0 syntax).    </p>\n<p>\nA predefined completion module may be created by having a module with the extension &quot;.pypredef&quot;<br />with regular Python 3.0 contents, but with attributes having assigns to its type and methods having<br />as the body a sole return statement &ndash; and the docstring may have anything.    </p>\n<p>\nExample for a <strong class=\" \">my.source.module</strong> (must be declared in a <strong class=\" \">my.source.module.pypredef</strong> file):    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">MyConstantA </code><code class=\"keyword\">=</code><code class=\"plain\"> </code><code class=\"functions\">int</code></div>\n<div class=\"line\"><code class=\"plain\">MyConstantB </code><code class=\"keyword\">=</code><code class=\"plain\"> </code><code class=\"functions\">int</code></div>\n<div class=\"line\"><code class=\"keyword\">class</code><code class=\"plain\"> MyClass:</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\">    instanceAttribute </code><code class=\"keyword\">=</code><code class=\"plain\"> QObject</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">def</code><code class=\"plain\"> __init__(</code><code class=\"color1\">self</code><code class=\"plain\">, parent</code><code class=\"keyword\">=</code><code class=\"color1\">None</code><code class=\"plain\">):</code></div>\n<div class=\"line\"><code class=\"plain\">        '''</code></div>\n<div class=\"line\"><code class=\"color2\"> </code></div>\n<div class=\"line\"><code class=\"color2\">        @type</code><code class=\"plain\"> parent: QObject</code></div>\n<div class=\"line\"><code class=\"plain\">        '''</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">def</code><code class=\"plain\"> registerTimer(interval, </code><code class=\"functions\">object</code><code class=\"plain\">):</code></div>\n<div class=\"line\"><code class=\"plain\">        '''</code></div>\n<div class=\"line\"><code class=\"color2\"> </code></div>\n<div class=\"line\"><code class=\"color2\">        @type</code><code class=\"plain\"> interval: </code><code class=\"functions\">int</code></div>\n<div class=\"line\"><code class=\"color2\">        @type</code><code class=\"plain\"> </code><code class=\"functions\">object</code><code class=\"plain\">: QObject</code></div>\n<div class=\"line\"><code class=\"plain\">        '''</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"functions\">int</code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n<div class=\"line\"><code class=\"plain\"> </code></div>\n</div>\n</div> <p>\n<strong class=\" \">Note 1</strong>: the name of the file is the exact name of the module    </p>\n<p>\n<strong class=\" \">Note 2</strong>: .pypredef files are not searched in subfolders    </p>\n<p>\n<strong class=\" \">Optionally a QScintilla .api file may be added</strong>. When this is done, PyDev will try to create<br />.pypredef files from that .api file and will add the folder containing those to the PYTHONPATH.<br />Note that this conversion is still in beta and the file may not be correctly generated, so,<br />keep an eye for errors logged when a code-completion that would use those modules (while it<br />will not fail, those completions won't be shown using the .pypredef files).<br />In those situations, please create a bug-report with the .api file that generated incorrect code.    </p>\n<p>\n<img src=\"images/pydev.org/images/interpreter_predefined.png\" alt=\"images/pydev.org/images/interpreter_predefined.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n</p>\n</div>\n<div class=\"section section-2 \" id=\"30083047_PyDevInterpreterConfiguration-Environment\">\n<h2 class=\"heading \"><span>Environment</span></h2>\n<p>\nThe variables defined at the environment will be set as environment variables when running a script that uses the<br />given interpreter (note    that it can still be overridden in the run configuration)    </p>\n</div>\n<div class=\"section section-2 \" id=\"30083047_PyDevInterpreterConfiguration-Stringsubstitutionvariables\">\n<h2 class=\"heading \"><span>String substitution variables</span></h2>\n<p>\nStrings defined here may be used in:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nproject configuration for source folders and external libraries    </p>\n</li><li class=\" \"> <p>\nlaunch configuration for the main module    </p>\n</li></ul> <p>\nThey can be used in those places in the format: ${DECLARED_VARIABLE}    </p>\n</div>\n<div class=\"section section-2 \" id=\"30083047_PyDevInterpreterConfiguration-Cygwinusers\">\n<h2 class=\"heading \"><span>Cygwin users</span></h2>\n<p>\nPyDev currently has no support for cygwin. Currently you'll be able to configure the interpreter<br />with cygwin, but there are still other related problems (mostly on converting between windows and cygwin paths as needed).    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"PyDev Interpreter Configuration"});