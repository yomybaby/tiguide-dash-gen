Ext.data.JsonP['WebView_Use_Cases']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>WebView Use Cases</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004920\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004920\"><span>Edit</span></a>\n<h1>WebView Use Cases</h1>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/WebView_Use_Cases-section-29004920_WebViewUseCases-Ti.Facebook\" WebView_Use_Cases.html#29004920_WebViewUseCases-Ti.Facebook=\"WebView_Use_Cases.html#29004920_WebViewUseCases-Ti.Facebook\">Ti.Facebook</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/WebView_Use_Cases-section-29004920_WebViewUseCases-HTML5CanvasRendering\" WebView_Use_Cases.html#29004920_WebViewUseCases-HTML5CanvasRendering=\"WebView_Use_Cases.html#29004920_WebViewUseCases-HTML5CanvasRendering\">HTML5 Canvas Rendering</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/WebView_Use_Cases-section-29004920_WebViewUseCases-Forms\" WebView_Use_Cases.html#29004920_WebViewUseCases-Forms=\"WebView_Use_Cases.html#29004920_WebViewUseCases-Forms\">Forms</a> </p>\n</li></ul> <div class=\"section section-2 \" id=\"29004920_WebViewUseCases-Overview\">\n<h2 class=\"heading \"><span>Overview</span></h2>\n<p>\nWe've discussed when you should and shouldn't use <tt class=\" \">WebViews</tt> in your apps. It requires a careful evaluation of necessary functionality versus performance. Let's look at some real cases where <tt class=\" \">WebViews</tt> are the most appropriate solution. We'll discuss integration with social networking authentication and leveraging HTML5 graphics processing as prime reasons to use <tt class=\" \">WebViews</tt>.    </p>\n<div class=\"section section-3 \" id=\"29004920_WebViewUseCases-Ti.Facebook\">\n<h3 class=\"heading \"><span>Ti.Facebook</span></h3>\n<p>\nOne of the best reasons for leveraging <tt class=\" \">WebViews</tt>, integration with social networking authentication, has actually been built into the Titanium API. The <tt class=\" \">Ti.Facebook</tt> module includes a login component, rendered in a <tt class=\" \">WebView</tt>, that handles the authentication of Facebook users. Users are presented with the familiar Facebook login screen and once authenticated, are free to use Facebook APIs via your app.    </p>\n<p>\nHere is a basic example of how this module is used. We supply <tt class=\" \">Ti.Facebook</tt> with an <tt class=\" \">appid</tt> and an array of <tt class=\" \">permissions</tt>, set up an event handler for the login, then call the <tt class=\" \">Ti.Facebook.authorize()</tt> function. The <tt class=\" \">WebView</tt> that is presented with the Facebook login screen handles the rest. Here's the code, followed by the interface that your users will see when they attempt to login.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var win = Ti.UI.createWindow();</code></div>\n<div class=\"line\"><code class=\"plain\">Titanium.Facebook.appid = </code><code class=\"string\">'[YOUR APPID]'</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">Titanium.Facebook.permissions = [</code><code class=\"string\">'publish_stream'</code><code class=\"plain\">];</code></div>\n<div class=\"line\"><code class=\"plain\">Titanium.Facebook.addEventListener(</code><code class=\"string\">'login'</code><code class=\"plain\">, function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.success) {</code></div>\n<div class=\"line\"><code class=\"plain\">        alert(</code><code class=\"string\">'Logged In'</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    } </code><code class=\"keyword\">else</code><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.error) {</code></div>\n<div class=\"line\"><code class=\"plain\">        alert(e.error);</code></div>\n<div class=\"line\"><code class=\"plain\">    } </code><code class=\"keyword\">else</code><code class=\"plain\"> </code><code class=\"keyword\">if</code><code class=\"plain\"> (e.cancelled) {</code></div>\n<div class=\"line\"><code class=\"plain\">        alert(</code><code class=\"string\">\"Cancelled\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"plain\">Titanium.Facebook.authorize();</code></div>\n<div class=\"line\"><code class=\"plain\">win.open();</code></div>\n</div>\n</div> <p>\n<img src=\"images/download/attachments/29004920/facebook.png\" alt=\"images/download/attachments/29004920/facebook.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n<p>\nThis is a one-time dialog that your users will immediately recognize. This is a clear case where functionality and familiarity encapsulated in a <tt class=\" \">WebView</tt> more than makes up for any performance or load delay your app might incur.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004920_WebViewUseCases-HTML5CanvasRendering\">\n<h3 class=\"heading \"><span>HTML5 Canvas Rendering</span></h3>\n<p>\nTitanium, through its core API, does not include a canvas-like rendering context. While Titanium can animate properties of its UI components, it can't generate graphics, animation, physics, and other interactions as one would expect in a game. Modules give us the opportunity to extend rendering capabilities through native code, but in many cases a simpler solution is more appropriate.    </p>\n<p>\nTitanium developers, like other web-based mobile developers, can use the <tt class=\" \">WebView</tt> component to render animations and interactions in the HTML5 &lt;canvas&gt; element. While the &lt;canvas&gt; element has varying levels of support in desktop browsers, Android and iOS webviews have supported it for some time now. Because of this, Titanium developers can deliver Flash-like apps via this powerful HTML5 element.    </p>\n<p>\nA tutorial explaining how to develop with the HTML5 &lt;canvas&gt; element is beyond the scope of this document, but that doesn't mean we can't take a look at what's possible. The following screenshots give just a taste of what's possible with &lt;canvas&gt; rendering. In addition to the visuals shown, the animation and user interaction possible with this element can create very complex and immersive user experiences.    </p>\n<p>\n<img src=\"images/download/attachments/29004920/asteroid.jpg\" alt=\"images/download/attachments/29004920/asteroid.jpg\" class=\"confluence-embedded-image confluence-content-image-border\" width=\"300\" />\n<img src=\"images/download/attachments/29004920/hakin-trail.jpg\" alt=\"images/download/attachments/29004920/hakin-trail.jpg\" class=\"confluence-embedded-image confluence-content-image-border\" width=\"300\" />\n</p>\n<p>\n<img src=\"images/download/attachments/29004920/html5-example-7.png\" alt=\"images/download/attachments/29004920/html5-example-7.png\" class=\"confluence-embedded-image confluence-content-image-border\" width=\"300\" />\n<img src=\"images/download/attachments/29004920/liquid-particles.jpg\" alt=\"images/download/attachments/29004920/liquid-particles.jpg\" class=\"confluence-embedded-image confluence-content-image-border\" width=\"300\" />\n</p>\n<p>\n<img src=\"images/download/attachments/29004920/molecule.jpg\" alt=\"images/download/attachments/29004920/molecule.jpg\" class=\"confluence-embedded-image confluence-content-image-border\" width=\"300\" />\n<img src=\"images/download/attachments/29004920/strange-attraction.jpg\" alt=\"images/download/attachments/29004920/strange-attraction.jpg\" class=\"confluence-embedded-image confluence-content-image-border\" width=\"300\" />\n</p>\n<p>\nAs though the examples seen here aren't impressive enough, Titanium offers us even more. Titanium uniquely gives us the ability to augment our &lt;canvas&gt; code in <tt class=\" \">WebViews</tt> with native UI components and services. The possibilities here can range from simple buttons and sliders to modify &lt;canvas&gt; settings to a full heads-up display overlay on fully interactive, animated web content.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004920_WebViewUseCases-Forms\">\n<h3 class=\"heading \"><span>Forms</span></h3>\n<p>\nTitanium provides APIs to collect user input, such as the <a class=\"external-link external-link\" href=\"#!/api/Titanium.UI.TextField\">Ti.UI.TextField</a> and <a class=\"external-link external-link\" href=\"#!/api/Titanium.UI.TextArea\">Ti.UI.TextArea</a>. Still, HTML forms offer a couple of features that might be advantageous in some cases.    </p>\n<ul class=\" \"><li class=\" \"> <p>\nWebViews are automatically scrollable, so the soft keyboard won't cover the input fields in your HTML form.    </p>\n</li><li class=\" \"> <p>\nOn iOS and some versions of Android, navigation buttons (Next, Previous, and Done) are displayed above the soft keyboard to assist data entry. Users can tap these buttons to navigate the fields of your form.    </p>\n</li><li class=\" \"> <p>\nYou can use JavaScript libraries, such as jQuery, to add form validation, field highlighting, and so forth to an HTML form displayed within a WebView in your app. HTML 5 includes form validation support, though platform implementations vary.    </p>\n</li></ul> <p>\nYou can control which keyboard type is displayed with a WebView form by setting attributes on the <tt class=\" \">&lt;input&gt;</tt> tag. See <a class=\"external-link external-link\" href=\"http://www.w3.org/TR/html5/the-input-element.html#attr-input-type\" target=\"_blank\">http://www.w3.org/TR/html5/the-input-element.html#attr-input-type</a> for more information.    </p>\n</div>\n</div>\n<div class=\"section section-2 \" id=\"29004920_WebViewUseCases-Summary\">\n<h2 class=\"heading \"><span>Summary</span></h2>\n<p>\nIn this section we saw a few particular cases where <tt class=\" \">WebViews</tt> are the most appropriate way to add functionality to our apps. The <tt class=\" \">Ti.Facebook</tt> module makes use of a <tt class=\" \">WebView</tt> to offer users a simple and familiar way to login to the world's most popular social network. We also saw how we can use the HTML5 &lt;canvas&gt; element to create graphics, animations, and interaction that go well beyond the core capabilities of the Titanium API.    </p>\n<p>\n<tt class=\" \">Ti.UI.WebViews</tt> are a powerful component of the Titanium API. But as we know, with great power comes great responsibility. With the knowledge gained in this chapter, you should be well equipped to determine when a <tt class=\" \">WebView</tt> is appropriate, and how to best leverage its capabilities in order to deliver a high quality user experience.    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"WebView Use Cases"});