Ext.data.JsonP['Video_APIs']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Video APIs</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004911\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004911\"><span>Edit</span></a>\n<h1>Video APIs</h1>\n<div class=\"section section-2 \" id=\"29004911_VideoAPIs-Objective\">\n<h2 class=\"heading \"><span>Objective</span></h2>\n<p>\nIn this chapter, you'll learn how you can embed videos within your apps. You'll see how to play both local files and how to stream remote videos.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004911_VideoAPIs-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<p>\nYou can use the <a class=\"external-link external-link\" href=\"#!/api/Titanium.Media.VideoPlayer\"><tt class=\" \">Titanium.Media.VideoPlayer</tt></a> to play videos in your Titanium app. This object is returned when you call <a class=\"external-link external-link\" href=\"#!/api/Titanium.Media-method-createVideoPlayer\"><tt class=\" \">Titanium.Media.createVideoPlayer()</tt></a>. It provide useful methods, such as <tt class=\" \">play()</tt>, <tt class=\" \">pause()</tt>, and <tt class=\" \">stop()</tt>.    </p>\n<p>\nYou can play local video files by calling the <tt class=\" \">setMedia()</tt> method or by setting the <tt class=\" \">media</tt> property. Either accepts a File or Blob object. You can play a remote video by calling the <tt class=\" \">setUrl()</tt> method or by setting the <tt class=\" \">url</tt> property. Either accepts the URL of the media to play. (There's also a deprecated contentURL property, but you should use <tt class=\" \">url</tt> instead.) Finally, you can set the <tt class=\" \">autoplay</tt> property to <tt class=\" \">true</tt> to automatically play the video when the VideoPlayer is rendered.    </p>\n<p>\nThe VideoPlayer is treated like a regular Titanium View. Thus, you can overlay images and views over the VideoPlayer by adding them to the view hierarchy. Like this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var activeMovie = Titanium.Media.createVideoPlayer();</code></div>\n<div class=\"line\"><code class=\"comments\">// create a label </code></div>\n<div class=\"line\"><code class=\"plain\">var movieLabel = Titanium.UI.createLabel({</code></div>\n<div class=\"line\"><code class=\"plain\">\ttext:</code><code class=\"string\">'Do not try this at home'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\theight:</code><code class=\"value\">35</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tcolor:</code><code class=\"string\">'white'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tfont:{fontSize:</code><code class=\"value\">24</code><code class=\"plain\">,fontFamily:</code><code class=\"string\">'Helvetica Neue'</code><code class=\"plain\">}</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\"><code class=\"comments\">// add label to view</code></div>\n<div class=\"line\"><code class=\"plain\">activeMovie.add(movieLabel);</code></div>\n</div>\n</div> <div class=\"section section-3 \" id=\"29004911_VideoAPIs-Fullscreenandembeddedplayers\">\n<h3 class=\"heading \"><span>Fullscreen and embedded players</span></h3>\n<p>\nOn Android, the VideoPlayer must be used fullscreen. It cannot be embedded into a smaller view. This is because on Android, the VideoPlayer is not technically a proxy for a native view object like it is on iOS. Instead, creating the VideoPlayer fires an Intent which launches the native video player Activity. It's for this reason that on Android, you don't call <tt class=\" \">win.add(videoPlayer)</tt>. If you did so, your app would throw an error and crash.    </p>\n<p>\nOn iOS, you can embed the video player within a window or view; it doesn't have to be shown full size. Simply set <tt class=\" \">height</tt> and <tt class=\" \">width</tt> properties on the VideoPlayer. To display the player fullscreen, you can set <tt class=\" \">videoPlayer.fullscreen=true</tt>.    </p>\n<p>\nYou can control the way in which the video playback controls are shown for the player. You can &quot;embed&quot; the within the player, which removes them from the player's surrounding chrome giving more space to your video. You do so by setting the <tt class=\" \">movieControlStyle</tt> property, like this    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">var activeMovie = Titanium.Media.createVideoPlayer({</code></div>\n<div class=\"line\"><code class=\"plain\">\turl:</code><code class=\"string\">'../movie.mp4'</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">\tmovieControlStyle: Titanium.Media.VIDEO_CONTROL_EMBEDDED</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004911_VideoAPIs-Movieevents\">\n<h3 class=\"heading \"><span>Movie events</span></h3>\n<p>\nThe VideoPlayer supports quite a few events that you can use to control the playback experience. See the <a class=\"external-link external-link\" href=\"#!/api/Titanium.Media.VideoPlayer\"><tt class=\" \">Ti.Media.VideoPlayer</tt></a> API docs page for full information. But here are a few of the events you might monitor:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<tt class=\" \">complete</tt> &ndash; fired when the playback ends or the user exits playback, use the <tt class=\" \">e.reason</tt> property to determine the actual stop condition, such as <tt class=\" \">Ti.Media.VIDEO_FINISH_REASON_PLAYBACK_ENDED</tt> </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">load</tt> &ndash; fired when the movie finishes loading    </p>\n</li><li class=\" \"> <p>\n<tt class=\" \">fullscreen</tt> &ndash; fired when the movie changes to or from fullscreen, use the <tt class=\" \">e.entering</tt> property to determine if the player is entering or leaving fullscreen mode    </p>\n</li></ul> <p>\nA technique you should consider is stopping the movie when the video it's embedded in closes. You can do that simply with code like this:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">win.addEventListener(</code><code class=\"string\">'close'</code><code class=\"plain\">, function() {</code></div>\n<div class=\"line\"><code class=\"plain\">\tactiveMovie.stop();</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n</div> </div>\n<div class=\"section section-3 \" id=\"29004911_VideoAPIs-Hands-onPractice\">\n<h3 class=\"heading \"><span>Hands-on Practice</span></h3>\n<div class=\"section section-4 \" id=\"29004911_VideoAPIs-Goal\">\n<h4 class=\"heading \"><span>Goal</span></h4>\n<p>\nIn this activity, you will write a simple app to stream a movie from a remote URL.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004911_VideoAPIs-Steps\">\n<h4 class=\"heading \"><span>Steps</span></h4>\n<ol class=\" \"><li class=\" \"> <p>\nCreate a new Titanium Mobile app. Delete all of the code from the app.js file.    </p>\n</li><li class=\" \"> <p>\nDefine a window with a black background. Optionally, set the orientation of the window to landscape.    </p>\n</li><li class=\" \"> <p>\nDefine a VideoPlayer with these characteristics:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nbackgroundColor = black    </p>\n</li><li class=\" \"> <p>\ndefault video controls (not embedded)    </p>\n</li><li class=\" \"> <p>\nscalingMode = fill the screen    </p>\n</li><li class=\" \"> <p>\nfullscreen    </p>\n</li><li class=\" \"> <p>\nPlay the <a class=\"external-link external-link\" href=\"http://assets.appcelerator.com.s3.amazonaws.com/video/media.m4v\" target=\"_blank\">http://assets.appcelerator.com.s3.amazonaws.com/video/media.m4v</a> movie. Depending on your Android environment, that movie might not play well (due to encoding issues from the creation process). If you have playback troubles, you can play <a class=\"external-link external-link\" href=\"http://assets.appcelerator.com.s3.amazonaws.com/video/media.3gp\" target=\"_blank\">http://assets.appcelerator.com.s3.amazonaws.com/video/media.3gp</a> on Android instead.    </p>\n</li></ul></li><li class=\" \"> <p>\nAdd the branching logic so that on iOS you add the VideoPlayer to the window object.    </p>\n</li><li class=\" \"> <p>\nAdd the code to play the video stream and open the window.    </p>\n</li><li class=\" \"> <p>\nBuild and test your app in the simulator/emulator or on device.    </p>\n</li></ol> <p>\n</p>\n<div class=\"confbox admonition admonition-info aui-message hint shadowed information-macro\">\n<div class=\"title\">Simulator / emulator rotation</div>\n<p>\nRotate the iPhone simulator by pressing Command and either the left or right arrow key. Rotate the Android emulator by pressing Control+F12.    </p>\n</div>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"29004911_VideoAPIs-ReferencesandFurtherReading\">\n<h3 class=\"heading \"><span>References and Further Reading</span></h3>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://assets.appcelerator.com.s3.amazonaws.com/app_u/ebook/7.2_video.zip\" target=\"_blank\">Finished code</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"#!/api/Titanium.Media.VideoPlayer\">API docs: Ti.Media.VideoPlayer</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://developer.apple.com/library/ios/#documentation%2FMiscellaneous%2FConceptual%2FiPhoneOSTechOverview%2FMediaLayer%2FMediaLayer.html\" target=\"_blank\">iOS Developer Docs: Supported video formats</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://developer.android.com/guide/appendix/media-formats.html\" target=\"_blank\">Android Developer Docs: Supported media formats</a> </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"29004911_VideoAPIs-Summary\">\n<h2 class=\"heading \"><span>Summary</span></h2>\n<p>\nIn this chapter, you learned how you can embed videos within your apps. You saw how to play both local files and how to stream remote videos.    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Video APIs"});