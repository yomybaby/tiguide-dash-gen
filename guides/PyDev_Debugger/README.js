Ext.data.JsonP['PyDev_Debugger']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>PyDev Debugger</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"30083074\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=30083074\"><span>Edit</span></a>\n<h1>PyDev Debugger</h1>\n<p>\nThis section is targetted at explaining how to use the debugger. If you want more details on how to use the remote debugger, please check the <a class=\"document-link \" href=\"#!/guide/PyDev_Remote_Debugger\" PyDev_Remote_Debugger.html=\"PyDev_Remote_Debugger.html\">Remote Debugger page</a>.    </p>\n<p>\nOk, probably the first thing you'll want to do is: add a breakpoint to some file and then run the file (and wait for it to hit the breakpoint). To do that, let's start with the example below:    </p>\n<p>\n<img src=\"images/pydev.org/images/debugger/debugger1.png\" alt=\"images/pydev.org/images/debugger/debugger1.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n</p>\n<p>\n<strong class=\" \">Image:</strong> mod1.py    </p>\n<p>\nThe first thing we'll want to do is add a breakpoint. Let's do that at line 5 (print i). There are 2 ways of adding a breakpoint:    </p>\n<ul class=\"alternate \"><li class=\" \"> <p>\nDouble-clicking the left ruler    </p>\n</li><li class=\" \"> <p>\nTyping <strong class=\" \">Ctrl+F10</strong> to open the context-menu (see image below)    </p>\n</li></ul> <p>\n<img src=\"images/pydev.org/images/debugger/debugger2.png\" alt=\"images/pydev.org/images/debugger/debugger2.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n</p>\n<p>\n<strong class=\" \">Image:</strong> Context-menu    </p>\n<p>\nIf everything goes ok, you'll have the breakpoint shown in your sidebar (as below).    </p>\n<p>\n<img src=\"images/pydev.org/images/debugger/debugger3.png\" alt=\"images/pydev.org/images/debugger/debugger3.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n</p>\n<p>\n<strong class=\" \">Image:</strong> Breakpoint added    </p>\n<p>\n<strong class=\" \">NOTE</strong>: if you are putting the breakpoint in an external file (e.g.: some file in the site-packages), the left ruler will not appear, so, you'll not see the breakpoint. That's an Eclipse bug in version 3.1. It appears to be fixed for Eclipse 3.2, but as Eclipse 3.2 currently only has only 'development' releases, it is unsupported.    </p>\n<p>\nNow, to run that file, you can rigth click the file and choose to debug the file as a 'python run'. <strong class=\" \">NOTE</strong>: if you want to re-run the last executed file, you can click <strong class=\" \">F11</strong> to debug it.    </p>\n<p>\n<img src=\"images/pydev.org/images/debugger/debugger4.png\" alt=\"images/pydev.org/images/debugger/debugger4.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n</p>\n<p>\n<strong class=\" \">Image:</strong> Running the file in the debugger    </p>\n<p>\nWhen it hits the breakpoint, it will ask you to go to the debug perspective (you should say YES to this dialog).    </p>\n<p>\n<img src=\"images/pydev.org/images/debugger/debugger5.png\" alt=\"images/pydev.org/images/debugger/debugger5.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n</p>\n<p>\n<strong class=\" \">Image:</strong> Go to perspective dialog    </p>\n<p>\nThis perspective has the actions needed for debugging and allows you to see the variables and evaluate expressions.    </p>\n<p>\n<img src=\"images/pydev.org/images/debugger/debugger6.png\" alt=\"images/pydev.org/images/debugger/debugger6.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n</p>\n<p>\n<strong class=\" \">Image:</strong> Debug perspective    </p>\n<ul class=\"alternate \"><li class=\" \"> <p>\n<strong class=\" \">1. Stack view</strong>: You can see the variables in previous stacks by clicking on the stack you want to see.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">2. Variables view</strong>: It allows you to see the globals and locals for the selected stack.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">3. Breakpoints view</strong>:Selecting this tab you can see the breakpoints available and enable/disable any breakpoint.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">4. Editor</strong>: Shows the code and highlights the line that is about to be executed.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">5. Console</strong>: When you run a file through the PyDev debugger, the first thing that appears is a 'PyDev debugger' string, to indicate that you're running the file through the debugger.    </p>\n</li></ul> <p>\nNow, the basic things you can do in the debugger have some keybindings:    </p>\n<ul class=\"alternate \"><li class=\" \"> <p>\nStep in: <strong class=\" \">F5</strong> </p>\n</li><li class=\" \"> <p>\nStep over: <strong class=\" \">F6</strong> </p>\n</li><li class=\" \"> <p>\nStep out: <strong class=\" \">F7</strong> </p>\n</li><li class=\" \"> <p>\nResume: <strong class=\" \">F8</strong> </p>\n</li></ul> <p>\nAnd you can also evaluate some expression or make the breakpoint a conditional breakpoint. We'll see how this works below.    </p>\n<div class=\"section section-2 \" id=\"30083074_PyDevDebugger-Evaluatingsomeexpression\">\n<h2 class=\"heading \"><span>Evaluating some expression</span></h2>\n<p>\nTo evaluate some expression, you can simply select the piece of code you want to evaluate, right-click it and select 'watch'.    </p>\n<p>\n<img src=\"images/pydev.org/images/debugger/debugger7.png\" alt=\"images/pydev.org/images/debugger/debugger7.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n</p>\n<p>\n<strong class=\" \">Image:</strong> Evaluating expression    </p>\n<p>\nDoing so will open a new view that allows you to view the result of evaluating that piece of code in the current context. It allows you to edit some existing watch, add a new one or remove an existing (right clicking it provides all those actions).    </p>\n<p>\n<img src=\"images/pydev.org/images/debugger/debugger8.png\" alt=\"images/pydev.org/images/debugger/debugger8.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n</p>\n<p>\n<strong class=\" \">Image:</strong> Evaluate Expression view    </p>\n</div>\n<div class=\"section section-2 \" id=\"30083074_PyDevDebugger-Conditionalbreakpoints\">\n<h2 class=\"heading \"><span>Conditional breakpoints</span></h2>\n<p>\nTo make some breakpoint a 'conditional breakpoint', you have to go to some line that already has a breakpoint, type <strong class=\" \">Ctrl+F10</strong> and select <strong class=\" \">breakpoint properties</strong>.    </p>\n<p>\n<img src=\"images/pydev.org/images/debugger/debugger9.png\" alt=\"images/pydev.org/images/debugger/debugger9.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n</p>\n<p>\n<strong class=\" \">Image:</strong> Adding a condition to a breakpoint    </p>\n<p>\nDoing that will give you the following screen:    </p>\n<p>\n<img src=\"images/pydev.org/images/debugger/debugger10.png\" alt=\"images/pydev.org/images/debugger/debugger10.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n</p>\n<p>\n<strong class=\" \">Image:</strong> Breakpoint Properties    </p>\n<p>\nIn this screen, you can enable some condition...    </p>\n<p>\n<img src=\"images/pydev.org/images/debugger/debugger11.png\" alt=\"images/pydev.org/images/debugger/debugger11.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\" />\n</p>\n<p>\n<strong class=\" \">Image:</strong> Enabling some condition    </p>\n<p>\nSo, now, if you resume execution, it will only hit that breakpoint again when the condition is evaluated to True.    </p>\n</div>\n<div class=\"section section-2 \" id=\"30083074_PyDevDebugger-Whatmore?\">\n<h2 class=\"heading \"><span>What more?</span></h2>\n<p>\nNow, on to the <a class=\"document-link \" href=\"#!/guide/PyDev_Remote_Debugger\" PyDev_Remote_Debugger.html=\"PyDev_Remote_Debugger.html\">Remote Debugger</a> and the <a class=\"document-link \" href=\"#!/guide/PyDev_Debug_Console\" PyDev_Debug_Console.html=\"PyDev_Debug_Console.html\">Debug Console</a>...    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"PyDev Debugger"});