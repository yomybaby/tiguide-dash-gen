Ext.data.JsonP['PHP_Web_Page_Debugging']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>PHP Web Page Debugging</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"30083033\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=30083033\"><span>Edit</span></a>\n<h1>PHP Web Page Debugging</h1>\n<div class=\"section section-2 \" id=\"30083033_PHPWebPageDebugging-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/PHP_Web_Page_Debugging-section-30083033_PHPWebPageDebugging-BasicSetup\" PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-BasicSetup=\"PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-BasicSetup\">Basic Setup</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/PHP_Web_Page_Debugging-section-30083033_PHPWebPageDebugging-SettingupXDebuginphp.ini\" PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-SettingupXDebuginphp.ini=\"PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-SettingupXDebuginphp.ini\">Setting up XDebug in php.ini</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/PHP_Web_Page_Debugging-section-30083033_PHPWebPageDebugging-Verifytheinstallation\" PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-Verifytheinstallation=\"PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-Verifytheinstallation\">Verify the installation</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/PHP_Web_Page_Debugging-section-30083033_PHPWebPageDebugging-Settingupyourproject\" PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-Settingupyourproject=\"PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-Settingupyourproject\">Setting up your project</a> </p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/PHP_Web_Page_Debugging-section-30083033_PHPWebPageDebugging-CreatingaPHPprojectdirectlyonyourDocumentRootfolder\" PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-CreatingaPHPprojectdirectlyonyourDocumentRootfolder=\"PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-CreatingaPHPprojectdirectlyonyourDocumentRootfolder\">Creating a PHP project directly on your Document Root folder</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/PHP_Web_Page_Debugging-section-30083033_PHPWebPageDebugging-AliasingtoyourPHPproject\" PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-AliasingtoyourPHPproject=\"PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-AliasingtoyourPHPproject\">Aliasing to your PHP project</a> </p>\n</li></ul></li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/PHP_Web_Page_Debugging-section-30083033_PHPWebPageDebugging-Creatingalaunchconfiguration\" PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-Creatingalaunchconfiguration=\"PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-Creatingalaunchconfiguration\">Creating a launch configuration</a> </p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/PHP_Web_Page_Debugging-section-30083033_PHPWebPageDebugging-Notes\" PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-Notes=\"PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-Notes\">Notes</a> </p>\n</li></ul></li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/PHP_Web_Page_Debugging-section-30083033_PHPWebPageDebugging-UsingXDebugHelperbrowserextensiontoinitiateadebug\" PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-UsingXDebugHelperbrowserextensiontoinitiateadebug=\"PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-UsingXDebugHelperbrowserextensiontoinitiateadebug\">Using XDebug Helper browser extension to initiate a debug</a> </p>\n<ul class=\"toc-indentation \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/PHP_Web_Page_Debugging-section-30083033_PHPWebPageDebugging-Installation\" PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-Installation=\"PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-Installation\">Installation</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/PHP_Web_Page_Debugging-section-30083033_PHPWebPageDebugging-Debugging\" PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-Debugging=\"PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-Debugging\">Debugging</a> </p>\n</li></ul></li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/PHP_Web_Page_Debugging-section-30083033_PHPWebPageDebugging-DebugPorts\" PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-DebugPorts=\"PHP_Web_Page_Debugging.html#30083033_PHPWebPageDebugging-DebugPorts\">Debug Ports</a> </p>\n</li></ul> </div>\n<div class=\"section section-2 \" id=\"30083033_PHPWebPageDebugging-BasicSetup\">\n<h2 class=\"heading \"><span>Basic Setup</span></h2>\n<p>\nThe easiest way to setup and prepare your machine for PHP, and PHP debugging, is to install XAMPP, MAMP or ZendServer. Those packages are already pre-configured and ready to go with some very minor modifications.<br />The instruction here assumes that you already have a running server with PHP configured on it.    </p>\n</div>\n<div class=\"section section-2 \" id=\"30083033_PHPWebPageDebugging-SettingupXDebuginphp.ini\">\n<h2 class=\"heading \"><span>Setting up XDebug in php.ini</span></h2>\n<ul class=\" \"><li class=\" \"> <p>\nLocate your php.ini file (same path as you defined in your server's httpd.conf).    </p>\n</li><li class=\" \"> <p>\nOpen the file and add the following lines (these paths <i class=\" \">must</i> be modified according to your system type):    </p>\n<div class=\"confbox panel panel\">\n<p>\n;Hook the XDebug<br />zend_extension_ts=C:\\php\\ext\\php_xdebug-2.0.3-5.2.5.dll<br />xdebug.remote_enable=1<br />xdebug.remote_host=127.0.0.1<br />xdebug.remote_port=9000<br />xdebug.remote_handler=&quot;dbgp&quot;    </p>\n</div>\n</li><li class=\" \"> <p>\nNote that the XDebug extension should be added as a zend_extension or as a zend_extension_ts for Thread-Safe PHP environments. And, of course, change the version according to what you have.    </p>\n</li></ul> <p>\nIn case you have XAMPP or MAMP installation, locate the XDebug extension that was delivered with the package and set it up.    </p>\n<p>\nNotes:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nPort 9000 is the default port for XDebug. In case the Aptana PHP debugger client is set to listed on port 9000, there is no real need to set it in the ini, however it's a good practice to do so.    </p>\n</li><li class=\" \"> <p>\nIn case that an XDebug session is triggered from the studio and the client port does not match the debug port defined in the ini, the Studio will prompt you about it and advise you what to do (see above).    </p>\n</li><li class=\" \"> <p>\nThe zend_extension_ts is only valid in cases where the PHP interpreter was compiled as 'Thread-Safe'. In cases where it was not compiled as such (and you have a compatible xdebug extension), the line should be zend_extension=&lt;debugger path&gt;/php_xdebug.so (or similar).    </p>\n</li></ul> </div>\n<div class=\"section section-2 \" id=\"30083033_PHPWebPageDebugging-Verifytheinstallation\">\n<h2 class=\"heading \"><span>Verify the installation</span></h2>\n<p>\nSome of the packages mentioned above have a pre-configured link that can display your server's configurations. However, you can still verify that in a few simple steps (here we'll just assume you have an Apache server):    </p>\n<ol class=\" \"><li class=\" \"> <p>\nRestart your server    </p>\n</li><li class=\" \"> <p>\nCreate a PHP file named phpinfo.php in Apache's htdocs directory containing something simple, such as <i class=\" \">&lt;?php  phpinfo(); ?&gt;</i> to the file and save it.    </p>\n</li><li class=\" \"> <p>\nOpen the file URL in your web browser:  http://localhost/phpinfo.php . You should see the standard <i class=\" \">phpinfo</i> output.    </p>\n</li><li class=\" \"> <p>\nVerify that the XDebug was loaded by locating the note at the bottom of the first section. It should say something like: &quot;with Xdebug v2.0.3, Copyright (c) 2002-2008, by Derick Rethans&quot;.    </p>\n</li></ol> <p>\n<img src=\"images/download/attachments/30083033/PhpInfoXDebug.png\" alt=\"images/download/attachments/30083033/PhpInfoXDebug.png\" class=\"confluence-embedded-image\" />\n</p>\n</div>\n<div class=\"section section-2 \" id=\"30083033_PHPWebPageDebugging-Settingupyourproject\">\n<h2 class=\"heading \"><span>Setting up your project</span></h2>\n<p>\nThere are several ways to set up your workspace in a way that the debugger will catch all the breakpoints and behave correctly. Here are a few best-practices which explains when and how to set it up.    </p>\n<div class=\"section section-3 \" id=\"30083033_PHPWebPageDebugging-CreatingaPHPprojectdirectlyonyourDocumentRootfolder\">\n<h3 class=\"heading \"><span>Creating a PHP project directly on your Document Root folder</span></h3>\n<p>\nThis is perhaps the easiest way to make sure that you are always in sync with the content that the server is 'seeing' and the content that you are editing.    </p>\n<p>\nFollow these steps to create a PHP project that is pointed to your document root:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nAccess the Studio's File View    </p>\n</li><li class=\" \"> <p>\nBrowse to your document root directory and select the folder that you wish to promote to a project    </p>\n</li><li class=\" \"> <p>\nRight click it and select 'Promote to project'    </p>\n</li><li class=\" \"> <p>\nRight click the created project and select Properties    </p>\n</li><li class=\" \"> <p>\nClick on the Project Natures node and check the PHP Nature box    </p>\n</li><li class=\" \"> <p>\nOK the dialog (also click 'Yes' to close and re-open the project when a prompt dialog appears)    </p>\n</li></ul> <p>\nThat is all. You now have a PHP project that is pointing directly into your document root, or one of it's sub-folders. \\    </p>\n<p>\n<strong class=\" \">A few notes and warnings:</strong> </p>\n<ul class=\" \"><li class=\" \"> <p>\nSince your edits are on the actual files that the server serve, it's only recommended for staging/development servers (which is probably the case if the server is on your local machine)    </p>\n</li><li class=\" \"> <p>\nYou should take extra care when you delete a project that is pointing to an external folder, such as this. When deleting, you will be prompted to delete the actual project files. If you will do you, you will loose the files in your server doc-root! So make sure you keep that check-box turned off when you delete a project from the workspace.    </p>\n</li></ul> </div>\n<div class=\"section section-3 \" id=\"30083033_PHPWebPageDebugging-AliasingtoyourPHPproject\">\n<h3 class=\"heading \"><span>Aliasing to your PHP project</span></h3>\n<p>\nIn case you already have a PHP project set up in your Aptana Studio, and you choose not to move/recreate it to support the first option we mentioned above, you'll need to create an Apache Alias pointing to that project. <strong class=\" \">It is crucial that the alias name exactly matches your project name.</strong> </p>\n<p>\nFor example, a project named RemoteDebugTest should have this Alias setting in the httpd.conf:    </p>\n<div class=\"confbox panel panel\">\n<p>\nAlias /RemoteDebugTest C:\\Eclipse\\workspace\\RemoteDebugTest<br />&lt;Directory C:\\Eclipse\\workspace\\RemoteDebugTest&gt;<br />Order allow,deny<br />Allow from all<br />&lt;/Directory&gt;    </p>\n</div>\n<p>\nAfter saving httpd.conf, restart Apache to make your changes effective.    </p>\n</div>\n</div>\n<div class=\"section section-2 \" id=\"30083033_PHPWebPageDebugging-Creatingalaunchconfiguration\">\n<h2 class=\"heading \"><span>Creating a launch configuration</span></h2>\n<p>\nIn the steps above we've prepared the Server side and the Client side (e.g. the IDE) for the debug session. So, the next step is to test that a debug session can be initiated successfully.    </p>\n<p>\nFirst, we've prepared this image to illustrate the sequence of events that are triggered when starting a debug session from the Aptana Studio    </p>\n<p>\n<img src=\"images/download/attachments/30083033/PhpDebugSessionSequence.png\" alt=\"images/download/attachments/30083033/PhpDebugSessionSequence.png\" class=\"confluence-embedded-image\" />\n</p>\n<p>\nAs you can see, the client (which is the Studio in this case) initiate the debug session by hitting a URL on the server side and attaching a few debug parameters that are captured and handled by the debugger extension on the server side (XDebug or Zend Debugger).    </p>\n<p>\nOnce the server processed our request and determined that we want to debug, the server itself tries to contact the Studio to initiate a debug session. From that moment on, the communication is done through the debug protocol (DBGP or Zend Debug Protocol, according to the type of the debugger).    </p>\n<p>\nBreakpoints that were previously set in the editor are sent to the server when you start a session, while the debug protocol itself supports adding more breakpoints during the session.    </p>\n<p>\nNow that you are familiar a bit with the basics, it's time to test your settings.    </p>\n<p>\nFor this example, we assume that you set up your server with an XDebug engine, and that your project is in sync with the files that the server is accessing.    </p>\n<p>\nThe first thing we'll need to check is the communication link between the server and the client.    </p>\n<ul class=\" \"><li class=\" \"> <p>\nCreate a new php file. Name if debugTest.php and paste this code into it:    </p>\n</li></ul> <div class=\"confbox panel panel\">\n<p>\n&lt;?php<br />$w = 'world';<br />echo 'Hello ';<br />echo $w;<br />?&gt;    </p>\n</div>\n<ul class=\" \"><li class=\" \"> <p>\nOpen the launch configuration dialog by accessing the debug shortcut (or by using the action from the menu Run -&gt; Open Debug Dialog)    </p>\n<div class=\"confbox panel panel\">\n<p>\n<strong class=\" \">Create a new*PHP Web Page</strong> debug configuration    </p>\n</div>\n</li><li class=\" \"> <p>\nVerify that the XDebug debugger is selected.    </p>\n</li></ul> <p>\nThe launch configuration generates the URL that we use to contact the debugger. For that reason, and for <i class=\" \">Path Mapping</i> reasons, the configuration need to have a valid server configuration attached to it.    </p>\n<p>\nTo create a server configuration:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nHit the plus button next to the <i class=\" \">PHP Server</i> line.    </p>\n</li><li class=\" \"> <p>\nCreate an Apache, or a Generic, server configuration.    </p>\n<div class=\"confbox panel panel\">\n<p>\n<strong class=\" \">Make sure that the host name is without the <i class=\" \">protocol</i> part (i.e. use localhost and*not</strong> <a class=\"external-link external-link\" href=\"http://localhost\" target=\"_blank\">http://localhost</a>).    </p>\n</div>\n</li></ul> <p>\nContinue with these steps:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nSelect an <i class=\" \">Initial Script</i> from your workspace (for our test, select the debugTest.php file). This will be the entry point, and also the file that will be requested in the URL request.    </p>\n</li><li class=\" \"> <p>\nThe configuration dialog will auto-generate the request URL according to the selected server and the initial script.    </p>\n</li><li class=\" \"> <p>\nVerify that the URL that was generated exists.    </p>\n</li><li class=\" \"> <p>\nIn case the URL need some tweaking to match your server, un-check the <i class=\" \">Auto Generate</i> and edit the URL path manually.    </p>\n</li></ul> <p>\nFinally, hit the <i class=\" \">Debug</i> button.<br />At this point a debug session should be initiated. A browser is opened and the Studio should break on the first line of the debugTest.php file.    </p>\n<p>\nIn case it does not break on the first line, do the following to resolve the problem:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nRe-check that you have the XDebug up and running on your server. Test it using a script with a phpinfo() line in it.    </p>\n</li><li class=\" \"> <p>\nCheck that the port is not blocked by a firewall. The default port for XDebug is 9000 and for Zend Debugger is 10000.    </p>\n</li></ol> <p>\n<img src=\"images/download/attachments/30083033/PhpRemoteDebugConfig.png\" alt=\"images/download/attachments/30083033/PhpRemoteDebugConfig.png\" class=\"confluence-embedded-image\" />\n</p>\n<div class=\"section section-3 \" id=\"30083033_PHPWebPageDebugging-Notes\">\n<h3 class=\"heading \"><span>Notes</span></h3>\n<ul class=\" \"><li class=\" \"> <p>\nThe browser is opened with the URL to the aliased file with the added query string of <i class=\" \">?XDEBUG_SESSION_START=ECLIPSE_DBGP&amp;KEY=some_number</i>, similar to <i class=\" \">?XDEBUG_SESSION_START=ECLIPSE_DBGP&amp;KEY=12276559562343</i> </p>\n</li><li class=\" \"> <p>\nThe number at the end of the URL changes for each launch    </p>\n</li><li class=\" \"> <p>\nOnce you resume execution, even if there are no more breakpoints, the launch in your debug view is still alive. It's just waiting for more requests triggered by browser actions.    </p>\n</li><li class=\" \"> <p>\nFor example: You have a form to debug. You can do so by starting a debug session and placing a breakpoint on the right spot to catch the form input after the user hits the submit button. The debug session will be terminate only when you hit the stop button on that.    </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"30083033_PHPWebPageDebugging-UsingXDebugHelperbrowserextensiontoinitiateadebug\">\n<h2 class=\"heading \"><span>Using XDebug Helper browser extension to initiate a debug</span></h2>\n<div class=\"section section-3 \" id=\"30083033_PHPWebPageDebugging-Installation\">\n<h3 class=\"heading \"><span>Installation</span></h3>\n<p>\nUsing <a class=\"external-link external-link\" href=\"https://chrome.google.com/webstore/detail/eadndfjplgieldjbigjakmdgkmoaaaoc\" target=\"_blank\">XDebug Helper</a> will allow you to start a debug session directly from the Chrome browser.    </p>\n<p>\nOnce you install it, go to the Chrome Extensions  (chrome://chrome/extensions/) page and locate the XDebug Helper. Click &quot;Options&quot; and verify that the IDE key is '<i class=\" \">Eclipse</i>', and that your localhost (at least) is set up in the <i class=\" \">Domain Filters</i> list.    </p>\n<p>\nYou can trigger the helper from the bug-shaped icon located at the right side of the browser's address bar. Once the icon is green, and you access a PHP page on your server, a debug session will be initiated on the Studio side.    </p>\n</div>\n<div class=\"section section-3 \" id=\"30083033_PHPWebPageDebugging-Debugging\">\n<h3 class=\"heading \"><span>Debugging</span></h3>\n<p>\nAs mentioned before, using this tool allows you to start a session straight from the browser.    </p>\n<p>\nSo, for example, if you would like to debug the POST data that was send from an HTML form, you can turn on the XDebug Helper right before you click the 'send' button. In case your Studio is opened and listens on port 9000, you will get a few notifications. The first would be about the session request, and the second would be for you to select the workspace resource that match the file you just hit.    </p>\n<p>\n<i class=\" \"><strong class=\" \">Notes:</strong></i> </p>\n<ol class=\" \"><li class=\" \"> <p>\nThe <strong class=\" \">JIT</strong> (Just In Time) option must be turned on in the XDebug preferences (i.e. under Aptana Studio | Editors | PHP | Debug preference page for the XDebug client)    </p>\n</li><li class=\" \"> <p>\nSince the XDebug Helper caches some cookies in the browser, it might be necessary to delete them if you are experiencing continuous session requests pop-ups in the Studio even when you turned off the helper. In some cases, turning the XDebug Helper off and on again can help clearing those cookies.    </p>\n</li><li class=\" \"> <p>\nWe have mentioned above the way a debug session is initiated. The difference with the XDebug Helper session is that the URL that triggers the debug session is constructed and called from the helper itself. Thus, the Studio might need to get more information regarding the source location and will ask you to provide it when needed.    </p>\n</li></ol> </div>\n</div>\n<div class=\"section section-2 \" id=\"30083033_PHPWebPageDebugging-DebugPorts\">\n<h2 class=\"heading \"><span>Debug Ports</span></h2>\n<p>\nThere are two debug port that the studio opens when loading.    </p>\n<p>\nPort 9000 for the XDebug debugger and port 10000 for the Zend debugger.    </p>\n<p>\nThese ports can be controlled through a Preference:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nPreferences -&gt; Aptana Studio -&gt; Editors -&gt; PHP -&gt; Debug    </p>\n</li></ul> <p>\nWhen launching a PHP session, the Studio will inform you in case that the port it's listening to does not match the XDebug port that was defined in the php.ini.    </p>\n<p>\nFor example, if the php.ini indicates that the XDebug debugger should contact port 9001, while the Studio listens on port 9000, a message box will indicate the problem and will direct you to change the listen port or the ini setting.    </p>\n<div class=\"tablewrap\">\n<table class=\"confluenceTable\">\n<thead class=\" \"></thead><tfoot class=\" \"></tfoot><tbody class=\" \"> <tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<img src=\"images/download/attachments/30083033/XDebugPortNotification.jpg\" alt=\"images/download/attachments/30083033/XDebugPortNotification.jpg\" class=\"confluence-embedded-image\" />\n</p>\n</td>\n</tr>\n</tbody> </table>\n</div>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"PHP Web Page Debugging"});