Ext.data.JsonP['Working_with_XML_Data']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Working with XML Data</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004906\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004906\"><span>Edit</span></a>\n<h1>Working with XML Data</h1>\n<div class=\"section section-2 \" id=\"29004906_WorkingwithXMLData-Objective\">\n<h2 class=\"heading \"><span>Objective</span></h2>\n<p>\nIn this chapter, you will learn how to retrieve XML data from a remote data source via the HTTPClient object. You'll also see how to &quot;walk&quot; an XML document to parse its data.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004906_WorkingwithXMLData-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<p>\nAs was stated in the <a class=\"document-link \" href=\"#!/guide/Working_with_JSON_Data\" Working_with_JSON_Data.html=\"Working_with_JSON_Data.html\">previous chapter</a>, JSON is the preferred format for data transport in a Titanium application because it is easy to consume inside your JavaScript application and it is a very compact format. However, many existing applications maintain an XML-based interface that you must work with in your client application. Titanium provides facilities for consuming XML by providing an <a class=\"external-link external-link\" href=\"http://www.w3.org/TR/DOM-Level-2-Core/\" target=\"_blank\">XML DOM Level 2 implementation</a>, and automatically serializing XML responses into one of our <a class=\"external-link external-link\" href=\"#!/api/Titanium.XML.Document\">XML Document objects</a>. All XML-related functionality in Titanium is contained in the <tt class=\" \">Titanium.XML</tt> namespace.    </p>\n<p>\nInside your handler function, if your response has an XML <tt class=\" \">Content-Type</tt> header, Titanium will automatically serialize the response text into XML for your use:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">xhr.onload = function(e) {</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar doc = </code><code class=\"keyword\">this</code><code class=\"plain\">.responseXML.documentElement;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//this is the XML document object</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">//Use the DOM API to parse the document</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar elements = doc.getElementsByTagName(</code><code class=\"string\">\"someTag\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n</div>\n</div> <div class=\"section section-3 \" id=\"29004906_WorkingwithXMLData-ParsingXML\">\n<h3 class=\"heading \"><span>Parsing XML</span></h3>\n<p>\nA full treatment of the XML DOM and related methods is beyond the scope of this tutorial. We will take a brief look at the topic nonetheless.    </p>\n<p>\nThe XML DOM presents a document as a hierarchy of nodes. Some types of nodes may have child nodes, while others are leaf nodes that don't have children. For XML and HTML documents, these are some of the supported node types:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nDocument &ndash; represents the entire XML document and contains a maximum of one Element node    </p>\n</li><li class=\" \"> <p>\nElement &ndash; contains the remainder of the nodes in your document, this is generally the node you work with as the top-level of the hierarchy    </p>\n</li><li class=\" \"> <p>\nAttr &ndash; represents a node's attributes and contains Text nodes    </p>\n</li><li class=\" \"> <p>\nText &ndash; a leaf node type with no children    </p>\n</li><li class=\" \"> <p>\nCDATASection &ndash; no children    </p>\n</li><li class=\" \"> <p>\nEntity &ndash; contains nodes of various types    </p>\n</li></ul> <p>\nYou'll often use these methods when parsing an XML document:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nThe <tt class=\" \">getElementsByTagName()</tt> method, which returns an array of nodes with the given name    </p>\n</li><li class=\" \"> <p>\nThe <tt class=\" \">item()</tt> method which you use to select a specific node in an array    </p>\n</li><li class=\" \"> <p>\nThe <tt class=\" \">getAttribute()</tt> method which you use to retrieve the value of an attribute with the given name    </p>\n</li><li class=\" \"> <p>\nThe <tt class=\" \">text</tt> and <tt class=\" \">nodeValue</tt> properties, which retrieve the leaf node values associated with the node    </p>\n</li></ul> <p>\nConsider this code snippet, which parses RSS (XML) data retrieved from a blog:    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\">xhr.onload = function() {</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// Data is returned from the blog, start parsing</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar xml = </code><code class=\"keyword\">this</code><code class=\"plain\">.responseXML;</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// the blog's title is in a node named \"channel\"</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar channel = xml.documentElement.getElementsByTagName(</code><code class=\"string\">\"channel\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// begin looping through blog posts</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar data = [];</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// blog posts are in nodes named \"item\"</code></div>\n<div class=\"line\"><code class=\"plain\">\tvar items = xml.documentElement.getElementsByTagName(</code><code class=\"string\">\"item\"</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"keyword\">for</code><code class=\"plain\"> (var i=</code><code class=\"value\">0</code><code class=\"plain\">;i&lt;items.length;i++) {</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tdata.push({</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\tpostTitle: items.item(i).getElementsByTagName(</code><code class=\"string\">\"title\"</code><code class=\"plain\">).item(</code><code class=\"value\">0</code><code class=\"plain\">).text,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t\tpostLink: items.item(i).getElementsByTagName(</code><code class=\"string\">\"link\"</code><code class=\"plain\">).item(</code><code class=\"value\">0</code><code class=\"plain\">).text</code></div>\n<div class=\"line\"><code class=\"plain\">\t\t});</code></div>\n<div class=\"line\"><code class=\"plain\">\t}</code></div>\n<div class=\"line\"><code class=\"plain\"> </code><code class=\"comments\">// fire an app-level event to notify the UI that the blog data is available</code></div>\n<div class=\"line\"><code class=\"plain\">\tTi.App.fireEvent(</code><code class=\"string\">'net:rssDataReturned'</code><code class=\"plain\">,{</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tblogTitle: channel.item(</code><code class=\"value\">0</code><code class=\"plain\">).getElementsByTagName(</code><code class=\"string\">\"title\"</code><code class=\"plain\">).item(</code><code class=\"value\">0</code><code class=\"plain\">).text,</code></div>\n<div class=\"line\"><code class=\"plain\">\t\tblogPosts: data</code></div>\n<div class=\"line\"><code class=\"plain\">\t});</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n</div>\n</div> <p>\nA key point to note for working with XML: you'll need to know the node hierarchy for your document in order to properly parse it. In other words, you'll need to know its DTD (document type definition). Some DTDs are standardized, such as the RSS ATOM feed XML format. Others are proprietary, defined by the companies that create them. A useful tool for viewing the XML structure of data retrieved from a web API is <a class=\"external-link external-link\" href=\"http://apigee.com/\" target=\"_blank\">http://apigee.com/</a>.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004906_WorkingwithXMLData-Hands-onPractice\">\n<h3 class=\"heading \"><span>Hands-on Practice</span></h3>\n<div class=\"section section-4 \" id=\"29004906_WorkingwithXMLData-Goal\">\n<h4 class=\"heading \"><span>Goal</span></h4>\n<p>\nIn this activity, you will write the beginnings of an RSS reader. It will download an RSS feed, parse the titles of the posts in the feed, and display them in a table.    </p>\n</div>\n<div class=\"section section-4 \" id=\"29004906_WorkingwithXMLData-Steps\">\n<h4 class=\"heading \"><span>Steps</span></h4>\n<ol class=\" \"><li class=\" \"> <p>\nCreate a new Titanium Mobile project.    </p>\n</li><li class=\" \"> <p>\nReplace the contents of app.js with code that defines a single window with a white background. To that window, add a TableView.    </p>\n</li><li class=\" \"> <p>\nDeclare an array to hold the data for your table.    </p>\n</li><li class=\" \"> <p>\nCreate an HTTPClient object that retrieves the RSS feed from <a class=\"external-link external-link\" href=\"http://apod.nasa.gov/apod.rss\" target=\"_blank\">http://apod.nasa.gov/apod.rss</a> (the Astronomy Picture of the Day RSS feed).    </p>\n</li><li class=\" \"> <p>\nWith your browser, visit <a class=\"external-link external-link\" href=\"http://apod.nasa.gov/apod.rss\" target=\"_blank\">http://apod.nasa.gov/apod.rss</a> to gain an understanding of the XML node hierarchy of the feed.    </p>\n</li><li class=\" \"> <p>\nDeclare an array named <tt class=\" \">items</tt> that stores all the nodes with a tag name of <tt class=\" \">item</tt>.    </p>\n</li><li class=\" \"> <p>\nIn the <tt class=\" \">onload</tt> callback, loop through the <tt class=\" \">items</tt> array. In each iteration of the loop, create an anonymous object with a single property named <tt class=\" \">title</tt> whose value equals the text leaf of the <tt class=\" \">title</tt> node. Push that anonymous object into your data array.    </p>\n</li><li class=\" \"> <p>\nAssign your data array to the table's <tt class=\" \">data</tt> property to populate your table's rows.    </p>\n</li><li class=\" \"> <p>\nBuild and test your app in the simulator/emulator. It should display the titles for each of the last seven pictures of the day.    </p>\n</li></ol> <p>\nAs a challenge, improve the app by letting the user tap a row to view that day's picture. See the <a class=\"external-link external-link\" href=\"https://github.com/appcelerator/KitchenSink/blob/master/Resources/examples/xml_rss.js\" target=\"_blank\">XML RSS example</a> in the KitchenSink for sample code.    </p>\n</div>\n</div>\n<div class=\"section section-3 \" id=\"29004906_WorkingwithXMLData-ReferencesandFurtherReading\">\n<h3 class=\"heading \"><span>References and Further Reading</span></h3>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"http://assets.appcelerator.com.s3.amazonaws.com/app_u/ebook/6.3_xml.zip\" target=\"_blank\">Finished code</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"https://github.com/appcelerator/KitchenSink/blob/master/Resources/examples/xhr_xml.js\" target=\"_blank\">KitchenSink xhr_xml.js example</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"external-link external-link\" href=\"https://github.com/appcelerator/KitchenSink/blob/master/Resources/examples/xml_rss.js\" target=\"_blank\">Kitchen Sink xml_rss.js example</a> </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"29004906_WorkingwithXMLData-Summary\">\n<h2 class=\"heading \"><span>Summary</span></h2>\n<p>\nIn this chapter, you learned how to retrieve XML data from a remote data source via the HTTPClient object. You also saw how to parse an XML document.    </p>\n</div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Working with XML Data"});