Ext.data.JsonP['Debugging_in_Studio']({"guide":"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Debugging in Studio</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" />\n<link type=\"text/css\" rel=\"stylesheet\" media=\"print\" />\n</head>\n<body>\n<div class=\"container\">\n<div class=\"header\"></div>\n<div id=\"29004940\" class=\"content\"><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=29004940\"><span>Edit</span></a>\n<h1>Debugging in Studio</h1>\n<div class=\"section section-2 \" id=\"29004940_DebugginginStudio-Objective\">\n<h2 class=\"heading \"><span>Objective</span></h2>\n<p>\nIn this section, you will learn how to debug your mobile applications using the tools provided by Studio. You'll learn how to use the Debug perspective, how to set breakpoints, run a project in debug mode, and how to step into, over, and return from functions.    </p>\n</div>\n<div class=\"section section-2 \" id=\"29004940_DebugginginStudio-Contents\">\n<h2 class=\"heading \"><span>Contents</span></h2>\n<p>\nSo far in this chapter, we've looked at print tracing (logging) and crash log analysis. Studio supports breakpoint testing, which lets you evaluate the state and values of variables during the execution of your program.You can set breakpoints at specific locations in your code. Or, you can use an exception breakpoint to pause your program when a specified exception is raised.    </p>\n<p>\nTo see how this works, we'll need to look at these topics:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nRunning a program in debug mode    </p>\n</li><li class=\" \"> <p>\nStudio's Debug perspective    </p>\n</li><li class=\" \"> <p>\nSetting breakpoints    </p>\n</li><li class=\" \"> <p>\nStepping into, through, and over breakpoints and examining the stack trace    </p>\n</li></ul> <div class=\"section section-3 \" id=\"29004940_DebugginginStudio-Runningaprogramindebugmode\">\n<h3 class=\"heading \"><span>Running a program in debug mode</span></h3>\n<p>\nTo use Studio's debugging tools, you'll need to run your app in Debug mode. You can do so in the iOS Simulator or Android emulator. Starting it Release 3.0, you can debug on a physical device as well.    </p>\n<p>\nTo launch a project in debug mode, first select the project in the <strong class=\" \">Project Explorer</strong> view, then in the global tool bar, select <strong class=\" \">Debug</strong> from the <strong class=\" \">Launch Mode </strong>drop-down list and a device from the <strong class=\" \">Target</strong> drop-down list.  If the <strong class=\" \">Launch Automatically</strong> option is enabled under the <strong class=\" \">Target</strong> drop-down list, the application will be automatically launched after the target is selected.  If not, you need to click the <strong class=\" \">Launch</strong> button to start the build process.    </p>\n<p>\n<img src=\"images/download/attachments/29004940/LaunchDebugMode.png\" alt=\"images/download/attachments/29004940/LaunchDebugMode.png\" class=\"confluence-embedded-image\" />\n</p>\n<p>\nThis section discusses debugging using a simulator or emulator. Debugging on device follows the same basic steps, but requires more setup. For details, see:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Debugging_on_Android_Devices\" Debugging_on_Android_Devices.html=\"Debugging_on_Android_Devices.html\">Debugging on Android Devices</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Debugging_on_iOS_Devices\" Debugging_on_iOS_Devices.html=\"Debugging_on_iOS_Devices.html\">Debugging on iOS Devices</a> </p>\n</li></ul> </div>\n<div class=\"section section-3 \" id=\"29004940_DebugginginStudio-Debugperspective\">\n<h3 class=\"heading \"><span>Debug perspective</span></h3>\n<p>\nThe Debug perspective contains several views that are not found in the Web perspective:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<strong class=\" \">Debug View</strong> - The Debug View displays debugging targets and processes that are currently running.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">Variables View</strong> - The Variables View shows the scope of variables when the JavaScript thread is suspended.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">Breakpoints View</strong> - The Breakpoints View lists the breakpoints for the file that you are debugging.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">Scripts View</strong> - The Scripts View displays the scripts that are currently being debugged.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">Expressions View</strong> - The Expressions View displays the value of current expressions.    </p>\n</li></ul> <p>\nIn addition to the above debugging-specific views, you will also have access to some views from the Web perspective that you are probably familiar with:    </p>\n<ul class=\" \"><li class=\" \"> <p>\n<strong class=\" \">Editor</strong> - The Editor area displays the file currently being debugged in its appropriate Editor.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">Outline View</strong> - The Outline View displays an outline of the code for the file that is currently being debugged.    </p>\n</li><li class=\" \"> <p>\n<strong class=\" \">Console View</strong> - The Console View displays log output from the debugger.    </p>\n</li></ul> <p>\nThese are labeled in the following diagram.    </p>\n<p>\n<img src=\"images/download/attachments/29004940/DebugPerspective.png\" alt=\"images/download/attachments/29004940/DebugPerspective.png\" class=\"confluence-embedded-image\" width=\"700\" />\n</p>\n<p>\nStudio will display the Debug perspective automatically when you run a project in debug mode and a breakpoint is encountered. You can manually switch to the Debug perspective by clicking the <strong class=\" \">Perspective</strong> button         <img src=\"images/download/attachments/29004940/debug_button.png\" alt=\"images/download/attachments/29004940/debug_button.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n     in the upper-right corner of the workbench. (Click the corresponding &quot;Web&quot; button to switch back to the normal code-editing perspective.)    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004940_DebugginginStudio-Settingbreakpoints\">\n<h3 class=\"heading \"><span>Setting breakpoints</span></h3>\n<p>\nBreakpoints are locations within your app where execution will pause, giving you the opportunity to examine variable state and values. Code execution is paused at the moment immediately <i class=\" \">before</i> the marked line of code is executed. Any breakpoints you set will be hit when the app loads (or if they are in event listeners or separate files, when those execute). Some other things you can do:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nEdit Variables by clicking their values while inside a breakpoint.    </p>\n</li><li class=\" \"> <p>\nAdd Expressions to the Expressions view to see the value of free form JS code.    </p>\n</li><li class=\" \"> <p>\nSet conditions on breakpoints by going to the &quot;Breakpoints&quot; view, right clicking on the breakpoint, clicking on &quot;Properties&quot;, and hit the checkmark next to &quot;Enable Condition&quot;    </p>\n</li><li class=\" \"> <p>\nClick on various frames in the stack trace to see values of other variables in your call stack.    </p>\n</li></ul> <div class=\"section section-4 \" id=\"29004940_DebugginginStudio-Settingmanualbreakpoints\">\n<h4 class=\"heading \"><span>Setting manual breakpoints</span></h4>\n<p>\nA manual, or explicit, breakpoint marks a specific line of code within your application at which execution should pause. You set these yourself by either:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nDouble-clicking in the margin in the Editor's code view, or,    </p>\n</li><li class=\" \"> <p>\nRight-clicking the margin and choosing Toggle Breakpoint from the context menu.    </p>\n</li></ul> </div>\n<div class=\"section section-4 \" id=\"29004940_DebugginginStudio-Settingexceptionbreakpoints\">\n<h4 class=\"heading \"><span>Setting exception breakpoints</span></h4>\n<p>\nAn exception breakpoint causes your app to pause when an exception is raised that meets the criteria you specify. Such breakpoints are not associated with a particular line of code in your app. To add a breakpoint to your code so that execution automatically breaks on a certain type of exception:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nOpen the file with your script in the appropriate Editor.    </p>\n</li><li class=\" \"> <p>\nFrom the <strong class=\" \">Run</strong> menu, select <strong class=\" \">Add JavaScript Exception Breakpoint...</strong> to open the <strong class=\" \">Add JavaScript Exception Breakpoint</strong> dialog box.    </p>\n</li><li class=\" \"> <p>\nOn the <strong class=\" \">Add JavaScript Exception Breakpoint</strong> pop-up window, select the type of exception that you would like to break on.    </p>\n</li><li class=\" \"> <p>\nRun the app in debug mode. If the exception is thrown, your app will pause and Studio will switch to the Debug perspective.    </p>\n</li></ol> <p>\nTo remove an exception breakpoint:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nSwitch to the Debug perspective, if necessary.    </p>\n</li><li class=\" \"> <p>\nDisplay the Breakpoints view, which will list the current breakpoints in your app.    </p>\n<img src=\"images/download/attachments/29004940/removingexceptionbreakpoint.png\" alt=\"images/download/attachments/29004940/removingexceptionbreakpoint.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</li><li class=\" \"> <p>\nThen, take one of the following actions:    </p>\n<ul class=\" \"><li class=\" \"> <p>\nRight-click the breakpoint and choose Disable, Remove, or Remove All breakpoints.    </p>\n</li><li class=\" \"> <p>\nWith the breakpoint selected, use the associated toolbar buttons to Disable, Remove, or Remove All breakpoints.    </p>\n<img src=\"images/download/attachments/29004940/breakpointtoolbar.png\" alt=\"images/download/attachments/29004940/breakpointtoolbar.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</li></ul></li></ol> </div>\n</div>\n<div class=\"section section-3 \" id=\"29004940_DebugginginStudio-SteppingThroughCode\">\n<h3 class=\"heading \"><span>Stepping Through Code</span></h3>\n<p>\nStepping through code is a common debugging technique that lets you examine your code's operation line by line. Studio supports three types of stepping: Step Into, Step Over, and Step Return. Studio provides various buttons in the Debug perspective to make it easy to step through your code:    </p>\n<div class=\"tablewrap\">\n<table class=\"confluenceTable\">\n<thead class=\" \"></thead><tfoot class=\" \"></tfoot><tbody class=\" \"> <tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<strong class=\" \">Button</strong> </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<strong class=\" \">Name</strong> </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<strong class=\" \">When you click ...</strong> </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<img src=\"images/download/attachments/29004940/IconStepInto.png\" alt=\"images/download/attachments/29004940/IconStepInto.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nStep Into    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nIf set before a function call, execution will move to the first line of the function then stop. If set before a statement, execution will proceed until the next breakpoint (if one is set).    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<img src=\"images/download/attachments/29004940/IconStepOver.png\" alt=\"images/download/attachments/29004940/IconStepOver.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nStep Over    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nStudio will execute the function then stop on the next line in your app.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<img src=\"images/download/attachments/29004940/IconStepReturn.png\" alt=\"images/download/attachments/29004940/IconStepReturn.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nStep Return    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nWhen you've Stepped Into a function, execution will finish in the current function, then return you to the spot where you went into the function, then pause again.    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<img src=\"images/download/attachments/29004940/iconResume.png\" alt=\"images/download/attachments/29004940/iconResume.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nResume    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nExecution will resume; it will stop at the next breakpoint (if one is set).    </p>\n</td>\n</tr>\n<tr>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\n<img src=\"images/download/attachments/29004940/iconTerminate.png\" alt=\"images/download/attachments/29004940/iconTerminate.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nTerminate    </p>\n</td>\n<td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n<p>\nExecution of your app will terminate.    </p>\n</td>\n</tr>\n</tbody> </table>\n</div>\n<p>\nIf you set a breakpoint at a Titanium function that invokes native code, that function is treated as a single statement. Thus, Step Into and Step Over will do the same thing: execute the function then stop on the next line.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004940_DebugginginStudio-Variablesview\">\n<h3 class=\"heading \"><span>Variables view</span></h3>\n<p>\nThe Variables View (shown below) displays current stack frame variables and their values. It is available in the Debug perspective while your app is paused at a breakpoint.    </p>\n<p>\n<img src=\"images/download/attachments/29004940/VariablesView.png\" alt=\"images/download/attachments/29004940/VariablesView.png\" class=\"confluence-embedded-image\" />\n</p>\n<p>\nTo change the value of a variable, when paused at a breakpoint:    </p>\n<ol class=\" \"><li class=\" \"> <p>\nIn the Variables View, expand or collapse the variables hierarchy as necessary to display the relevant variable.    </p>\n</li><li class=\" \"> <p>\nClick the current value (in the Value column).    </p>\n</li><li class=\" \"> <p>\nEnter the new value and press Return (or Enter)    </p>\n</li></ol> <p>\nAlternatively,    </p>\n<ol class=\" \"><li class=\" \"> <p>\nRight-click the variable that you want to change, and choose <strong class=\" \">Change Value...</strong> from the context menu to open the <strong class=\" \">Set Value</strong> dialog box.    </p>\n</li><li class=\" \"> <p>\nEnter the new value for your variable.    </p>\n</li><li class=\" \"> <p>\nClick <strong class=\" \">OK</strong>.    </p>\n</li></ol> </div>\n<div class=\"section section-3 \" id=\"29004940_DebugginginStudio-Viewingerrormessagesintheconsole\">\n<h3 class=\"heading \"><span>Viewing error messages in the console</span></h3>\n<p>\nIn most cases, error messages that cause your app to crash will be displayed in the Console pane of the Web perspective. Occasionally, all you'll see is a simple message like &quot;Application terminated&quot; especially when building for iOS. In those cases, you can sometimes get more detailed information from the Debug perspective.    </p>\n<ol class=\" \"><li class=\" \"> <p>\nWhen the app has crashed, switch to the Debug perspective.    </p>\n</li><li class=\" \"> <p>\nIn the Debug pane, click the &quot;exit value: -1&quot; line, typically the last one.    </p>\n</li><li class=\" \"> <p>\nMore detailed log output should then be visible in the Console pane.    </p>\n</li></ol> <p>\n<img src=\"images/download/attachments/29004940/exitcode.png\" alt=\"images/download/attachments/29004940/exitcode.png\" class=\"confluence-embedded-image confluence-content-image-border\" />\n</p>\n</div>\n<div class=\"section section-3 \" id=\"29004940_DebugginginStudio-Studiobuildlog\">\n<h3 class=\"heading \"><span>Studio build log</span></h3>\n<p>\nStudio maintains a log of messages output during your project build processes. Each time you build a project, the messages are appended to the .log file. You can view this file by choosing <strong class=\" \">Help &gt;</strong><strong class=\" \"> Studio &gt;</strong> <strong class=\" \">View Log File</strong>. The log file is opened in the editor perspective just like any other code file, oldest entries are listed first. Occasionally, you should clear out this file so it doesn't grow too large. Choose <strong class=\" \">Help &gt;</strong><strong class=\" \"> Studio &gt;</strong> <strong class=\" \">Clear Log File</strong> to do so.    </p>\n</div>\n<div class=\"section section-3 \" id=\"29004940_DebugginginStudio-References\">\n<h3 class=\"heading \"><span>References</span></h3>\n<ul class=\" \"><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Debugging_JavaScript\" Debugging_JavaScript.html=\"Debugging_JavaScript.html\">Debugging JavaScript</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Debugging_Titanium_Applications\" Debugging_Titanium_Applications.html=\"Debugging_Titanium_Applications.html\">Debugging Titanium Applications</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Debugging_on_Android_Devices\" Debugging_on_Android_Devices.html=\"Debugging_on_Android_Devices.html\">Debugging on Android Devices</a> </p>\n</li><li class=\" \"> <p>\n<a class=\"document-link \" href=\"#!/guide/Debugging_on_iOS_Devices\" Debugging_on_iOS_Devices.html=\"Debugging_on_iOS_Devices.html\">Debugging on iOS Devices</a> </p>\n</li><li class=\" \"> <p>\nEclipse <a class=\"external-link external-link\" href=\"http://help.eclipse.org/indigo/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fviews%2Fdebug%2Fref-executioncontrolcommands.htm\" target=\"_blank\">Execution Control Commands</a> </p>\n</li></ul> </div>\n</div>\n<div class=\"section section-2 \" id=\"29004940_DebugginginStudio-Summary\">\n<h2 class=\"heading \"><span>Summary</span></h2>\n<p>\nIn this section, you learned how to debug your mobile applications using the tools provided by Studio. You learned how to use the Debug perspective, how to set breakpoints, run a project in debug mode, and how to step into, over, and return from functions.    </p>\n<div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"confbox programlisting scroll-unprocessed\">\n<div class=\"defaultnew syntaxhighlighter\">\n<div class=\"line\"><code class=\"plain\"> </code></div>\n</div>\n</div> </div>\n</div>\n<div class=\"footer\">\n            Created with <a href=\"http://k15t.com/display/web/Scroll-Wiki-EclipseHelp-Exporter-for-Confluence\" target=\"_blank\">Scroll EclipseHelp Exporter for Confluence</a>.\n        </div>\n</div>\n</body>\n</html>\n","title":"Debugging in Studio"});